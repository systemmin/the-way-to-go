import{_ as u,c as i,b as t,f as n,d as e,e as r,r as s,o as d}from"./app-DtITwm2S.js";const p={};function m(a,l){const o=s("RouteLink");return d(),i("div",null,[l[10]||(l[10]=t("h1",{id:"_11-13-总结-go-中的面向对象",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_11-13-总结-go-中的面向对象"},[t("span",null,"11.13 总结：Go 中的面向对象")])],-1)),l[11]||(l[11]=t("p",null,"我们总结一下前面看到的：Go 没有类，而是松耦合的类型、方法对接口的实现。",-1)),l[12]||(l[12]=t("p",null,"OO 语言最重要的三个方面分别是：封装、继承和多态，在 Go 中它们是怎样表现的呢？",-1)),t("ul",null,[t("li",null,[t("p",null,[l[1]||(l[1]=n("封装（数据隐藏）：和别的 OO 语言有 4 个或更多的访问层次相比，Go 把它简化为了 2 层（参见 ")),e(o,{to:"/chapter-2/04.2.html"},{default:r(()=>l[0]||(l[0]=[n("4.2 节")])),_:1}),l[2]||(l[2]=n("的可见性规则）:"))]),l[3]||(l[3]=t("p",null,[n("1）包范围内的：通过标识符首字母小写，"),t("em",null,"对象"),n("只在它所在的包内可见")],-1)),l[4]||(l[4]=t("p",null,[n("2）可导出的：通过标识符首字母大写，"),t("em",null,"对象"),n("对所在包以外也可见")],-1))])]),l[13]||(l[13]=t("p",null,"类型只拥有自己所在包中定义的方法。",-1)),l[14]||(l[14]=t("ul",null,[t("li",null,"继承：用组合实现：内嵌一个（或多个）包含想要的行为（字段和方法）的类型；多重继承可以通过内嵌多个类型实现"),t("li",null,"多态：用接口实现：某个类型的实例可以赋给它所实现的任意接口类型的变量。类型和接口是松耦合的，并且多重继承可以通过实现多个接口实现。Go 接口不是 Java 和 C# 接口的变体，而且接口间是不相关的，并且是大规模编程和可适应的演进型设计的关键。")],-1)),l[15]||(l[15]=t("h2",{id:"链接",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#链接"},[t("span",null,"链接")])],-1)),t("ul",null,[t("li",null,[e(o,{to:"/chapter-2/directory.html"},{default:r(()=>l[5]||(l[5]=[n("目录")])),_:1})]),t("li",null,[l[7]||(l[7]=n("上一节：")),e(o,{to:"/chapter-2/11.12.html"},{default:r(()=>l[6]||(l[6]=[n("接口与动态类型")])),_:1})]),t("li",null,[l[9]||(l[9]=n("下一节：")),e(o,{to:"/chapter-2/11.14.html"},{default:r(()=>l[8]||(l[8]=[n("结构体，集合和高阶函数")])),_:1})])])])}const g=u(p,[["render",m],["__file","11.13.html.vue"]]),v=JSON.parse('{"path":"/chapter-2/11.13.html","title":"11.13 总结：Go 中的面向对象","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"11.13 总结：Go 中的面向对象","slug":"_11-13-总结-go-中的面向对象","link":"#_11-13-总结-go-中的面向对象","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-2/11.13.md"}');export{g as comp,v as data};
