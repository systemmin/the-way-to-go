import{_ as i,c as o,a as l,b as a,f as s,d as p,e as t,r as u,o as r}from"./app-DtITwm2S.js";const c={};function d(k,n){const e=u("RouteLink");return r(),o("div",null,[n[36]||(n[36]=l('<h1 id="_17-1-逗号-ok-模式" tabindex="-1"><a class="header-anchor" href="#_17-1-逗号-ok-模式"><span>17.1 逗号 ok 模式</span></a></h1><p>在学习本书第二部分和第三部分时，我们经常在一个表达式返回 2 个参数时使用这种模式：<code>something, ok</code>，第一个参数是一个值或者 <code>nil</code>，第二个参数是 <code>true</code>/<code>false</code> 或者一个错误 <code>error</code>。在一个需要赋值的 <code>if</code> 条件语句中，使用这种模式去检测第二个参数值会让代码显得优雅简洁。这种模式在 Go 语言编码规范中非常重要。下面总结了所有使用这种模式的例子：</p>',2)),a("p",null,[n[1]||(n[1]=s("（1）在函数返回时检测错误（参考")),p(e,{to:"/chapter-4/05.2.html"},{default:t(()=>n[0]||(n[0]=[s("第 5.2 小节")])),_:1}),n[2]||(n[2]=s("）:"))]),n[37]||(n[37]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">value<span class="token punctuation">,</span> err <span class="token operator">:=</span> pack1<span class="token punctuation">.</span><span class="token function">Func1</span><span class="token punctuation">(</span>param1<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error %s in pack1.Func1 with parameter %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param1<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 函数Func1没有错误:</span></span>
<span class="line"><span class="token function">Process</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">e<span class="token punctuation">.</span>g<span class="token punctuation">.</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码中的函数将错误返回给它的调用者，当函数执行成功时，返回的错误是 <code>nil</code>，所以使用这种写法：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">SomeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    …</span>
<span class="line">    <span class="token keyword">if</span> value<span class="token punctuation">,</span> err <span class="token operator">:=</span> pack1<span class="token punctuation">.</span><span class="token function">Func1</span><span class="token punctuation">(</span>param1<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        …</span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    …</span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),a("p",null,[n[4]||(n[4]=s("这种模式也常用于通过 ")),n[5]||(n[5]=a("code",null,"defer",-1)),n[6]||(n[6]=s(" 使程序从 ")),n[7]||(n[7]=a("code",null,"panic",-1)),n[8]||(n[8]=s(" 中恢复执行（参考")),p(e,{to:"/chapter-4/17.2.html"},{default:t(()=>n[3]||(n[3]=[s("第 17.2(4) 小节")])),_:1}),n[9]||(n[9]=s("）。"))]),a("p",null,[n[11]||(n[11]=s("要实现简洁的错误检测代码，更好的方式是使用闭包，参考")),p(e,{to:"/chapter-4/16.10.html"},{default:t(()=>n[10]||(n[10]=[s("第 16.10.2 小节")])),_:1})]),a("p",null,[n[13]||(n[13]=s("（2）检测映射中是否存在一个键值（参考")),p(e,{to:"/chapter-4/08.2.html"},{default:t(()=>n[12]||(n[12]=[s("第 8.2 小节")])),_:1}),n[14]||(n[14]=s("）：")),n[15]||(n[15]=a("code",null,"key1",-1)),n[16]||(n[16]=s(" 在映射 ")),n[17]||(n[17]=a("code",null,"map1",-1)),n[18]||(n[18]=s(" 中是否有值？"))]),n[38]||(n[38]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> value<span class="token punctuation">,</span> isPresent <span class="token operator">=</span> map1<span class="token punctuation">[</span>key1<span class="token punctuation">]</span><span class="token punctuation">;</span> isPresent <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">Process</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// key1 不存在</span></span>
<span class="line">…</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("p",null,[n[20]||(n[20]=s("（3）检测一个接口类型变量 ")),n[21]||(n[21]=a("code",null,"varI",-1)),n[22]||(n[22]=s(" 是否包含了类型 ")),n[23]||(n[23]=a("code",null,"T",-1)),n[24]||(n[24]=s("：类型断言（参考")),p(e,{to:"/chapter-4/11.3.html"},{default:t(()=>n[19]||(n[19]=[s("第 11.3 小节")])),_:1}),n[25]||(n[25]=s("）："))]),n[39]||(n[39]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> varI<span class="token punctuation">.</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Process</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 接口类型 varI 没有包含类型 T</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("p",null,[n[27]||(n[27]=s("（4）检测一个通道 ")),n[28]||(n[28]=a("code",null,"ch",-1)),n[29]||(n[29]=s(" 是否关闭（参考")),p(e,{to:"/chapter-4/14.3.html"},{default:t(()=>n[26]||(n[26]=[s("第 14.3 小节")])),_:1}),n[30]||(n[30]=s("）："))]),n[40]||(n[40]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">    <span class="token keyword">for</span> input <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">Process</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">    <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> input<span class="token punctuation">,</span> open <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">;</span> <span class="token operator">!</span>open <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">break</span> <span class="token comment">// 通道是关闭的</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">Process</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,4)),a("ul",null,[a("li",null,[p(e,{to:"/chapter-4/directory.html"},{default:t(()=>n[31]||(n[31]=[s("目录")])),_:1})]),a("li",null,[n[33]||(n[33]=s("上一节：")),p(e,{to:"/chapter-4/17.0.html"},{default:t(()=>n[32]||(n[32]=[s("Go 语言模式")])),_:1})]),a("li",null,[n[35]||(n[35]=s("下一节：")),p(e,{to:"/chapter-4/17.2.html"},{default:t(()=>n[34]||(n[34]=[s("defer 模式")])),_:1})])])])}const m=i(c,[["render",d],["__file","17.1.html.vue"]]),b=JSON.parse('{"path":"/chapter-4/17.1.html","title":"17.1 逗号 ok 模式","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"17.1 逗号 ok 模式","slug":"_17-1-逗号-ok-模式","link":"#_17-1-逗号-ok-模式","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-4/17.1.md"}');export{m as comp,b as data};
