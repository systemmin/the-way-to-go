import{_ as o,c as e,b as t,f as s,d as l,e as p,a as i,r,o as u}from"./app-DtITwm2S.js";const d={};function k(m,n){const a=r("RouteLink");return u(),e("div",null,[n[25]||(n[25]=t("h1",{id:"_13-0-错误处理与测试",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_13-0-错误处理与测试"},[t("span",null,"13.0 错误处理与测试")])],-1)),t("p",null,[n[2]||(n[2]=s("Go 没有像 Java 和 .NET 那样的 ")),n[3]||(n[3]=t("code",null,"try/catch",-1)),n[4]||(n[4]=s(" 异常机制：不能执行抛异常操作。但是有一套 ")),n[5]||(n[5]=t("code",null,"defer-panic-and-recover",-1)),n[6]||(n[6]=s(" 机制（参见 ")),l(a,{to:"/chapter-3/13.2.html"},{default:p(()=>n[0]||(n[0]=[s("13.2")])),_:1}),n[7]||(n[7]=s("-")),l(a,{to:"/chapter-3/13.3.html"},{default:p(()=>n[1]||(n[1]=[s("13.3")])),_:1}),n[8]||(n[8]=s(" 节）。"))]),n[26]||(n[26]=i(`<p>Go 的设计者觉得 <code>try/catch</code> 机制的使用太泛滥了，而且从底层向更高的层级抛异常太耗费资源。他们给 Go 设计的机制也可以“捕捉”异常，但是更轻量，并且只应该作为（处理错误的）最后的手段。</p><p>Go 是怎么处理普通错误的呢？通过在函数和方法中返回错误对象作为它们的唯一或最后一个返回值——如果返回 <code>nil</code>，则没有错误发生——并且主调 (calling) 函数总是应该检查收到的错误。</p><p><strong>永远不要忽略错误，否则可能会导致程序崩溃！！</strong></p><p>处理错误并且在函数发生错误的地方给用户返回错误信息：照这样处理就算真的出了问题，你的程序也能继续运行并且通知给用户。<code>panic()</code> 和 <code>recover()</code> 是用来处理真正的异常（无法预测的错误）而不是普通的错误。</p><p>库函数通常必须返回某种错误提示给主调函数。</p><p>在前面的章节中我们了解了 Go 检查和报告错误条件的惯有方式：</p><ul><li><p>产生错误的函数会返回两个变量，一个值和一个错误码；如果后者是 <code>nil</code> 就是成功，非 <code>nil</code> 就是发生了错误。</p></li><li><p>为了防止发生错误时正在执行的函数（如果有必要的话甚至会是整个程序）被中止，在调用函数后必须检查错误。</p></li></ul><p>下面这段来自 <code>pack1</code> 包的代码 <code>Func1()</code> 测试了它的返回值：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> value<span class="token punctuation">,</span> err <span class="token operator">:=</span> pack1<span class="token punctuation">.</span><span class="token function">Func1</span><span class="token punctuation">(</span>param1<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error %s in pack1.Func1 with parameter %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param1<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span>    <span class="token comment">// or: return err</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// Process(value)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>为了更清晰的代码，应该总是使用包含错误值变量的 if 复合语句</em></p>`,10)),t("p",null,[n[11]||(n[11]=s("上例除了 ")),n[12]||(n[12]=t("code",null,"fmt.Printf()",-1)),n[13]||(n[13]=s(" 还可以使用 ")),n[14]||(n[14]=t("code",null,"log",-1)),n[15]||(n[15]=s(" 中对应的方法（参见 ")),l(a,{to:"/chapter-3/13.3.html"},{default:p(()=>n[9]||(n[9]=[s("13.3")])),_:1}),n[16]||(n[16]=s(" 节和 ")),l(a,{to:"/chapter-3/15.2.html"},{default:p(()=>n[10]||(n[10]=[s("15.2")])),_:1}),n[17]||(n[17]=s(" 节），如果程序中止也没关系的话甚至可以使用 ")),n[18]||(n[18]=t("code",null,"panic()",-1)),n[19]||(n[19]=s("（参见后面的章节）。"))]),n[27]||(n[27]=t("h2",{id:"链接",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#链接"},[t("span",null,"链接")])],-1)),t("ul",null,[t("li",null,[l(a,{to:"/chapter-3/directory.html"},{default:p(()=>n[20]||(n[20]=[s("目录")])),_:1})]),t("li",null,[n[22]||(n[22]=s("上一节：")),l(a,{to:"/chapter-3/12.12.html"},{default:p(()=>n[21]||(n[21]=[s("Go 中的密码学")])),_:1})]),t("li",null,[n[24]||(n[24]=s("下一节：")),l(a,{to:"/chapter-3/13.1.html"},{default:p(()=>n[23]||(n[23]=[s("错误处理")])),_:1})])])])}const f=o(d,[["render",k],["__file","13.0.html.vue"]]),v=JSON.parse('{"path":"/chapter-3/13.0.html","title":"13.0 错误处理与测试","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"13.0 错误处理与测试","slug":"_13-0-错误处理与测试","link":"#_13-0-错误处理与测试","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-3/13.0.md"}');export{f as comp,v as data};
