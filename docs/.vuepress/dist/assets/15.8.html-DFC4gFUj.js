import{_ as o,c,a as l,b as a,d as p,e,f as s,r as i,o as u}from"./app-DtITwm2S.js";const r={};function k(d,n){const t=i("RouteLink");return u(),c("div",null,[n[5]||(n[5]=l(`<h1 id="_15-8-精巧的多功能网页服务器" tabindex="-1"><a class="header-anchor" href="#_15-8-精巧的多功能网页服务器"><span>15.8 精巧的多功能网页服务器</span></a></h1><p>为进一步深入理解 <code>http</code> 包以及如何构建网页服务器功能，让我们来学习和体会下面的例子：先列出代码，然后给出不同功能的实现方法，程序输出显示在表格中。</p><p>示例 15.20 <a href="examples/chapter_15/elaborated_webserver.go">elaborated_webserver.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;bytes&quot;</span></span>
<span class="line">	<span class="token string">&quot;expvar&quot;</span></span>
<span class="line">	<span class="token string">&quot;flag&quot;</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">	<span class="token string">&quot;io&quot;</span></span>
<span class="line">	<span class="token string">&quot;log&quot;</span></span>
<span class="line">	<span class="token string">&quot;net/http&quot;</span></span>
<span class="line">	<span class="token string">&quot;os&quot;</span></span>
<span class="line">	<span class="token string">&quot;strconv&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// hello world, the web server</span></span>
<span class="line"><span class="token keyword">var</span> helloRequests <span class="token operator">=</span> expvar<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span><span class="token string">&quot;hello-requests&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// flags:</span></span>
<span class="line"><span class="token keyword">var</span> webroot <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/home/user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;web root directory&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// simple flag server</span></span>
<span class="line"><span class="token keyword">var</span> booleanflag <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">Bool</span><span class="token punctuation">(</span><span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;another flag for testing&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Simple counter server. POSTing to it will set the value.</span></span>
<span class="line"><span class="token keyword">type</span> Counter <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	n <span class="token builtin">int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// a channel</span></span>
<span class="line"><span class="token keyword">type</span> Chan <span class="token keyword">chan</span> <span class="token builtin">int</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>Logger<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/go/hello&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>HelloServer<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token comment">// The counter is published as a variable directly.</span></span>
<span class="line">	ctr <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span></span>
<span class="line">	expvar<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token string">&quot;counter&quot;</span><span class="token punctuation">,</span> ctr<span class="token punctuation">)</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/counter&quot;</span><span class="token punctuation">,</span> ctr<span class="token punctuation">)</span></span>
<span class="line">	<span class="token comment">// http.Handle(&quot;/go/&quot;, http.FileServer(http.Dir(&quot;/tmp&quot;))) // uses the OS filesystem</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/go/&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">StripPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;/go/&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">FileServer</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span><span class="token operator">*</span>webroot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/flags&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>FlagServer<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/args&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>ArgServer<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/chan&quot;</span><span class="token punctuation">,</span> <span class="token function">ChanCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/date&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>DateServer<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:12345&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span><span class="token string">&quot;ListenAndServe:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">Logger</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span></span>
<span class="line">	w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;oops&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">HelloServer</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	helloRequests<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">	io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;hello, world!\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// This makes Counter satisfy the expvar.Var interface, so we can export</span></span>
<span class="line"><span class="token comment">// it directly.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>ctr <span class="token operator">*</span>Counter<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> ctr<span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>ctr <span class="token operator">*</span>Counter<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">switch</span> req<span class="token punctuation">.</span>Method <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">case</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">:</span> <span class="token comment">// increment n</span></span>
<span class="line">		ctr<span class="token punctuation">.</span>n<span class="token operator">++</span></span>
<span class="line">	<span class="token keyword">case</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">:</span> <span class="token comment">// set n to posted value</span></span>
<span class="line">		buf <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">)</span></span>
<span class="line">		io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> req<span class="token punctuation">.</span>Body<span class="token punctuation">)</span></span>
<span class="line">		body <span class="token operator">:=</span> buf<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">if</span> n<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">			fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;bad POST: %v\\nbody: [%v]\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> body<span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">			ctr<span class="token punctuation">.</span>n <span class="token operator">=</span> n</span>
<span class="line">			fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;counter reset\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;counter = %d\\n&quot;</span><span class="token punctuation">,</span> ctr<span class="token punctuation">.</span>n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">FlagServer</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain; charset=utf-8&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Flags:\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	flag<span class="token punctuation">.</span><span class="token function">VisitAll</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>f <span class="token operator">*</span>flag<span class="token punctuation">.</span>Flag<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> f<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> f<span class="token punctuation">.</span>DefValue <span class="token punctuation">{</span></span>
<span class="line">			fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;%s = %s [default = %s]\\n&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> f<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>DefValue<span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">			fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;%s = %s\\n&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> f<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// simple argument server</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">ArgServer</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span>Args <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">ChanCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Chan <span class="token punctuation">{</span></span>
<span class="line">	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>Chan<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c Chan<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">for</span> x <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> x<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">			c <span class="token operator">&lt;-</span> x</span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> c</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>ch Chan<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;channel send #%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// exec a program, redirecting output</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">DateServer</span><span class="token punctuation">(</span>rw http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	rw<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain; charset=utf-8&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	r<span class="token punctuation">,</span> w<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Pipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> <span class="token string">&quot;pipe: %s\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">return</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	p<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">StartProcess</span><span class="token punctuation">(</span><span class="token string">&quot;/bin/date&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;date&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>os<span class="token punctuation">.</span>ProcAttr<span class="token punctuation">{</span>Files<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">{</span><span class="token boolean">nil</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> w<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">defer</span> r<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	w<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> <span class="token string">&quot;fork/exec: %s\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">return</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">defer</span> p<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> r<span class="token punctuation">)</span></span>
<span class="line">	wait<span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> <span class="token string">&quot;wait: %s\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">return</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token operator">!</span>wait<span class="token punctuation">.</span><span class="token function">Exited</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> <span class="token string">&quot;date: %v\\n&quot;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">return</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>处理函数</th><th>调用 URL</th><th>浏览器获得响应</th></tr></thead><tbody><tr><td><code>Logger()</code></td><td>http://localhost:12345/ （根）</td><td>oops</td></tr></tbody></table><p><code>Logger()</code> 处理函数用 <code>w.WriteHeader(404)</code> 来输出 “404 Not Found”头部。</p><p>这项技术通常很有用，无论何时服务器执行代码产生错误，都可以应用类似这样的代码：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">	w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外利用 <code>logger</code> 包的函数，针对每个请求在服务器端命令行打印日期、时间和 URL。</p><table><thead><tr><th>处理函数</th><th>调用 URL</th><th>浏览器获得响应</th></tr></thead><tbody><tr><td><code>HelloServer()</code></td><td>http://localhost:12345/go/hello</td><td>hello, world!</td></tr></tbody></table><p>包 <code>expvar</code> 可以创建（Int，Float 和 String 类型）变量，并将它们发布为公共变量。它会在 HTTP URL <code>/debug/vars</code> 上以 JSON 格式公布。通常它被用于服务器操作计数。<code>helloRequests</code> 就是这样一个 <code>int64</code> 变量，该处理函数对其加 1，然后写入“hello world!”到浏览器。</p><table><thead><tr><th>处理函数</th><th>调用 URL</th><th>浏览器获得响应</th></tr></thead><tbody><tr><td><code>Counter()</code></td><td>http://localhost:12345/counter</td><td>counter = 1</td></tr><tr><td><code>Counter()</code></td><td>刷新（GET 请求）</td><td>counter = 2</td></tr></tbody></table><p>计数器对象 <code>ctr</code> 有一个 <code>String()</code> 方法，所以它实现了 <code>expvar.Var</code> 接口。这使其可以被发布，尽管它是一个结构体。<code>ServeHTTP()</code> 函数使 <code>ctr</code> 成为处理器，因为它的签名正确实现了 <code>http.Handler</code> 接口。</p><table><thead><tr><th>处理函数</th><th>调用 URL</th><th>浏览器获得响应</th></tr></thead><tbody><tr><td><code>FileServer()</code></td><td>http://localhost:12345/go/ggg.html</td><td>404 page not found</td></tr></tbody></table><p><code>FileServer(root FileSystem) Handler</code> 返回一个处理器，它以 <code>root</code> 作为根，用文件系统的内容响应 HTTP 请求。要获得操作系统的文件系统，用 <code>http.Dir</code>，例如：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/go/&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">FileServer</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><table><thead><tr><th>处理函数</th><th>调用 URL</th><th>浏览器获得响应</th></tr></thead><tbody><tr><td><code>FlagServer()</code></td><td>http://localhost:12345/flags</td><td>Flags: boolean = true root = /home/rsc</td></tr></tbody></table><p>该处理函数使用了 <code>flag</code> 包。<code>VisitAll()</code> 函数迭代所有的标签 (flag)，打印它们的名称、值和默认值（当不同于“值”时）。</p><table><thead><tr><th>处理函数</th><th>调用 URL</th><th>浏览器获得响应</th></tr></thead><tbody><tr><td><code>ArgServer()</code></td><td>http://localhost:12345/args</td><td>./elaborated_webserver.exe</td></tr></tbody></table><p>该处理函数迭代 <code>os.Args</code> 以打印出所有的命令行参数。如果没有指定则只有程序名称（可执行程序的路径）会被打印出来。</p><table><thead><tr><th>处理函数</th><th>调用 URL</th><th>浏览器获得响应</th></tr></thead><tbody><tr><td><code>Channel()</code></td><td>http://localhost:12345/chan</td><td>channel send #1</td></tr><tr><td><code>Channel()</code></td><td>刷新</td><td>channel send #2</td></tr></tbody></table><p>每当有新请求到达，通道的 <code>ServeHTTP()</code> 方法从通道获取下一个整数并显示。由此可见，网页服务器可以从通道中获取要发送的响应，它可以由另一个函数产生（甚至是客户端）。下面的代码片段正是一个这样的处理函数，但会在 30 秒后超时：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">ChanResponse</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	timeout <span class="token operator">:=</span> <span class="token builtin">make</span> <span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">go</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">30e9</span><span class="token punctuation">)</span></span>
<span class="line">		timeout <span class="token operator">&lt;-</span> <span class="token boolean">true</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">select</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">case</span> msg <span class="token operator">:=</span> <span class="token operator">&lt;-</span>messages<span class="token punctuation">:</span></span>
<span class="line">		io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> msg<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">case</span> stop <span class="token operator">:=</span> <span class="token operator">&lt;-</span>timeout<span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">return</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>处理函数</th><th>调用 URL</th><th>浏览器获得响应</th></tr></thead><tbody><tr><td><code>DateServer()</code></td><td>http://localhost:12345/date</td><td>显示当前时间（由于是调用 /bin/date，仅在 Unix 下有效）</td></tr></tbody></table><p>可能的输出：<code>Thu Sep 8 12:41:09 CEST 2011</code>。</p><p><code>os.Pipe()</code> 返回一对相关联的 <code>File</code>，从 <code>r</code> 读取数据，返回已读取的字节数来自于 <code>w</code> 的写入。函数返回这两个文件和错误，如果有的话：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">Pipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>File<span class="token punctuation">,</span> w <span class="token operator">*</span>File<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,28)),a("ul",null,[a("li",null,[p(t,{to:"/chapter-3/directory.html"},{default:e(()=>n[0]||(n[0]=[s("目录")])),_:1})]),a("li",null,[n[2]||(n[2]=s("上一节：")),p(t,{to:"/chapter-3/15.7.html"},{default:e(()=>n[1]||(n[1]=[s("探索 template 包")])),_:1})]),a("li",null,[n[4]||(n[4]=s("下一节：")),p(t,{to:"/chapter-3/15.9.html"},{default:e(()=>n[3]||(n[3]=[s("用 rpc 实现远程过程调用")])),_:1})])])])}const m=o(r,[["render",k],["__file","15.8.html.vue"]]),b=JSON.parse('{"path":"/chapter-3/15.8.html","title":"15.8 精巧的多功能网页服务器","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"15.8 精巧的多功能网页服务器","slug":"_15-8-精巧的多功能网页服务器","link":"#_15-8-精巧的多功能网页服务器","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-3/15.8.md"}');export{m as comp,b as data};
