import{_ as o,c as i,b as s,f as a,d as e,e as p,a as l,r as c,o as u}from"./app-DtITwm2S.js";const r={};function d(k,n){const t=c("RouteLink");return u(),i("div",null,[n[29]||(n[29]=s("h1",{id:"_13-3-从-panic-中恢复-recover",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_13-3-从-panic-中恢复-recover"},[s("span",null,"13.3 从 panic 中恢复 (recover)")])],-1)),n[30]||(n[30]=s("p",null,[a("正如名字一样，这个 ("),s("code",null,"recover()"),a(") 内建函数被用于从 panic 或错误场景中恢复：让程序可以从 panicking 重新获得控制权，停止终止过程进而恢复正常执行。")],-1)),s("p",null,[n[1]||(n[1]=s("code",null,"recover",-1)),n[2]||(n[2]=a(" 只能在 ")),n[3]||(n[3]=s("code",null,"defer",-1)),n[4]||(n[4]=a(" 修饰的函数（参见 ")),e(t,{to:"/chapter-3/06.4.html"},{default:p(()=>n[0]||(n[0]=[a("6.4 节")])),_:1}),n[5]||(n[5]=a("）中使用：用于取得 ")),n[6]||(n[6]=s("code",null,"panic()",-1)),n[7]||(n[7]=a(" 调用中传递过来的错误值，如果是正常执行，调用 ")),n[8]||(n[8]=s("code",null,"recover()",-1)),n[9]||(n[9]=a(" 会返回 ")),n[10]||(n[10]=s("code",null,"nil",-1)),n[11]||(n[11]=a("，且没有其它效果。"))]),n[31]||(n[31]=l(`<p><u>总结</u>：<code>panic()</code> 会导致栈被展开直到 <code>defer</code> 修饰的 <code>recover()</code> 被调用或者程序中止。</p><p>下面例子中的 <code>protect()</code> 函数调用函数参数 <code>g</code> 来保护调用者防止从 <code>g</code> 中抛出的运行时 panic，并展示 panic 中的信息：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">protect</span><span class="token punctuation">(</span>g <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;done&quot;</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token comment">// Println executes normally even if there is a panic</span></span>
<span class="line">		<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">			log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;run time panic: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//   possible runtime-error</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这跟 Java 和 .NET 这样的语言中的 catch 块类似。</p>`,4)),s("p",null,[n[13]||(n[13]=s("code",null,"log",-1)),n[14]||(n[14]=a(" 包实现了简单的日志功能：默认的 log 对象向标准错误输出中写入并打印每条日志信息的日期和时间。除了 ")),n[15]||(n[15]=s("code",null,"Println",-1)),n[16]||(n[16]=a(" 和 ")),n[17]||(n[17]=s("code",null,"Printf",-1)),n[18]||(n[18]=a(" 函数，其它的致命性函数都会在写完日志信息后调用 ")),n[19]||(n[19]=s("code",null,"os.Exit(1)",-1)),n[20]||(n[20]=a("，那些退出函数也是如此。而 Panic 效果的函数会在写完日志信息后调用 ")),n[21]||(n[21]=s("code",null,"panic()",-1)),n[22]||(n[22]=a("；可以在程序必须中止或发生了临界错误时使用它们，就像当 web 服务器不能启动时那样（参见 ")),e(t,{to:"/chapter-3/15.4.html"},{default:p(()=>n[12]||(n[12]=[a("15.4 节")])),_:1}),n[23]||(n[23]=a(" 中的例子）。"))]),n[32]||(n[32]=l(`<p>log 包用那些方法 (methods) 定义了一个 <code>Logger</code> 接口类型，如果你想自定义日志系统的话可以参考 <a href="http://golang.org/pkg/log/#Logger" target="_blank" rel="noopener noreferrer">http://golang.org/pkg/log/#Logger</a> 。</p><p>这是一个展示 <code>panic()</code>，<code>defer</code> 和 <code>recover()</code> 怎么结合使用的完整例子：</p><p>示例 13.3 <a href="examples/chapter_13/panic_recover.go">panic_recover.go</a>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// panic_recover.go</span></span>
<span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">badCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;bad end&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> e <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Panicing %s\\r\\n&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token function">badCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;After bad call\\r\\n&quot;</span><span class="token punctuation">)</span> <span class="token comment">// &lt;-- would not reach</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Calling test\\r\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Test completed\\r\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Calling test</span>
<span class="line">Panicing bad end</span>
<span class="line">Test completed</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>defer</code>-<code>panic()</code>-<code>recover()</code> 在某种意义上也是一种像 <code>if</code>，<code>for</code> 这样的控制流机制。</p><p>Go 标准库中许多地方都用了这个机制，例如，<code>json</code> 包中的解码和 <code>regexp</code> 包中的 <code>Complie()</code> 函数。Go 库的原则是即使在包的内部使用了 <code>panic()</code>，在它的对外接口 (API) 中也必须用 <code>recover()</code> 处理成显式返回的错误。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,9)),s("ul",null,[s("li",null,[e(t,{to:"/chapter-3/directory.html"},{default:p(()=>n[24]||(n[24]=[a("目录")])),_:1})]),s("li",null,[n[26]||(n[26]=a("上一节：")),e(t,{to:"/chapter-3/13.2.html"},{default:p(()=>n[25]||(n[25]=[a("错运行时异常和 panic")])),_:1})]),s("li",null,[n[28]||(n[28]=a("下一节：")),e(t,{to:"/chapter-3/13.4.html"},{default:p(()=>n[27]||(n[27]=[a("自定义包中的错误处理和 panicking")])),_:1})])])])}const m=o(r,[["render",d],["__file","13.3.html.vue"]]),g=JSON.parse('{"path":"/chapter-3/13.3.html","title":"13.3 从 panic 中恢复 (recover)","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"13.3 从 panic 中恢复 (recover)","slug":"_13-3-从-panic-中恢复-recover","link":"#_13-3-从-panic-中恢复-recover","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-3/13.3.md"}');export{m as comp,g as data};
