import{_ as o,c as l,a as i,b as a,d as t,e as p,f as s,r as c,o as u}from"./app-DtITwm2S.js";const d={};function r(k,n){const e=c("RouteLink");return u(),l("div",null,[n[5]||(n[5]=i(`<h1 id="_8-2-测试键值对是否存在及删除元素" tabindex="-1"><a class="header-anchor" href="#_8-2-测试键值对是否存在及删除元素"><span>8.2 测试键值对是否存在及删除元素</span></a></h1><p>测试 <code>map1</code> 中是否存在 <code>key1</code>：</p><p>在例子 8.1 中，我们已经见过可以使用 <code>val1 = map1[key1]</code> 的方法获取 <code>key1</code> 对应的值 <code>val1</code>。如果 <code>map</code> 中不存在 <code>key1</code>，<code>val1</code> 就是一个值类型的空值。</p><p>这就会给我们带来困惑了：现在我们没法区分到底是 <code>key1</code> 不存在还是它对应的 <code>value</code> 就是空值。</p><p>为了解决这个问题，我们可以这么用：<code>val1, isPresent = map1[key1]</code></p><p><code>isPresent</code> 返回一个 <code>bool</code> 值：如果 <code>key1</code> 存在于 <code>map1</code>，<code>val1</code> 就是 <code>key1</code> 对应的 <code>value</code> 值，并且 <code>isPresent</code> 为 <code>true</code>；如果 <code>key1</code> 不存在，<code>val1</code> 就是一个空值，并且 <code>isPresent</code> 会返回 <code>false</code>。</p><p>如果你只是想判断某个 <code>key</code> 是否存在而不关心它对应的值到底是多少，你可以这么做：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> map1<span class="token punctuation">[</span>key1<span class="token punctuation">]</span> <span class="token comment">// 如果key1存在则ok == true，否则ok为false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者和 <code>if</code> 混合使用：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> map1<span class="token punctuation">[</span>key1<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 <code>map1</code> 中删除 <code>key1</code>：</p><p>直接 <code>delete(map1, key1)</code> 就可以。</p><p>如果 <code>key1</code> 不存在，该操作不会产生错误。</p><p>示例 8.4 <a href="examples/chapter_8/map_testelement.go">map_testelement.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> value <span class="token builtin">int</span></span>
<span class="line">	<span class="token keyword">var</span> isPresent <span class="token builtin">bool</span></span>
<span class="line"></span>
<span class="line">	map1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span></span>
<span class="line">	map1<span class="token punctuation">[</span><span class="token string">&quot;New Delhi&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">55</span></span>
<span class="line">	map1<span class="token punctuation">[</span><span class="token string">&quot;Beijing&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span></span>
<span class="line">	map1<span class="token punctuation">[</span><span class="token string">&quot;Washington&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span></span>
<span class="line">	value<span class="token punctuation">,</span> isPresent <span class="token operator">=</span> map1<span class="token punctuation">[</span><span class="token string">&quot;Beijing&quot;</span><span class="token punctuation">]</span></span>
<span class="line">	<span class="token keyword">if</span> isPresent <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The value of \\&quot;Beijing\\&quot; in map1 is: %d\\n&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;map1 does not contain Beijing&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	value<span class="token punctuation">,</span> isPresent <span class="token operator">=</span> map1<span class="token punctuation">[</span><span class="token string">&quot;Paris&quot;</span><span class="token punctuation">]</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Is \\&quot;Paris\\&quot; in map1 ?: %t\\n&quot;</span><span class="token punctuation">,</span> isPresent<span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Value is: %d\\n&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// delete an item:</span></span>
<span class="line">	<span class="token function">delete</span><span class="token punctuation">(</span>map1<span class="token punctuation">,</span> <span class="token string">&quot;Washington&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	value<span class="token punctuation">,</span> isPresent <span class="token operator">=</span> map1<span class="token punctuation">[</span><span class="token string">&quot;Washington&quot;</span><span class="token punctuation">]</span></span>
<span class="line">	<span class="token keyword">if</span> isPresent <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The value of \\&quot;Washington\\&quot; in map1 is: %d\\n&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;map1 does not contain Washington&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><pre><code>The value of &quot;Beijing&quot; in map1 is: 20
Is &quot;Paris&quot; in map1 ?: false
Value is: 0
map1 does not contain Washington
</code></pre><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,18)),a("ul",null,[a("li",null,[t(e,{to:"/chapter-2/directory.html"},{default:p(()=>n[0]||(n[0]=[s("目录")])),_:1})]),a("li",null,[n[2]||(n[2]=s("上一节：")),t(e,{to:"/chapter-2/08.1.html"},{default:p(()=>n[1]||(n[1]=[s("声明、初始化和 make")])),_:1})]),a("li",null,[n[4]||(n[4]=s("下一节：")),t(e,{to:"/chapter-2/08.3.html"},{default:p(()=>n[3]||(n[3]=[s("for-range 的配套用法")])),_:1})])])])}const v=o(d,[["render",r],["__file","08.2.html.vue"]]),b=JSON.parse('{"path":"/chapter-2/08.2.html","title":"8.2 测试键值对是否存在及删除元素","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"8.2 测试键值对是否存在及删除元素","slug":"_8-2-测试键值对是否存在及删除元素","link":"#_8-2-测试键值对是否存在及删除元素","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-2/08.2.md"}');export{v as comp,b as data};
