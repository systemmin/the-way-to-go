import{_ as o,c as l,b as s,f as a,d as e,e as p,a as i,r as c,o as u}from"./app-DtITwm2S.js";const r={};function d(k,n){const t=c("RouteLink");return u(),l("div",null,[n[8]||(n[8]=s("h1",{id:"_20-5-使用用户服务和探索其-api",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_20-5-使用用户服务和探索其-api"},[s("span",null,"20.5 使用用户服务和探索其 API")])],-1)),s("p",null,[n[1]||(n[1]=a("GAE 提供了几个基于 Google 基础设施的有用服务。正如")),e(t,{to:"/chapter-4/20.1.html"},{default:p(()=>n[0]||(n[0]=[a("第 20.1 节")])),_:1}),n[2]||(n[2]=a("中提到的：GAE 提供了一个 Users 服务，它可以让你的应用程序与 Google 用户账户集成。有了用户服务，您的用户可以使用他们已经拥有的谷歌账户来登录您的应用程序。用户服务使您可以轻松地对该应用程序的问候语进行个性化处理。"))]),n[9]||(n[9]=i(`<p>编辑 helloworld2.go 文件，用以下 Go 代码替换它：</p><p><u><a href="examples/chapter_20/helloapp/hello/helloworld2_version2.go">Listing 20.3 helloworld2_version2.go</a></u>:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> hello</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;appengine&quot;</span></span>
<span class="line">	<span class="token string">&quot;appengine/user&quot;</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">	<span class="token string">&quot;net/http&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">handler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	c <span class="token operator">:=</span> appengine<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span></span>
<span class="line">	u <span class="token operator">:=</span> user<span class="token punctuation">.</span><span class="token function">Current</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> u <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		url<span class="token punctuation">,</span> err <span class="token operator">:=</span> user<span class="token punctuation">.</span><span class="token function">LoginURL</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">			http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span></span>
<span class="line">			<span class="token keyword">return</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Location&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span></span>
<span class="line">		w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusFound<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">return</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Hello, %v!&quot;</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过在浏览器中重新加载页面来测试它。你的应用程序会给你一个链接，当你遵循这个链接时，会把你重定向到适合测试你的应用程序的本地版本的谷歌登录页面。你可以在这个页面中输入任何你喜欢的用户名，你的应用程序将看到一个基于该用户名的假的 <code>user.User</code> 值。当你的应用程序在 App Engine 上运行时，用户将被引导到 Google 账户的登录页面，然后在成功登录或创建账户后，会被重定向到你的应用程序。</p><p><u>用户API：</u></p><p>为了访问这个，我们需要导入一些专门针对 GAE 的 Go 包，即一般的 <code>appengine</code> 和 <code>appengine/user</code>。</p><p>在处理程序中，我们首先需要制作一个与当前请求r相关联的Context对象，这在一行中完成：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">c <span class="token operator">:=</span> appengine<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>appengine.NewContext()</code> 函数在这里返回一个名为 <code>c</code> 的 <code>appengine.Context</code> 值：这是 Go App Engine SDK 中许多函数用来与 App Engine 服务通信的值。然后我们从这个上下文中测试是否已经有一个用户在此时登录，方法是：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"> u <span class="token operator">:=</span> user<span class="token punctuation">.</span><span class="token function">Current</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果是这样的话，<code>user.Current</code> 会返回一个指向用户的 <code>user.User</code> 值的指针；否则会返回 <code>nil</code>。如果用户还没有登录，即 <code>u == nil</code> 时，通过调用用户的浏览器重定向到谷歌账户的登录界面。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">url<span class="token punctuation">,</span> err <span class="token operator">:=</span> user<span class="token punctuation">.</span><span class="token function">LoginURL</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第 2 个参数 <code>r.URL.String()</code> 是当前请求的 url，这样谷歌账户登录机制可以在成功登录后进行<em>重定向</em>：它将在用户登录或注册新账户后将其送回这里。登录界面的发送是通过设置一个 Location 数据头并返回一个 HTTP 状态代码 302“Found”来完成的。</p><p><code>LoginURL()</code> 函数返回一个 error 值作为其第二个参数。尽管这里不太可能发生错误，但检查它并在适当的时候向用户显示错误是很好的做法（在这种情况下，用 http.Error helper）：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当用户登录后，我们使用与用户账户相关的名字显示一条个性化的信息：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Hello, %v!&quot;</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在这种情况下，<code>fmt.Fprintf()</code> 函数调用 <code>*user.User</code> 的 <code>String()</code> 方法来获得字符串形式的用户名称。更多信息可以在这个参考资料中找到：http://code.google.com/appengine/docs/go/users/</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,19)),s("ul",null,[s("li",null,[e(t,{to:"/chapter-4/directory.html"},{default:p(()=>n[3]||(n[3]=[a("目录")])),_:1})]),s("li",null,[n[5]||(n[5]=a("上一节：")),e(t,{to:"/chapter-4/20.4.html"},{default:p(()=>n[4]||(n[4]=[a("建造你自己的 Hello world 应用")])),_:1})]),s("li",null,[n[7]||(n[7]=a("下一节：")),e(t,{to:"/chapter-4/20.6.html"},{default:p(()=>n[6]||(n[6]=[a("处理窗口")])),_:1})])])])}const m=o(r,[["render",d],["__file","20.5.html.vue"]]),g=JSON.parse('{"path":"/chapter-4/20.5.html","title":"20.5 使用用户服务和探索其 API","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"20.5 使用用户服务和探索其 API","slug":"_20-5-使用用户服务和探索其-api","link":"#_20-5-使用用户服务和探索其-api","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-4/20.5.md"}');export{m as comp,g as data};
