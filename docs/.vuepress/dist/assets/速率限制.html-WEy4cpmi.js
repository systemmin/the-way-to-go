import{_ as t,c as e,a as s,d as l,o as p,r as i}from"./app-DtITwm2S.js";const o={};function c(r,n){const a=i("CodeDesc");return p(),e("div",null,[n[0]||(n[0]=s('<h1 id="速率限制" tabindex="-1"><a class="header-anchor" href="#速率限制"><span><a href="https://platform.openai.com/docs/guides/rate-limits/rate-limits" target="_blank" rel="noopener noreferrer">速率限制</a></span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><h3 id="什么是速率限制" tabindex="-1"><a class="header-anchor" href="#什么是速率限制"><span>什么是速率限制？</span></a></h3><p>速率限制是 API 对用户或客户端在指定时间段内可以访问服务器的次数施加的限制。</p><h3 id="为什么我们有速率限制" tabindex="-1"><a class="header-anchor" href="#为什么我们有速率限制"><span>为什么我们有速率限制？</span></a></h3><p>速率限制是 API 的常见做法，它们的实施有几个不同的原因：</p><ul><li><strong>它们有助于防止滥用或误用 API</strong>。例如，恶意行为者可能会向 API 发送大量请求，以试图使其过载或导致服务中断。通过设置速率限制，OpenAI 可以防止此类活动。</li><li><strong>速率限制有助于确保每个人都能公平地访问 API</strong>。如果一个人或组织发出过多的请求，可能会使其他人的 API 陷入困境。通过限制单个用户可以发出的请求数量，OpenAI 确保大多数人有机会使用 API 而不会遇到速度下降的情况。</li><li>**速率限制可以帮助 OpenAI 管理其基础设施上的聚合负载。**如果对 API 的请求急剧增加，可能会对服务器造成负担并导致性能问题。通过设置速率限制，OpenAI 可以帮助为所有用户保持流畅和一致的体验。</li></ul><div class="hint-container warning"><p class="hint-container-title">提示</p><p>请完整阅读本文档，以更好地了解 OpenAI 的速率限制系统的工作原理。我们包括代码示例和可能的解决方案来处理常见问题。建议在填写<a href="https://docs.google.com/forms/d/e/1FAIpQLSc6gSL3zfHFlL6gNIyUcjkEv29jModHGxg5_XGyr-PrE2LaHw/viewform" target="_blank" rel="noopener noreferrer">速率限制增加申请表</a>之前遵循此指南，并在最后一部分中详细说明如何填写。</p></div><h3 id="我们的-api-有哪些速率限制" tabindex="-1"><a class="header-anchor" href="#我们的-api-有哪些速率限制"><span>我们的 API 有哪些速率限制</span></a></h3><p>我们根据使用的特定端点以及您拥有的帐户类型，在<a href="https://platform.openai.com/docs/guides/production-best-practices" target="_blank" rel="noopener noreferrer">组织级别</a>而非用户级别实施速率限制。速率限制以两种方式衡量：<strong>RPM</strong>（每分钟请求数）和<strong>TPM</strong>（每分钟标记数）。下表突出显示了我们 API 的默认速率限制，但在填写速率限制增加申请表后，可以根据您的用例增加这些限制。</p><p><strong>TPM</strong> （每分钟标记数）单位因型号而异：</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">1 TPM 等于</th></tr></thead><tbody><tr><td style="text-align:left;">davinci</td><td style="text-align:left;">每分钟 1 个标记</td></tr><tr><td style="text-align:left;">curie</td><td style="text-align:left;">每分钟 25 个标记</td></tr><tr><td style="text-align:left;">babbage</td><td style="text-align:left;">每分钟 100 个标记</td></tr><tr><td style="text-align:left;">ada</td><td style="text-align:left;">每分钟 200 个标记</td></tr></tbody></table><p>实际上，这意味着<code>ada</code>与模型相比，您每分钟可以向模型发送大约 200 倍的标记<code>davinci</code>。</p><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">文本和嵌入</th><th style="text-align:left;">CODEX</th><th style="text-align:left;">编辑</th><th style="text-align:left;">图像</th></tr></thead><tbody><tr><td style="text-align:left;">免费试用用户</td><td style="text-align:left;">•20 RPM •150,000 TPM</td><td style="text-align:left;">•20 RPM •40,000 TPM</td><td style="text-align:left;">•20 RPM •150,000 TPM</td><td style="text-align:left;">50 张图片/分钟</td></tr><tr><td style="text-align:left;">按需付费用户（前 48 小时）</td><td style="text-align:left;">•60 RPM •250,000 TPM*</td><td style="text-align:left;">•20 RPM •40,000 TPM</td><td style="text-align:left;">•20 RPM •150,000 TPM</td><td style="text-align:left;">50 张图片/分钟</td></tr><tr><td style="text-align:left;">按量付费用户（48小时后）</td><td style="text-align:left;">•3,000 RPM •250,000 TPM*</td><td style="text-align:left;">•20 RPM •40,000 TPM</td><td style="text-align:left;">•20 RPM •150,000 TPM</td><td style="text-align:left;">50 张图片/分钟</td></tr></tbody></table><p>重要的是要注意，根据首先发生的情况，任一选项都可能达到速率限制。例如，您可能会向 Codex 端点发送仅包含 100 个标记的 20 个请求，这将达到您的限制，即使您没有在这 20 个请求中发送 40k 个标记。</p><h3 id="速率限制如何工作" tabindex="-1"><a class="header-anchor" href="#速率限制如何工作"><span>速率限制如何工作？</span></a></h3><p>如果您的速率限制是每分钟 60 个请求和每分钟 15 万<code>davinci</code>个标记，您将受到限制，要么达到请求/分钟上限，要么用完标记——以先发生者为准。例如，如果您的最大请求数/分钟为 60，则您应该能够每秒发送 1 个请求。如果您每 800 毫秒发送 1 个请求，一旦达到速率限制，您只需让程序休眠 200 毫秒即可再发送一个请求，否则后续请求将失败。默认值为 3,000 个请求/分钟，客户可以有效地每 20 毫秒或每 .02 秒发送 1 个请求。</p><h3 id="如果我遇到速率限制错误会怎样" tabindex="-1"><a class="header-anchor" href="#如果我遇到速率限制错误会怎样"><span>如果我遇到速率限制错误会怎样</span></a></h3><p>速率限制错误如下所示：</p>',19)),l(a,{ctt:"已达到组织 `default-text-davinci-002` 中 `org-{id}` 每分钟请求的速率限制。限制：20.0000000/分钟。当前：24.000000/分钟。\n"}),n[1]||(n[1]=s(`<p>如果您达到速率限制，这意味着您在短时间内发出了太多请求，并且 API 将拒绝满足进一步的请求，直到经过指定的时间量。</p><h3 id="速率限制与max-tokens" tabindex="-1"><a class="header-anchor" href="#速率限制与max-tokens"><span>速率限制与<code>max_tokens</code></span></a></h3><p>我们提供的每个<a href="/start/%E6%A8%A1%E5%9E%8B">模型</a>都有有限数量的标记，可以在发出请求时作为输入传递。您不能增加模型接收的最大标记数。例如，如果您正在使用<code>text-ada-001</code>，则您可以向该模型发送的最大标记数是每个请求 2,048 个标记。</p><h2 id="错误缓解" tabindex="-1"><a class="header-anchor" href="#错误缓解"><span>错误缓解</span></a></h2><h3 id="我可以采取哪些措施来缓解这种情况" tabindex="-1"><a class="header-anchor" href="#我可以采取哪些措施来缓解这种情况"><span>我可以采取哪些措施来缓解这种情况</span></a></h3><p>OpenAI Cookbook 有一个<a href="https://github.com/openai/openai-cookbook/blob/main/examples/How_to_handle_rate_limits.ipynb" target="_blank" rel="noopener noreferrer">python 笔记本</a>，详细解释了如何避免速率限制错误。</p><p>在提供编程访问、批量处理功能和自动社交媒体发布时，您还应该谨慎行事 - 考虑只为受信任的客户启用这些功能。</p><p>为防止自动和大量滥用，请在指定时间范围内（每天、每周或每月）为单个用户设置使用限制。考虑对超出限制的用户实施硬上限或人工审查流程。</p><h3 id="使用指数退避重试" tabindex="-1"><a class="header-anchor" href="#使用指数退避重试"><span>使用指数退避重试</span></a></h3><p>避免速率限制错误的一种简单方法是使用随机指数退避自动重试请求。使用指数退避重试意味着在遇到速率限制错误时执行短暂的休眠，然后重试不成功的请求。如果请求仍然不成功，则增加睡眠时间并重复该过程。这一直持续到请求成功或达到最大重试次数为止。这种方法有很多好处：</p><ul><li>自动重试意味着您可以从速率限制错误中恢复而不会崩溃或丢失数据</li><li>指数退避意味着您可以快速尝试第一次重试，同时如果您的前几次重试失败，仍然可以从更长的延迟中获益</li><li>将随机抖动添加到延迟有助于重试所有同时命中。</li></ul><p>请注意，不成功的请求会影响您的每分钟限制，因此不断重新发送请求将不起作用。</p><p>下面是一些使用指数退避算法的 <strong>Python示例解决方案</strong>。</p><details class="hint-container details"><summary>示例 #1：使用 Tenacity 库</summary><p>Tenacity 是一个 Apache 2.0 许可的通用重试库，用 Python 编写，用于简化将重试行为添加到几乎所有内容的任务。要为您的请求添加指数退避，您可以使用<code>tenacity.retry</code>装饰器。下面的示例使用该<code>tenacity.wait_random_exponential</code>函数向请求添加随机指数退避。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> openai</span>
<span class="line"><span class="token keyword">from</span> tenacity <span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">    retry<span class="token punctuation">,</span></span>
<span class="line">    stop_after_attempt<span class="token punctuation">,</span></span>
<span class="line">    wait_random_exponential<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span>  <span class="token comment"># for exponential backoff</span></span>
<span class="line"> </span>
<span class="line"><span class="token decorator annotation punctuation">@retry</span><span class="token punctuation">(</span>wait<span class="token operator">=</span>wait_random_exponential<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stop<span class="token operator">=</span>stop_after_attempt<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">completion_with_backoff</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> openai<span class="token punctuation">.</span>Completion<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line"> </span>
<span class="line">completion_with_backoff<span class="token punctuation">(</span>model<span class="token operator">=</span><span class="token string">&quot;text-davinci-003&quot;</span><span class="token punctuation">,</span> prompt<span class="token operator">=</span><span class="token string">&quot;Once upon a time,&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，Tenacity 库是第三方工具，OpenAI 不保证其可靠性或安全性。</p></details><details class="hint-container details"><summary>示例 #2：使用退避库</summary><p>另一个为退避和重试提供函数装饰器的 python 库是<a href="https://pypi.org/project/backoff/" target="_blank" rel="noopener noreferrer">退避</a>：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> backoff </span>
<span class="line"><span class="token keyword">import</span> openai </span>
<span class="line"><span class="token decorator annotation punctuation">@backoff<span class="token punctuation">.</span>on_exception</span><span class="token punctuation">(</span>backoff<span class="token punctuation">.</span>expo<span class="token punctuation">,</span> openai<span class="token punctuation">.</span>error<span class="token punctuation">.</span>RateLimitError<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">completions_with_backoff</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> openai<span class="token punctuation">.</span>Completion<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line"> </span>
<span class="line">completions_with_backoff<span class="token punctuation">(</span>model<span class="token operator">=</span><span class="token string">&quot;text-davinci-003&quot;</span><span class="token punctuation">,</span> prompt<span class="token operator">=</span><span class="token string">&quot;Once upon a time,&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 Tenacity 一样，退避库是第三方工具，OpenAI 不保证其可靠性或安全性。</p></details><details class="hint-container details"><summary>示例 3：手动退避实现</summary><p>如果不想使用第三方库，可以按照以下示例实现自己的回退逻辑：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># imports</span></span>
<span class="line"><span class="token keyword">import</span> random</span>
<span class="line"><span class="token keyword">import</span> time</span>
<span class="line"> </span>
<span class="line"><span class="token keyword">import</span> openai</span>
<span class="line"> </span>
<span class="line"><span class="token comment"># define a retry decorator</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">retry_with_exponential_backoff</span><span class="token punctuation">(</span></span>
<span class="line">    func<span class="token punctuation">,</span></span>
<span class="line">    initial_delay<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    exponential_base<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    jitter<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">    max_retries<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">    errors<span class="token punctuation">:</span> <span class="token builtin">tuple</span> <span class="token operator">=</span> <span class="token punctuation">(</span>openai<span class="token punctuation">.</span>error<span class="token punctuation">.</span>RateLimitError<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;Retry a function with exponential backoff.&quot;&quot;&quot;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># Initialize variables</span></span>
<span class="line">        num_retries <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">        delay <span class="token operator">=</span> initial_delay</span>
<span class="line"> </span>
<span class="line">        <span class="token comment"># Loop until a successful response or max_retries is hit or an exception is raised</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line"> </span>
<span class="line">            <span class="token comment"># Retry on specific errors</span></span>
<span class="line">            <span class="token keyword">except</span> errors <span class="token keyword">as</span> e<span class="token punctuation">:</span></span>
<span class="line">                <span class="token comment"># Increment retries</span></span>
<span class="line">                num_retries <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"> </span>
<span class="line">                <span class="token comment"># Check if max retries has been reached</span></span>
<span class="line">                <span class="token keyword">if</span> num_retries <span class="token operator">&gt;</span> max_retries<span class="token punctuation">:</span></span>
<span class="line">                    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span></span>
<span class="line">                        <span class="token string-interpolation"><span class="token string">f&quot;Maximum number of retries (</span><span class="token interpolation"><span class="token punctuation">{</span>max_retries<span class="token punctuation">}</span></span><span class="token string">) exceeded.&quot;</span></span></span>
<span class="line">                    <span class="token punctuation">)</span></span>
<span class="line"> </span>
<span class="line">                <span class="token comment"># Increment the delay</span></span>
<span class="line">                delay <span class="token operator">*=</span> exponential_base <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> jitter <span class="token operator">*</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"> </span>
<span class="line">                <span class="token comment"># Sleep for the delay</span></span>
<span class="line">                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span></span>
<span class="line"> </span>
<span class="line">            <span class="token comment"># Raise exceptions for any errors not specified</span></span>
<span class="line">            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">raise</span> e</span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line">    </span>
<span class="line"><span class="token decorator annotation punctuation">@retry_with_exponential_backoff</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">completions_with_backoff</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> openai<span class="token punctuation">.</span>Completion<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，OpenAI 不保证此解决方案的安全性或效率，但它可以作为您自己的解决方案的良好起点。</p></details><h3 id="批处理请求" tabindex="-1"><a class="header-anchor" href="#批处理请求"><span>批处理请求</span></a></h3><p>OpenAI API 对每分钟的请求数和每分钟的标记数有单独的限制。</p><p>如果您达到每分钟请求的限制，但每分钟有可用的标记容量，您可以通过将多个任务分批处理到每个请求中来提高吞吐量。这将使您每分钟可以处理更多的标记，尤其是对于我们较小的模型。</p><p>发送一批提示的工作方式与普通 API 调用完全相同，只是您将字符串列表而不是单个字符串传递给提示参数。</p><details class="hint-container details"><summary>没有批处理的例子</summary><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> openai</span>
<span class="line"> </span>
<span class="line">num_stories <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">prompt <span class="token operator">=</span> <span class="token string">&quot;Once upon a time,&quot;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment"># serial example, with one story completion per request</span></span>
<span class="line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_stories<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    response <span class="token operator">=</span> openai<span class="token punctuation">.</span>Completion<span class="token punctuation">.</span>create<span class="token punctuation">(</span></span>
<span class="line">        model<span class="token operator">=</span><span class="token string">&quot;curie&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        prompt<span class="token operator">=</span>prompt<span class="token punctuation">,</span></span>
<span class="line">        max_tokens<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># print story</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>prompt <span class="token operator">+</span> response<span class="token punctuation">.</span>choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>批处理示例</summary><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> openai  <span class="token comment"># for making OpenAI API requests</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line">num_stories <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">prompts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Once upon a time,&quot;</span><span class="token punctuation">]</span> <span class="token operator">*</span> num_stories</span>
<span class="line"> </span>
<span class="line"><span class="token comment"># batched example, with 10 story completions per request</span></span>
<span class="line">response <span class="token operator">=</span> openai<span class="token punctuation">.</span>Completion<span class="token punctuation">.</span>create<span class="token punctuation">(</span></span>
<span class="line">    model<span class="token operator">=</span><span class="token string">&quot;curie&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    prompt<span class="token operator">=</span>prompts<span class="token punctuation">,</span></span>
<span class="line">    max_tokens<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment"># match completions to prompts by index</span></span>
<span class="line">stories <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>prompts<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> choice <span class="token keyword">in</span> response<span class="token punctuation">.</span>choices<span class="token punctuation">:</span></span>
<span class="line">    stories<span class="token punctuation">[</span>choice<span class="token punctuation">.</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> prompts<span class="token punctuation">[</span>choice<span class="token punctuation">.</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> choice<span class="token punctuation">.</span>text</span>
<span class="line"> </span>
<span class="line"><span class="token comment"># print stories</span></span>
<span class="line"><span class="token keyword">for</span> story <span class="token keyword">in</span> stories<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>story<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>警告：响应对象可能不会按照提示的顺序返回完成，因此请始终记住使用索引字段将响应匹配回提示。</p></div><h2 id="速率限制增加" tabindex="-1"><a class="header-anchor" href="#速率限制增加"><span>速率限制增加</span></a></h2><h3 id="我什么时候应该考虑申请提高利率限制" tabindex="-1"><a class="header-anchor" href="#我什么时候应该考虑申请提高利率限制"><span>我什么时候应该考虑申请提高利率限制？</span></a></h3><p>我们的默认速率限制帮助我们最大限度地提高稳定性并防止滥用我们的 API。我们增加限制以启用高流量应用程序，因此申请提高速率限制的最佳时间是当您认为您拥有必要的流量数据来支持提高速率限制的有力案例时。没有支持数据的大型速率限制增加请求不太可能获得批准。如果您正在为产品发布做准备，请通过10天以上的阶段性发布获取相关数据。</p><p>请记住，速率限制的增加有时可能需要 7-10 天，因此如果有数据支持您将达到您当前的增长数字，那么尝试提前计划并尽早提交是有意义的。</p><h3 id="我的速率限制提高请求会被拒绝吗" tabindex="-1"><a class="header-anchor" href="#我的速率限制提高请求会被拒绝吗"><span>我的速率限制提高请求会被拒绝吗？</span></a></h3><p>速率限制增加请求通常被拒绝，因为它缺乏证明增加的合理性所需的数据。我们在下面提供了数字示例，展示了如何最好地支持提高速率限制的请求，并尽力批准符合我们的安全政策并显示支持数据的所有请求。我们致力于使开发人员能够扩展我们的 API 并取得成功。</p><h3 id="我已经为我的文本-代码-api-实施了指数退避-但我仍然遇到此错误。如何提高速率限制" tabindex="-1"><a class="header-anchor" href="#我已经为我的文本-代码-api-实施了指数退避-但我仍然遇到此错误。如何提高速率限制"><span>我已经为我的文本/代码 API 实施了指数退避，但我仍然遇到此错误。如何提高速率限制？</span></a></h3><p>目前，我们不支持增加我们的<strong>免费测试端点，例如编辑</strong>端点。我们也<strong>不会提高 ChatGPT</strong>速率限制，但您可以加入<a href="https://docs.google.com/forms/d/e/1FAIpQLSfCVqahRmA5OxQXbRlnSm531fTd8QBdUCwZag7mI9mrlOOIaw/viewform" target="_blank" rel="noopener noreferrer">ChatGPT Professional 访问</a>的候补名单。</p><p>我们理解有限的速率限制可能导致的挫败感，我们很乐意为每个人提高默认值。但是，由于共享容量限制，我们只能批准通过我们的<a href="https://docs.google.com/forms/d/e/1FAIpQLSc6gSL3zfHFlL6gNIyUcjkEv29jModHGxg5_XGyr-PrE2LaHw/viewform" target="_blank" rel="noopener noreferrer">速率限制增加请求表</a>证明有需求的付费客户增加速率限制。为了帮助我们正确评估您的需求，我们要求您在表格的“分享需求证据”部分提供您当前使用情况的统计数据或基于历史用户活动的预测。如果此信息不可用，我们建议采用分阶段发布方法。首先按照您当前的速率限制向部分用户发布服务，收集 10 个工作日的使用数据，然后根据该数据提交正式的速率限制提高请求，以供我们审核和批准。</p><p>我们将审核您的请求，如果获得批准，我们将在 7-10 个工作日内通知您批准情况。</p><p>以下是您可以如何填写此表格的一些示例：</p><details class="hint-container details"><summary>DALL-E API 示例</summary><table><thead><tr><th style="text-align:left;">模型</th><th style="text-align:left;">预估代币/分钟</th><th style="text-align:left;">估计请求/分钟</th><th style="text-align:left;"># 用户</th><th style="text-align:left;">需要的证据</th><th style="text-align:left;">1 小时最大吞吐量成本</th></tr></thead><tbody><tr><td style="text-align:left;">DALL-E API</td><td style="text-align:left;">不适用</td><td style="text-align:left;">50</td><td style="text-align:left;">1000</td><td style="text-align:left;">我们的应用程序目前正在生产中，根据我们过去的流量，我们每分钟发出大约 10 个请求。</td><td style="text-align:left;">$60</td></tr><tr><td style="text-align:left;">DALL-E API</td><td style="text-align:left;">不适用</td><td style="text-align:left;">150</td><td style="text-align:left;">10,000</td><td style="text-align:left;">我们的应用程序在 App Store 中越来越受欢迎，我们开始达到速率限制。我们能否获得默认限制 50 img/min 的三倍？如果我们需要更多，我们将提交新表格。谢谢！</td><td style="text-align:left;">$180</td></tr></tbody></table></details><details class="hint-container details"><summary>语言模型示例</summary><table><thead><tr><th style="text-align:left;">模型</th><th style="text-align:left;">预估代币/分钟</th><th style="text-align:left;">估计请求/分钟</th><th style="text-align:left;"># 用户</th><th style="text-align:left;">需要的证据</th><th style="text-align:left;">1 小时最大吞吐量成本</th></tr></thead><tbody><tr><td style="text-align:left;">text-davinci-003</td><td style="text-align:left;">325,000</td><td style="text-align:left;">4,0000</td><td style="text-align:left;">50</td><td style="text-align:left;">我们正在向一组初始的 alpha 测试人员发布，并且需要更高的限制来适应他们的初始使用。我们在这里有一个指向我们的谷歌驱动器的链接，它显示了分析和 api 使用情况。</td><td style="text-align:left;">$390</td></tr><tr><td style="text-align:left;">text-davinci-002</td><td style="text-align:left;">750,000</td><td style="text-align:left;">10,000</td><td style="text-align:left;">10,000</td><td style="text-align:left;">我们的应用程序受到了很多关注；我们的候补名单上有 50,000 人。我们希望每天向 1,000 人的群组推出，直到我们达到 50,000 名用户。请查看过去 30 天我们当前标记/分钟流量的链接。这是针对 500 个用户的，根据他们的使用情况，我们认为 750,000 个标记/分钟和 10,000 个请求/分钟将是一个很好的起点。</td><td style="text-align:left;">$900</td></tr></tbody></table></details><details class="hint-container details"><summary>代码模型示例</summary><table><thead><tr><th style="text-align:left;">模型</th><th style="text-align:left;">预估代币/分钟</th><th style="text-align:left;">估计请求/分钟</th><th style="text-align:left;"># 用户</th><th style="text-align:left;">需要的证据</th><th style="text-align:left;">1 小时最大吞吐量成本</th></tr></thead><tbody><tr><td style="text-align:left;">code-davinci-002</td><td style="text-align:left;">150,000</td><td style="text-align:left;">1,000</td><td style="text-align:left;">15</td><td style="text-align:left;">我们是一群研究论文的研究人员。我们估计我们需要对 code-davinci-002 进行更高的速率限制，以便在月底前完成我们的研究。这些估计基于以下计算[...]</td><td style="text-align:left;">Codex 模型目前处于免费测试阶段，因此我们可能无法为这些模型提供立即增加。</td></tr></tbody></table></details><p>请注意，这些示例只是一般用例场景，实际使用率会因具体实施和使用情况而异。</p>`,38))])}const u=t(o,[["render",c],["__file","速率限制.html.vue"]]),k=JSON.parse('{"path":"/guides/%E9%80%9F%E7%8E%87%E9%99%90%E5%88%B6.html","title":"速率限制","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"速率限制","slug":"速率限制","link":"#速率限制","children":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[{"level":3,"title":"什么是速率限制？","slug":"什么是速率限制","link":"#什么是速率限制","children":[]},{"level":3,"title":"为什么我们有速率限制？","slug":"为什么我们有速率限制","link":"#为什么我们有速率限制","children":[]},{"level":3,"title":"我们的 API 有哪些速率限制","slug":"我们的-api-有哪些速率限制","link":"#我们的-api-有哪些速率限制","children":[]},{"level":3,"title":"速率限制如何工作？","slug":"速率限制如何工作","link":"#速率限制如何工作","children":[]},{"level":3,"title":"如果我遇到速率限制错误会怎样","slug":"如果我遇到速率限制错误会怎样","link":"#如果我遇到速率限制错误会怎样","children":[]},{"level":3,"title":"速率限制与max_tokens","slug":"速率限制与max-tokens","link":"#速率限制与max-tokens","children":[]}]},{"level":2,"title":"错误缓解","slug":"错误缓解","link":"#错误缓解","children":[{"level":3,"title":"我可以采取哪些措施来缓解这种情况","slug":"我可以采取哪些措施来缓解这种情况","link":"#我可以采取哪些措施来缓解这种情况","children":[]},{"level":3,"title":"使用指数退避重试","slug":"使用指数退避重试","link":"#使用指数退避重试","children":[]},{"level":3,"title":"批处理请求","slug":"批处理请求","link":"#批处理请求","children":[]}]},{"level":2,"title":"速率限制增加","slug":"速率限制增加","link":"#速率限制增加","children":[{"level":3,"title":"我什么时候应该考虑申请提高利率限制？","slug":"我什么时候应该考虑申请提高利率限制","link":"#我什么时候应该考虑申请提高利率限制","children":[]},{"level":3,"title":"我的速率限制提高请求会被拒绝吗？","slug":"我的速率限制提高请求会被拒绝吗","link":"#我的速率限制提高请求会被拒绝吗","children":[]},{"level":3,"title":"我已经为我的文本/代码 API 实施了指数退避，但我仍然遇到此错误。如何提高速率限制？","slug":"我已经为我的文本-代码-api-实施了指数退避-但我仍然遇到此错误。如何提高速率限制","link":"#我已经为我的文本-代码-api-实施了指数退避-但我仍然遇到此错误。如何提高速率限制","children":[]}]}]}],"git":{},"filePathRelative":"guides/速率限制.md"}');export{u as comp,k as data};
