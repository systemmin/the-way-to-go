import{_ as p,c as r,b as t,f as s,d as e,e as l,a as d,r as i,o as a}from"./app-DtITwm2S.js";const u={};function m(g,o){const n=i("RouteLink");return a(),r("div",null,[o[38]||(o[38]=t("h1",{id:"_4-6-字符串",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_4-6-字符串"},[t("span",null,"4.6 字符串")])],-1)),t("p",null,[o[1]||(o[1]=s("字符串是 UTF-8 字符的一个序列（当字符为 ASCII 码时则占用 1 个字节，其它字符根据需要占用 2-4 个字节）。UTF-8 是被广泛使用的编码格式，是文本文件的标准编码，其它包括 XML 和 JSON 在内，也都使用该编码。由于该编码对占用字节长度的不定性，Go 中的字符串里面的字符也可能根据需要占用 1 至 4 个字节（示例见")),e(n,{to:"/chapter-2/04.6.html"},{default:l(()=>o[0]||(o[0]=[s("第 4.6 节")])),_:1}),o[2]||(o[2]=s("），这与其它语言如 C++、Java 或者 Python 不同（Java 始终使用 2 个字节）。Go 这样做的好处是不仅减少了内存和硬盘空间占用，同时也不用像其它语言那样需要对使用 UTF-8 字符集的文本进行编码和解码。"))]),o[39]||(o[39]=d(`<p>字符串是一种值类型，且值不可变，即创建某个文本后你无法再次修改这个文本的内容；更深入地讲，字符串是字节的定长数组。</p><p>Go 支持以下 2 种形式的字面值：</p><ul><li><p>解释字符串：</p><p>该类字符串使用双引号括起来，其中的相关的转义字符将被替换，这些转义字符包括：</p><ul><li><code>\\n</code>：换行符</li><li><code>\\r</code>：回车符</li><li><code>\\t</code>：tab 键</li><li><code>\\u</code> 或 <code>\\U</code>：Unicode 字符</li><li><code>\\\\</code>：反斜杠自身</li></ul></li><li><p>非解释字符串：</p><p>该类字符串使用反引号括起来，支持换行，例如：</p><pre><code>  \`This is a raw string \\n\` 中的 \`\\n\\\` 会被原样输出。
</code></pre></li></ul><p>和 C/C++不一样，Go 中的字符串是根据长度限定，而非特殊字符 <code>\\0</code>。</p><p><code>string</code> 类型的零值为长度为零的字符串，即空字符串 <code>&quot;&quot;</code>。</p><p>一般的比较运算符（<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、<code>&gt;</code>）通过在内存中按字节比较来实现字符串的对比。你可以通过函数 <code>len()</code> 来获取字符串所占的字节长度，例如：<code>len(str)</code>。</p><p>字符串的内容（纯字节）可以通过标准索引法来获取，在中括号 <code>[]</code> 内写入索引，索引从 0 开始计数：</p><ul><li>字符串 <code>str</code> 的第 1 个字节：<code>str[0]</code></li><li>第 <code>i</code> 个字节：<code>str[i - 1]</code></li><li>最后 1 个字节：<code>str[len(str)-1]</code></li></ul><p>需要注意的是，这种转换方案只对纯 ASCII 码的字符串有效。</p><p><strong>注意事项</strong> 获取字符串中某个字节的地址的行为是非法的，例如：<code>&amp;str[i]</code>。</p><p><strong>字符串拼接符 <code>+</code></strong></p><p>两个字符串 <code>s1</code> 和 <code>s2</code> 可以通过 <code>s := s1 + s2</code> 拼接在一起。</p><p><code>s2</code> 追加在 <code>s1</code> 尾部并生成一个新的字符串 <code>s</code>。</p><p>你可以通过以下方式来对代码中多行的字符串进行拼接：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">str <span class="token operator">:=</span> <span class="token string">&quot;Beginning of the string &quot;</span> <span class="token operator">+</span></span>
<span class="line">	<span class="token string">&quot;second part of the string&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>由于编译器行尾自动补全分号的缘故，加号 <code>+</code> 必须放在第一行。</p><p>拼接的简写形式 <code>+=</code> 也可以用于字符串：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">s <span class="token operator">:=</span> <span class="token string">&quot;hel&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;lo,&quot;</span></span>
<span class="line">s <span class="token operator">+=</span> <span class="token string">&quot;world!&quot;</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">//输出 “hello, world!”</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18)),t("p",null,[o[5]||(o[5]=s("在循环中使用加号 ")),o[6]||(o[6]=t("code",null,"+",-1)),o[7]||(o[7]=s(" 拼接字符串并不是最高效的做法，更好的办法是使用函数 ")),o[8]||(o[8]=t("code",null,"strings.Join()",-1)),o[9]||(o[9]=s("（")),e(n,{to:"/chapter-2/04.7.html"},{default:l(()=>o[3]||(o[3]=[s("第 4.7.10 节")])),_:1}),o[10]||(o[10]=s("），有没有更好的办法了？有！使用字节缓冲（")),o[11]||(o[11]=t("code",null,"bytes.Buffer",-1)),o[12]||(o[12]=s("）拼接更加给力（")),e(n,{to:"/chapter-2/07.2.html"},{default:l(()=>o[4]||(o[4]=[s("第 7.2.6 节")])),_:1}),o[13]||(o[13]=s("）！"))]),t("p",null,[o[19]||(o[19]=s("在")),e(n,{to:"/chapter-2/07.0.html"},{default:l(()=>o[14]||(o[14]=[s("第 7 章")])),_:1}),o[20]||(o[20]=s("，我们会讲到通过将字符串看作是字节 (")),o[21]||(o[21]=t("code",null,"byte",-1)),o[22]||(o[22]=s(") 的切片 (slice) 来实现对其标准索引法的操作。会在")),e(n,{to:"/chapter-2/05.4.html"},{default:l(()=>o[15]||(o[15]=[s("第 5.4.1 节")])),_:1}),o[23]||(o[23]=s(" 中讲到的 ")),o[24]||(o[24]=t("code",null,"for",-1)),o[25]||(o[25]=s(" 循环只会根据索引返回字符串中的纯字节，而在")),e(n,{to:"/chapter-2/05.4.html"},{default:l(()=>o[16]||(o[16]=[s("第 5.4.4 节")])),_:1}),o[26]||(o[26]=s("（以及")),e(n,{to:"/chapter-2/07.6.html"},{default:l(()=>o[17]||(o[17]=[s("第 7.6.1 节")])),_:1}),o[27]||(o[27]=s(" 的示例）将会展示如何使用 for-range 循环来实现对 Unicode 字符串的迭代操作。在下一节，我们会学习到许多有关字符串操作的函数和方法，同时 ")),o[28]||(o[28]=t("code",null,"fmt",-1)),o[29]||(o[29]=s(" 包中的 ")),o[30]||(o[30]=t("code",null,"fmt.Sprint(x)",-1)),o[31]||(o[31]=s(" 也可以格式化生成并返回你所需要的字符串（")),e(n,{to:"/chapter-2/04.3.html"},{default:l(()=>o[18]||(o[18]=[s("第 4.4.3 节")])),_:1}),o[32]||(o[32]=s("）。"))]),o[40]||(o[40]=d('<p><strong>练习 4.6</strong> <a href="exercises/chapter_4/count_characters.go">count_characters.go</a></p><p>创建一个用于统计字节和字符 (rune) 的程序，并对字符串 <code>asSASA ddd dsjkdsjs dk</code> 进行分析，然后再分析 <code>asSASA ddd dsjkdsjsこん dk</code>，最后解释两者不同的原因（提示：使用 <code>unicode/utf8</code> 包）。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>',3)),t("ul",null,[t("li",null,[e(n,{to:"/chapter-2/directory.html"},{default:l(()=>o[33]||(o[33]=[s("目录")])),_:1})]),t("li",null,[o[35]||(o[35]=s("上一节：")),e(n,{to:"/chapter-2/04.5.html"},{default:l(()=>o[34]||(o[34]=[s("基本类型和运算符")])),_:1})]),t("li",null,[o[37]||(o[37]=s("下一节：")),e(n,{to:"/chapter-2/04.7.html"},{default:l(()=>o[36]||(o[36]=[s("strings 和 strconv 包")])),_:1})])])])}const v=p(u,[["render",m],["__file","04.6.html.vue"]]),k=JSON.parse('{"path":"/chapter-2/04.6.html","title":"4.6 字符串","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"4.6 字符串","slug":"_4-6-字符串","link":"#_4-6-字符串","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-2/04.6.md"}');export{v as comp,k as data};
