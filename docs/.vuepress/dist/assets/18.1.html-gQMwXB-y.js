import{_ as o,c as i,a as p,b as a,f as n,d as t,e as l,r,o as c}from"./app-DtITwm2S.js";const d={};function u(m,s){const e=r("RouteLink");return c(),i("div",null,[s[15]||(s[15]=p(`<h1 id="_18-1-字符串" tabindex="-1"><a class="header-anchor" href="#_18-1-字符串"><span>18.1 字符串</span></a></h1><p>（1）如何修改字符串中的一个字符：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">str<span class="token operator">:=</span><span class="token string">&quot;hello&quot;</span></span>
<span class="line">c<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></span>
<span class="line">c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;c&#39;</span></span>
<span class="line">s2<span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">// s2 == &quot;cello&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）如何获取字符串的子串：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">substr <span class="token operator">:=</span> str<span class="token punctuation">[</span>n<span class="token punctuation">:</span>m<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（3）如何使用 <code>for</code> 或者 <code>for-range</code> 遍历一个字符串：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// gives only the bytes:</span></span>
<span class="line"><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">… <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// gives the Unicode characters:</span></span>
<span class="line"><span class="token keyword">for</span> ix<span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> str <span class="token punctuation">{</span></span>
<span class="line">…</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）如何获取一个字符串的字节数：<code>len(str)</code></p><p>如何获取一个字符串的字符数：</p><p>（最快速）使用 <code>utf8.RuneCountInString(str)</code></p><p>或使用 <code>len([]rune(str))</code></p><p>（5）如何连接字符串：</p>`,12)),a("p",null,[s[1]||(s[1]=n("（最快速）使用 ")),s[2]||(s[2]=a("code",null,"bytes.Buffer",-1)),s[3]||(s[3]=n("（参考")),t(e,{to:"/chapter-4/07.2.html"},{default:l(()=>s[0]||(s[0]=[n("章节 7.2")])),_:1}),s[4]||(s[4]=n("）"))]),a("p",null,[s[6]||(s[6]=n("或使用 ")),s[7]||(s[7]=a("code",null,"Strings.Join()",-1)),s[8]||(s[8]=n("（参考")),t(e,{to:"/chapter-4/04.7.html"},{default:l(()=>s[5]||(s[5]=[n("章节 4.7")])),_:1}),s[9]||(s[9]=n("）"))]),s[16]||(s[16]=p(`<p>或使用 <code>+=</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">str1 <span class="token operator">:=</span> <span class="token string">&quot;Hello &quot;</span> </span>
<span class="line">str2 <span class="token operator">:=</span> <span class="token string">&quot;World!&quot;</span></span>
<span class="line">str1 <span class="token operator">+=</span> str2 <span class="token comment">//str1 == &quot;Hello World!&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（6）如何解析命令行参数：使用 <code>os</code> 或者 <code>flag</code> 包（参考<a href="examples/chapter_12/fileinput.go">例 12.4</a>）</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,4)),a("ul",null,[a("li",null,[t(e,{to:"/chapter-4/directory.html"},{default:l(()=>s[10]||(s[10]=[n("目录")])),_:1})]),a("li",null,[s[12]||(s[12]=n("上一节：")),t(e,{to:"/chapter-4/18.0.html"},{default:l(()=>s[11]||(s[11]=[n("出于性能考虑的实用代码片段")])),_:1})]),a("li",null,[s[14]||(s[14]=n("下一节：")),t(e,{to:"/chapter-4/18.2.html"},{default:l(()=>s[13]||(s[13]=[n("数组和切片")])),_:1})])])])}const v=o(d,[["render",u],["__file","18.1.html.vue"]]),g=JSON.parse('{"path":"/chapter-4/18.1.html","title":"18.1 字符串","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"18.1 字符串","slug":"_18-1-字符串","link":"#_18-1-字符串","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-4/18.1.md"}');export{v as comp,g as data};
