import{_ as r,c as i,b as e,f as t,d as n,e as d,a as s,r as u,o as a}from"./app-DtITwm2S.js";const p={};function f(m,l){const o=u("RouteLink");return a(),i("div",null,[l[11]||(l[11]=e("h1",{id:"_5-0-控制结构",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_5-0-控制结构"},[e("span",null,"5.0 控制结构")])],-1)),l[12]||(l[12]=e("p",null,[t("到目前为止，我们看到的 Go 程序都是从 "),e("code",null,"main()"),t(" 函数开始执行，然后按顺序执行该函数体中的代码。但我们经常会需要只有在满足一些特定情况时才执行某些代码，也就是说在代码里进行条件判断。针对这种需求，Go 提供了下面这些条件结构和分支结构：")],-1)),e("ul",null,[l[4]||(l[4]=e("li",null,[e("code",null,"if"),t("-"),e("code",null,"else"),t(" 结构")],-1)),l[5]||(l[5]=e("li",null,[e("code",null,"switch"),t(" 结构")],-1)),e("li",null,[l[1]||(l[1]=e("code",null,"select",-1)),l[2]||(l[2]=t(" 结构，用于 channel 的选择（")),n(o,{to:"/chapter-2/14.4.html"},{default:d(()=>l[0]||(l[0]=[t("第 14.4 节")])),_:1}),l[3]||(l[3]=t("）"))])]),l[13]||(l[13]=s('<p>可以使用迭代或循环结构来重复执行一次或多次某段代码（任务）：</p><ul><li><code>for</code> (<code>range</code>) 结构</li></ul><p>一些如 <code>break</code> 和 <code>continue</code> 这样的关键字可以用于中途改变循环的状态。</p><p>此外，你还可以使用 <code>return</code> 来结束某个函数的执行，或使用 <code>goto</code> 和标签来调整程序的执行位置。</p><p>Go 完全省略了 <code>if</code>、<code>switch</code> 和 <code>for</code> 结构中条件语句两侧的括号，相比 Java、C++ 和 C# 中减少了很多视觉混乱的因素，同时也使你的代码更加简洁。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>',6)),e("ul",null,[e("li",null,[n(o,{to:"/chapter-2/directory.html"},{default:d(()=>l[6]||(l[6]=[t("目录")])),_:1})]),e("li",null,[l[8]||(l[8]=t("上一章：")),n(o,{to:"/chapter-2/04.9.html"},{default:d(()=>l[7]||(l[7]=[t("指针")])),_:1})]),e("li",null,[l[10]||(l[10]=t("下一节：")),n(o,{to:"/chapter-2/05.1.html"},{default:d(()=>l[9]||(l[9]=[t("if-else 结构")])),_:1})])])])}const k=r(p,[["render",f],["__file","05.0.html.vue"]]),v=JSON.parse('{"path":"/chapter-2/05.0.html","title":"5.0 控制结构","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"5.0 控制结构","slug":"_5-0-控制结构","link":"#_5-0-控制结构","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-2/05.0.md"}');export{k as comp,v as data};
