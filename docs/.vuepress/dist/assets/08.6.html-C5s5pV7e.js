import{_ as o,c as l,a as c,b as a,d as p,e,f as s,r as i,o as u}from"./app-DtITwm2S.js";const r={};function k(d,n){const t=i("RouteLink");return u(),l("div",null,[n[5]||(n[5]=c(`<h1 id="_8-6-将-map-的键值对调" tabindex="-1"><a class="header-anchor" href="#_8-6-将-map-的键值对调"><span>8.6 将 map 的键值对调</span></a></h1><p>这里对调是指调换 key 和 value。如果 <code>map</code> 的值类型可以作为 key 且所有的 value 是唯一的，那么通过下面的方法可以简单的做到键值对调。</p><p>示例 8.7 <a href="examples/chapter_8/invert_map.go">invert_map.go</a>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> <span class="token punctuation">(</span></span>
<span class="line">	barVal <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">&quot;alpha&quot;</span><span class="token punctuation">:</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token string">&quot;bravo&quot;</span><span class="token punctuation">:</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token string">&quot;charlie&quot;</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span></span>
<span class="line">							<span class="token string">&quot;delta&quot;</span><span class="token punctuation">:</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token string">&quot;echo&quot;</span><span class="token punctuation">:</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token string">&quot;foxtrot&quot;</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span></span>
<span class="line">							<span class="token string">&quot;golf&quot;</span><span class="token punctuation">:</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token string">&quot;hotel&quot;</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">&quot;indio&quot;</span><span class="token punctuation">:</span> <span class="token number">87</span><span class="token punctuation">,</span></span>
<span class="line">							<span class="token string">&quot;juliet&quot;</span><span class="token punctuation">:</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token string">&quot;kili&quot;</span><span class="token punctuation">:</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token string">&quot;lima&quot;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	invMap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>barVal<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> barVal <span class="token punctuation">{</span></span>
<span class="line">		invMap<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> k</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;inverted:&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> invMap <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Key: %v, Value: %v / &quot;</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><pre><code>inverted:
Key: 34, Value: golf / Key: 23, Value: charlie / Key: 16, Value: hotel / Key: 87, Value: delta / Key: 98, Value: lima / Key: 12, Value: foxtrot / Key: 43, Value: kili / Key: 56, Value: bravo / Key: 65, Value: juliet /
</code></pre><p>如果原始 value 值不唯一那这么做肯定会出问题；这种情况下不会报错，但是当遇到不唯一的 key 时应当直接停止对调，且此时对调后的 <code>map</code> 很可能没有包含原 <code>map</code> 的所有键值对！一种解决方法就是仔细检查唯一性并且使用多值 <code>map</code>，比如使用 <code>map[int][]string</code> 类型。</p><p><strong>练习 8.2</strong> <a href="exercises/chapter_8/map_drinks.go">map_drinks.go</a></p><p>构造一个将英文饮料名映射为法语（或者任意你的母语）的集合；先打印所有的饮料，然后打印原名和翻译后的名字。接下来按照英文名排序后再打印出来。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,10)),a("ul",null,[a("li",null,[p(t,{to:"/chapter-2/directory.html"},{default:e(()=>n[0]||(n[0]=[s("目录")])),_:1})]),a("li",null,[n[2]||(n[2]=s("上一节：")),p(t,{to:"/chapter-2/08.5.html"},{default:e(()=>n[1]||(n[1]=[s("map 的排序")])),_:1})]),a("li",null,[n[4]||(n[4]=s("下一章：")),p(t,{to:"/chapter-2/09.0.html"},{default:e(()=>n[3]||(n[3]=[s("包 (package)")])),_:1})])])])}const v=o(r,[["render",k],["__file","08.6.html.vue"]]),b=JSON.parse('{"path":"/chapter-2/08.6.html","title":"8.6 将 map 的键值对调","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"8.6 将 map 的键值对调","slug":"_8-6-将-map-的键值对调","link":"#_8-6-将-map-的键值对调","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-2/08.6.md"}');export{v as comp,b as data};
