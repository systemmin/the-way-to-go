import{_ as i,c as o,a as t,b as s,f as a,d as p,e as l,r as c,o as u}from"./app-DtITwm2S.js";const d={};function r(k,n){const e=c("RouteLink");return u(),o("div",null,[n[45]||(n[45]=t(`<h1 id="_5-1-if-else-结构" tabindex="-1"><a class="header-anchor" href="#_5-1-if-else-结构"><span>5.1 if-else 结构</span></a></h1><p>if 是用于测试某个条件（布尔型或逻辑型）的语句，如果该条件成立，则会执行 if 后由大括号括起来的代码块，否则就忽略该代码块继续执行后续的代码。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> condition <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// do something	</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果存在第二个分支，则可以在上面代码的基础上添加 <code>else</code> 关键字以及另一代码块，这个代码块中的代码只有在条件不满足时才会执行。<code>if</code> 和 <code>else</code> 后的两个代码块是相互独立的分支，只可能执行其中一个。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> condition <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// do something	</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// do something	</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果存在第三个分支，则可以使用下面这种三个独立分支的形式：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> condition1 <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// do something	</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> condition2 <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// do something else	</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// catch-all or default</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>else-if 分支的数量是没有限制的，但是为了代码的可读性，还是不要在 <code>if</code> 后面加入太多的 else-if 结构。如果你必须使用这种形式，则把尽可能先满足的条件放在前面。</p><p>即使当代码块之间只有一条语句时，大括号也不可被省略（尽管有些人并不赞成，但这还是符合了软件工程原则的主流做法）。</p><p>关键字 <code>if</code> 和 <code>else</code> 之后的左大括号 <code>{</code> 必须和关键字在同一行，如果你使用了 else-if 结构，则前段代码块的右大括号 <code>}</code> 必须和 else-if 关键字在同一行。这两条规则都是被编译器强制规定的。</p><p>非法的 Go 代码:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> x<span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span> <span class="token punctuation">{</span>	<span class="token comment">// 无效的</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意的是，在你使用 <code>gofmt</code> 格式化代码之后，每个分支内的代码都会缩进 4 个或 8 个空格，或者是 1 个 tab，并且右大括号与对应的 <code>if</code> 关键字垂直对齐。</p><p>在有些情况下，条件语句两侧的括号是可以被省略的；当条件比较复杂时，则可以使用括号让代码更易读。条件允许是符合条件，需使用 <code>&amp;&amp;</code>、<code>||</code> 或 <code>!</code>，你可以使用括号来提升某个表达式的运算优先级，并提高代码的可读性。</p><p>一种可能用到条件语句的场景是测试变量的值，在不同的情况执行不同的语句，不过将在第 5.3 节讲到的 switch 结构会更适合这种情况。</p><p>示例 5.1 <a href="examples/chapter_5/booleans.go">booleans.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	bool1 <span class="token operator">:=</span> <span class="token boolean">true</span></span>
<span class="line">	<span class="token keyword">if</span> bool1 <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The value is true\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The value is false\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><pre><code>The value is true
</code></pre><p><strong>注意事项</strong> 这里不需要使用 <code>if bool1 == true</code> 来判断，因为 <code>bool1</code> 本身已经是一个布尔类型的值。</p><p>这种做法一般都用在测试 <code>true</code> 或者有利条件时，但你也可以使用取反 <code>!</code> 来判断值的相反结果，如：<code>if !bool1</code> 或者 <code>if !(condition)</code>。后者的括号大多数情况下是必须的，如这种情况：<code>if !(var1 == var2)</code>。</p>`,21)),s("p",null,[n[1]||(n[1]=a("当 if 结构内有 ")),n[2]||(n[2]=s("code",null,"break",-1)),n[3]||(n[3]=a("、")),n[4]||(n[4]=s("code",null,"continue",-1)),n[5]||(n[5]=a("、")),n[6]||(n[6]=s("code",null,"goto",-1)),n[7]||(n[7]=a(" 或者 ")),n[8]||(n[8]=s("code",null,"return",-1)),n[9]||(n[9]=a(" 语句时，Go 代码的常见写法是省略 ")),n[10]||(n[10]=s("code",null,"else",-1)),n[11]||(n[11]=a(" 部分（另见")),p(e,{to:"/chapter-2/05.2.html"},{default:l(()=>n[0]||(n[0]=[a("第 5.2 节")])),_:1}),n[12]||(n[12]=a("）。无论满足哪个条件都会返回 ")),n[13]||(n[13]=s("code",null,"x",-1)),n[14]||(n[14]=a(" 或者 ")),n[15]||(n[15]=s("code",null,"y",-1)),n[16]||(n[16]=a(" 时，一般使用以下写法："))]),n[46]||(n[46]=t(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> condition <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> x</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">return</span> y</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong> 不要同时在 if-else 结构的两个分支里都使用 <code>return</code> 语句，这将导致编译报错 <code>function ends without a return statement</code>（你可以认为这是一个编译器的 Bug 或者特性）。（ <strong>译者注：该问题已经在 Go 1.1 中被修复或者说改进</strong> ）</p><p>这里举一些有用的例子：</p>`,3)),s("ol",null,[n[23]||(n[23]=s("li",null,[s("p",null,"判断一个字符串是否为空："),s("ul",null,[s("li",null,[s("code",null,'if str == "" { ... }')]),s("li",null,[s("code",null,"if len(str) == 0 {...}")])])],-1)),s("li",null,[s("p",null,[n[18]||(n[18]=a("判断运行 Go 程序的操作系统类型，这可以通过常量 ")),n[19]||(n[19]=s("code",null,"runtime.GOOS",-1)),n[20]||(n[20]=a(" 来判断（")),p(e,{to:"/chapter-2/02.2.html"},{default:l(()=>n[17]||(n[17]=[a("第 2.2 节")])),_:1}),n[21]||(n[21]=a("）。"))]),n[22]||(n[22]=t(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> runtime<span class="token punctuation">.</span>GOOS <span class="token operator">==</span> <span class="token string">&quot;windows&quot;</span>	 <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">.</span>	<span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// Unix-like</span></span>
<span class="line">	<span class="token punctuation">.</span>	<span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码一般被放在 <code>init()</code> 函数中执行。这儿还有一段示例来演示如何根据操作系统来决定输入结束的提示：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> prompt <span class="token operator">=</span> <span class="token string">&quot;Enter a digit, e.g. 3 &quot;</span><span class="token operator">+</span> <span class="token string">&quot;or %s to quit.&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> runtime<span class="token punctuation">.</span>GOOS <span class="token operator">==</span> <span class="token string">&quot;windows&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">		prompt <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token string">&quot;Ctrl+Z, Enter&quot;</span><span class="token punctuation">)</span>		</span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//Unix-like</span></span>
<span class="line">		prompt <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token string">&quot;Ctrl+D&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3))]),n[24]||(n[24]=t(`<li><p>函数 <code>Abs()</code> 用于返回一个整型数字的绝对值:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">Abs</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">-</span>x</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">return</span> x	</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>isGreater</code> 用于比较两个整型数字的大小:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">isGreater</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> x <span class="token operator">&gt;</span> y <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token boolean">true</span>	</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2))]),n[47]||(n[47]=t(`<p>在第四种情况中，<code>if</code> 可以包含一个初始化语句（如：给一个变量赋值）。这种写法具有固定的格式（在初始化语句后方必须加上分号）：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> initialization<span class="token punctuation">;</span> condition <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// do something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">val <span class="token operator">:=</span> <span class="token number">10</span></span>
<span class="line"><span class="token keyword">if</span> val <span class="token operator">&gt;</span> max <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// do something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以这样写:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> val <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">;</span> val <span class="token operator">&gt;</span> max <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// do something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),s("p",null,[n[26]||(n[26]=a("但要注意的是，使用简短方式 ")),n[27]||(n[27]=s("code",null,":=",-1)),n[28]||(n[28]=a(" 声明的变量的作用域只存在于 ")),n[29]||(n[29]=s("code",null,"if",-1)),n[30]||(n[30]=a(" 结构中（在 ")),n[31]||(n[31]=s("code",null,"if",-1)),n[32]||(n[32]=a(" 结构的大括号之间，如果使用 if-else 结构则在 ")),n[33]||(n[33]=s("code",null,"else",-1)),n[34]||(n[34]=a(" 代码块中变量也会存在）。如果变量在 ")),n[35]||(n[35]=s("code",null,"if",-1)),n[36]||(n[36]=a(" 结构之前就已经存在，那么在 ")),n[37]||(n[37]=s("code",null,"if",-1)),n[38]||(n[38]=a(" 结构中，该变量原来的值会被隐藏。最简单的解决方案就是不要在初始化语句中声明变量（见")),p(e,{to:"/chapter-2/05.2.html"},{default:l(()=>n[25]||(n[25]=[a("5.2 节的例 3")])),_:1}),n[39]||(n[39]=a(" 了解更多)。"))]),n[48]||(n[48]=t(`<p>示例 5.2 <a href="examples/chapter_5/ifelse.go">ifelse.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> first <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">	<span class="token keyword">var</span> cond <span class="token builtin">int</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">if</span> first <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;first is less than or equal to 0\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> first <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> first <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;first is between 0 and 5\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;first is 5 or greater\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">if</span> cond <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> cond <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;cond is greater than 10\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;cond is not greater than 10\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><pre><code>first is 5 or greater
cond is not greater than 10
</code></pre><p>下面的代码片段展示了如何通过在初始化语句中获取函数 <code>process()</code> 的返回值，并在条件语句中作为判定条件来决定是否执行 <code>if</code> 结构中的代码：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> value <span class="token operator">:=</span> <span class="token function">process</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> value <span class="token operator">&gt;</span> max <span class="token punctuation">{</span></span>
<span class="line">	<span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,7)),s("ul",null,[s("li",null,[p(e,{to:"/chapter-2/directory.html"},{default:l(()=>n[40]||(n[40]=[a("目录")])),_:1})]),s("li",null,[n[42]||(n[42]=a("上一节：")),p(e,{to:"/chapter-2/05.0.html"},{default:l(()=>n[41]||(n[41]=[a("控制结构")])),_:1})]),s("li",null,[n[44]||(n[44]=a("下一节：")),p(e,{to:"/chapter-2/05.2.html"},{default:l(()=>n[43]||(n[43]=[a("测试多返回值函数的错误")])),_:1})])])])}const m=i(d,[["render",r],["__file","05.1.html.vue"]]),b=JSON.parse('{"path":"/chapter-2/05.1.html","title":"5.1 if-else 结构","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"5.1 if-else 结构","slug":"_5-1-if-else-结构","link":"#_5-1-if-else-结构","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-2/05.1.md"}');export{m as comp,b as data};
