import{_ as l,c as o,b as a,f as s,d as t,e,a as i,r as u,o as c}from"./app-DtITwm2S.js";const r={};function d(k,n){const p=u("RouteLink");return c(),o("div",null,[n[21]||(n[21]=a("h1",{id:"_16-10-糟糕的错误处理",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_16-10-糟糕的错误处理"},[a("span",null,"16.10 糟糕的错误处理")])],-1)),a("p",null,[n[1]||(n[1]=s("译者注：该小结关于错误处理的观点，译者并不完全赞同，关于本小结的部分想法请参考 ")),t(p,{to:"/chapter-4/Discussion_about_16.10.html"},{default:e(()=>n[0]||(n[0]=[s("关于 16.10.2 小节错误处理的一些见解")])),_:1}),n[2]||(n[2]=s("。"))]),a("p",null,[n[6]||(n[6]=s("依附于")),t(p,{to:"/chapter-4/13.0.html"},{default:e(()=>n[3]||(n[3]=[s("第 13 章")])),_:1}),n[7]||(n[7]=s("模式的描述和")),t(p,{to:"/chapter-4/17.1.html"},{default:e(()=>n[4]||(n[4]=[s("第 17.1 小节")])),_:1}),n[8]||(n[8]=s("与")),t(p,{to:"/chapter-4/17.2.html"},{default:e(()=>n[5]||(n[5]=[s("第 17.2.4 小节")])),_:1}),n[9]||(n[9]=s("的总结。"))]),n[22]||(n[22]=i(`<h2 id="_16-10-1-不要使用布尔值" tabindex="-1"><a class="header-anchor" href="#_16-10-1-不要使用布尔值"><span>16.10.1 不要使用布尔值：</span></a></h2><p>像下面代码一样，创建一个布尔型变量用于测试错误条件是多余的：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> good <span class="token builtin">bool</span></span>
<span class="line">    <span class="token comment">// 测试一个错误，\`good\` 被赋为 \`true\` 或者 \`false\`</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span>good <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;things aren’t good&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>立即检测一个错误：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token operator">...</span> err1 <span class="token operator">:=</span> api<span class="token punctuation">.</span><span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-10-2-避免错误检测使代码变得混乱" tabindex="-1"><a class="header-anchor" href="#_16-10-2-避免错误检测使代码变得混乱"><span>16.10.2 避免错误检测使代码变得混乱：</span></a></h2><p>避免写出这样的代码：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token operator">...</span> err1 <span class="token operator">:=</span> api<span class="token punctuation">.</span><span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;err: &quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">err2 <span class="token operator">:=</span> api<span class="token punctuation">.</span><span class="token function">Func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span>    </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，包括在一个初始化的 <code>if</code> 语句中对函数的调用。但即使代码中到处都是以 <code>if</code> 语句的形式通知错误（通过打印错误信息）。通过这种方式，很难分辨什么是正常的程序逻辑，什么是错误检测或错误通知。还需注意的是，大部分代码都是致力于错误的检测。通常解决此问题的好办法是尽可能以闭包的形式封装你的错误检测，例如下面的代码：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">httpRequestHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    err <span class="token operator">:=</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> req<span class="token punctuation">.</span>Method <span class="token operator">!=</span> <span class="token string">&quot;GET&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;expected GET&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> input <span class="token operator">:=</span> <span class="token function">parseInput</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span> input <span class="token operator">!=</span> <span class="token string">&quot;command&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;malformed command&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 可以在此进行其他的错误检测</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span></span>
<span class="line">            io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)),a("p",null,[n[11]||(n[11]=s("这种方法可以很容易分辨出错误检测、错误通知和正常的程序逻辑（更详细的方式参考")),t(p,{to:"/chapter-4/13.5.html"},{default:e(()=>n[10]||(n[10]=[s("第 13.5 小节")])),_:1}),n[12]||(n[12]=s("）。"))]),a("p",null,[a("strong",null,[n[14]||(n[14]=s("在开始阅读")),t(p,{to:"/chapter-4/17.0.html"},{default:e(()=>n[13]||(n[13]=[s("第 17 章")])),_:1}),n[15]||(n[15]=s("前，先回答下列 2 个问题："))])]),n[23]||(n[23]=a("ul",null,[a("li",null,[a("p",null,[s("问题 16.1：总结你能记住的所有关于 "),a("code",null,", ok"),s(" 模式的情况。")])]),a("li",null,[a("p",null,[s("问题 16.2：总结你能记住的所有关于 "),a("code",null,"defer"),s(" 模式的情况。")])])],-1)),n[24]||(n[24]=a("h2",{id:"链接",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#链接"},[a("span",null,"链接")])],-1)),a("ul",null,[a("li",null,[t(p,{to:"/chapter-4/directory.html"},{default:e(()=>n[16]||(n[16]=[s("目录")])),_:1})]),a("li",null,[n[18]||(n[18]=s("上一节：")),t(p,{to:"/chapter-4/16.9.html"},{default:e(()=>n[17]||(n[17]=[s("闭包和协程的使用")])),_:1})]),a("li",null,[n[20]||(n[20]=s("下一章：")),t(p,{to:"/chapter-4/17.0.html"},{default:e(()=>n[19]||(n[19]=[s("Go 语言模式")])),_:1})])])])}const m=l(r,[["render",d],["__file","16.10.html.vue"]]),b=JSON.parse('{"path":"/chapter-4/16.10.html","title":"16.10 糟糕的错误处理","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"16.10 糟糕的错误处理","slug":"_16-10-糟糕的错误处理","link":"#_16-10-糟糕的错误处理","children":[{"level":2,"title":"16.10.1 不要使用布尔值：","slug":"_16-10-1-不要使用布尔值","link":"#_16-10-1-不要使用布尔值","children":[]},{"level":2,"title":"16.10.2 避免错误检测使代码变得混乱：","slug":"_16-10-2-避免错误检测使代码变得混乱","link":"#_16-10-2-避免错误检测使代码变得混乱","children":[]},{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-4/16.10.md"}');export{m as comp,b as data};
