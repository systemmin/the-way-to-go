import{_ as l,c as i,b as s,f as a,d as p,e as t,a as o,r as c,o as u}from"./app-DtITwm2S.js";const r={};function d(k,n){const e=c("RouteLink");return u(),i("div",null,[n[18]||(n[18]=s("h1",{id:"_14-11-限制同时处理的请求数",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_14-11-限制同时处理的请求数"},[s("span",null,"14.11 限制同时处理的请求数")])],-1)),s("p",null,[n[1]||(n[1]=a("使用带缓冲区的通道很容易实现这一点（参见 ")),p(e,{to:"/chapter-3/14.2.html#1425-%E5%90%8C%E6%AD%A5%E9%80%9A%E9%81%93-%E4%BD%BF%E7%94%A8%E5%B8%A6%E7%BC%93%E5%86%B2%E7%9A%84%E9%80%9A%E9%81%93"},{default:t(()=>n[0]||(n[0]=[a("14.2.5")])),_:1}),n[2]||(n[2]=a("），其缓冲区容量就是同时处理请求的最大数量。程序 ")),n[3]||(n[3]=s("a",{href:"examples/chapter_14/max_tasks.go"},"max_tasks.go",-1)),n[4]||(n[4]=a(" 虽然没有做什么有用的事但是却包含了这个技巧：超过 ")),n[5]||(n[5]=s("code",null,"MAXREQS",-1)),n[6]||(n[6]=a(" 的请求将不会被同时处理，因为当信号通道表示缓冲区已满时 ")),n[7]||(n[7]=s("code",null,"handle()",-1)),n[8]||(n[8]=a(" 函数会阻塞且不再处理其他请求，直到某个请求从 ")),n[9]||(n[9]=s("code",null,"sem",-1)),n[10]||(n[10]=a(" 中被移除。")),n[11]||(n[11]=s("code",null,"sem",-1)),n[12]||(n[12]=a(" 就像一个信号量，这一专业术语用于在程序中表示特定条件的标志变量。"))]),n[19]||(n[19]=o(`<p>示例：14.16-<a href="examples/chapter_14/max_tasks.go">max_tasks.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> MAXREQS <span class="token operator">=</span> <span class="token number">50</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> sem <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> MAXREQS<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Request <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	a<span class="token punctuation">,</span> b   <span class="token builtin">int</span></span>
<span class="line">	replyc <span class="token keyword">chan</span> <span class="token builtin">int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">process</span><span class="token punctuation">(</span>r <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// do something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">handle</span><span class="token punctuation">(</span>r <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	sem <span class="token operator">&lt;-</span> <span class="token number">1</span> <span class="token comment">// doesn&#39;t matter what we put in it</span></span>
<span class="line">	<span class="token function">process</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span></span>
<span class="line">	<span class="token operator">&lt;-</span>sem <span class="token comment">// one empty place in the buffer: the next request can start</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">server</span><span class="token punctuation">(</span>service <span class="token keyword">chan</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">		request <span class="token operator">:=</span> <span class="token operator">&lt;-</span>service</span>
<span class="line">		<span class="token keyword">go</span> <span class="token function">handle</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	service <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">go</span> <span class="token function">server</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种方式，应用程序可以通过使用缓冲通道（通道被用作信号量）使协程同步其对该资源的使用，从而充分利用有限的资源（如内存）。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,4)),s("ul",null,[s("li",null,[p(e,{to:"/chapter-3/directory.html"},{default:t(()=>n[13]||(n[13]=[a("目录")])),_:1})]),s("li",null,[n[15]||(n[15]=a("上一节：")),p(e,{to:"/chapter-3/14.10.html"},{default:t(()=>n[14]||(n[14]=[a("复用")])),_:1})]),s("li",null,[n[17]||(n[17]=a("下一节：")),p(e,{to:"/chapter-3/14.12.html"},{default:t(()=>n[16]||(n[16]=[a("链式协程")])),_:1})])])])}const m=l(r,[["render",d],["__file","14.11.html.vue"]]),b=JSON.parse('{"path":"/chapter-3/14.11.html","title":"14.11 限制同时处理的请求数","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"14.11 限制同时处理的请求数","slug":"_14-11-限制同时处理的请求数","link":"#_14-11-限制同时处理的请求数","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-3/14.11.md"}');export{m as comp,b as data};
