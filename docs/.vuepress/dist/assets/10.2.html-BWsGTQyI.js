import{_ as o,c as i,a as l,b as a,f as s,d as p,e as t,r as c,o as u}from"./app-DtITwm2S.js";const r={};function d(k,n){const e=c("RouteLink");return u(),i("div",null,[n[18]||(n[18]=l(`<h1 id="_10-2-使用工厂方法创建结构体实例" tabindex="-1"><a class="header-anchor" href="#_10-2-使用工厂方法创建结构体实例"><span>10.2 使用工厂方法创建结构体实例</span></a></h1><h2 id="_10-2-1-结构体工厂" tabindex="-1"><a class="header-anchor" href="#_10-2-1-结构体工厂"><span>10.2.1 结构体工厂</span></a></h2><p>Go 语言不支持面向对象编程语言中那样的构造子方法，但是可以很容易的在 Go 中实现 “构造子工厂”方法。为了方便通常会为类型定义一个工厂，按惯例，工厂的名字以 <code>new...</code> 或 <code>New...</code> 开头。假设定义了如下的 <code>File</code> 结构体类型：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> File <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    fd      <span class="token builtin">int</span>     <span class="token comment">// 文件描述符</span></span>
<span class="line">    name    <span class="token builtin">string</span>  <span class="token comment">// 文件名</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是这个结构体类型对应的工厂方法，它返回一个指向结构体实例的指针：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">NewFile</span><span class="token punctuation">(</span>fd <span class="token builtin">int</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>File <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> fd <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>File<span class="token punctuation">{</span>fd<span class="token punctuation">,</span> name<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后这样调用它：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">f <span class="token operator">:=</span> <span class="token function">NewFile</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;./test.txt&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在 Go 语言中常常像上面这样在工厂方法里使用初始化来简便的实现构造函数。</p><p>如果 <code>File</code> 是一个结构体类型，那么表达式 <code>new(File)</code> 和 <code>&amp;File{}</code> 是等价的。</p><p>这可以和大多数面向对象编程语言中笨拙的初始化方式做个比较：<code>File f = new File(...)</code>。</p><p>我们可以说是工厂实例化了类型的一个对象，就像在基于类的 OO 语言中那样。</p><p>如果想知道结构体类型 <code>T</code> 的一个实例占用了多少内存，可以使用：<code>size := unsafe.Sizeof(T{})</code>。</p><p><strong>如何强制使用工厂方法</strong></p>`,14)),a("p",null,[n[2]||(n[2]=s("通过应用可见性规则参考 ")),p(e,{to:"/chapter-2/04.2.html"},{default:t(()=>n[0]||(n[0]=[s("4.2.1节")])),_:1}),n[3]||(n[3]=s("、")),p(e,{to:"/chapter-2/09.5.html"},{default:t(()=>n[1]||(n[1]=[s("9.5 节")])),_:1}),n[4]||(n[4]=s(" 就可以禁止使用 ")),n[5]||(n[5]=a("code",null,"new()",-1)),n[6]||(n[6]=s(" 函数，强制用户使用工厂方法，从而使类型变成私有的，就像在面向对象语言中那样。"))]),n[19]||(n[19]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> matrix <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">NewMatrix</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">*</span>matrix <span class="token punctuation">{</span></span>
<span class="line">    m <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token comment">// 初始化 m</span></span>
<span class="line">    <span class="token keyword">return</span> m</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在其他包里使用工厂方法：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;matrix&quot;</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line">wrong <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>matrix<span class="token punctuation">)</span>     <span class="token comment">// 编译失败（matrix 是私有的）</span></span>
<span class="line">right <span class="token operator">:=</span> matrix<span class="token punctuation">.</span><span class="token function">NewMatrix</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>  <span class="token comment">// 实例化 matrix 的唯一方式</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-2-2-map-和-struct-vs-new-和-make" tabindex="-1"><a class="header-anchor" href="#_10-2-2-map-和-struct-vs-new-和-make"><span>10.2.2 map 和 struct vs new() 和 make()</span></a></h2>`,4)),a("p",null,[n[8]||(n[8]=a("code",null,"new()",-1)),n[9]||(n[9]=s(" 和 ")),n[10]||(n[10]=a("code",null,"make()",-1)),n[11]||(n[11]=s(" 这两个内置函数已经在第 ")),p(e,{to:"/chapter-2/07.2.html"},{default:t(()=>n[7]||(n[7]=[s("7.2.4")])),_:1}),n[12]||(n[12]=s(" 节通过切片的例子说明过一次。"))]),n[20]||(n[20]=l(`<p>现在为止我们已经见到了可以使用 <code>make()</code> 的三种类型中的其中两个：</p><pre><code>slices  /  maps / channels（见第 14 章）
</code></pre><p>下面的例子说明了在映射上使用 <code>new()</code> 和 <code>make()</code> 的区别以及可能发生的错误：</p><p>示例 10.4 <a href="examples/chapter_10/new_make.go">new_make.go</a>（不能编译）</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Foo <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span></span>
<span class="line"><span class="token keyword">type</span> Bar <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    thingOne <span class="token builtin">string</span></span>
<span class="line">    thingTwo <span class="token builtin">int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// OK</span></span>
<span class="line">    y <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Bar<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>thingOne <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>thingTwo <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// NOT OK</span></span>
<span class="line">    z <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>Bar<span class="token punctuation">)</span> <span class="token comment">// 编译错误：cannot make type Bar</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token punctuation">.</span>thingOne <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token punctuation">.</span>thingTwo <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// OK</span></span>
<span class="line">    x <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span></span>
<span class="line">    x<span class="token punctuation">[</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;goodbye&quot;</span></span>
<span class="line">    x<span class="token punctuation">[</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// NOT OK</span></span>
<span class="line">    u <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token operator">*</span>u<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;goodbye&quot;</span> <span class="token comment">// 运行时错误!! panic: assignment to entry in nil map</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token operator">*</span>u<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>试图 <code>make()</code> 一个结构体变量，会引发一个编译错误，这还不是太糟糕，但是 <code>new()</code> 一个 <code>map</code> 并试图向其填充数据，将会引发运行时错误！ 因为 <code>new(Foo)</code> 返回的是一个指向 <code>nil</code> 的指针，它尚未被分配内存。所以在使用 <code>map</code> 时要特别谨慎。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,7)),a("ul",null,[a("li",null,[p(e,{to:"/chapter-2/directory.html"},{default:t(()=>n[13]||(n[13]=[s("目录")])),_:1})]),a("li",null,[n[15]||(n[15]=s("上一节：")),p(e,{to:"/chapter-2/10.1.html"},{default:t(()=>n[14]||(n[14]=[s("结构体定义")])),_:1})]),a("li",null,[n[17]||(n[17]=s("下一节：")),p(e,{to:"/chapter-2/10.3.html"},{default:t(()=>n[16]||(n[16]=[s("使用自定义包中的结构体")])),_:1})])])])}const v=o(r,[["render",d],["__file","10.2.html.vue"]]),b=JSON.parse('{"path":"/chapter-2/10.2.html","title":"10.2 使用工厂方法创建结构体实例","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"10.2 使用工厂方法创建结构体实例","slug":"_10-2-使用工厂方法创建结构体实例","link":"#_10-2-使用工厂方法创建结构体实例","children":[{"level":2,"title":"10.2.1 结构体工厂","slug":"_10-2-1-结构体工厂","link":"#_10-2-1-结构体工厂","children":[]},{"level":2,"title":"10.2.2 map 和 struct vs new() 和 make()","slug":"_10-2-2-map-和-struct-vs-new-和-make","link":"#_10-2-2-map-和-struct-vs-new-和-make","children":[]},{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-2/10.2.md"}');export{v as comp,b as data};
