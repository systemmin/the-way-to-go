import{_ as e,c as i,b as a,f as s,d as p,e as l,a as o,r as c,o as u}from"./app-DtITwm2S.js";const r={};function k(d,n){const t=c("RouteLink");return u(),i("div",null,[n[20]||(n[20]=a("h1",{id:"_6-12-通过内存缓存来提升性能",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_6-12-通过内存缓存来提升性能"},[a("span",null,"6.12 通过内存缓存来提升性能")])],-1)),a("p",null,[n[2]||(n[2]=s("当在进行大量的计算时，提升性能最直接有效的一种方式就是避免重复计算。通过在内存中缓存和重复利用相同计算的结果，称之为内存缓存。最明显的例子就是生成斐波那契数列的程序（详见第 ")),p(t,{to:"/chapter-2/06.6.html"},{default:l(()=>n[0]||(n[0]=[s("6.6")])),_:1}),n[3]||(n[3]=s(" 和 ")),p(t,{to:"/chapter-2/06.11.html"},{default:l(()=>n[1]||(n[1]=[s("6.11")])),_:1}),n[4]||(n[4]=s(" 节）："))]),n[21]||(n[21]=a("p",null,[s("要计算数列中第 n 个数字，需要先得到之前两个数的值，但很明显绝大多数情况下前两个数的值都是已经计算过的。即每个更后面的数都是基于之前计算结果的重复计算，正如示例 6.11 "),a("a",{href:"examples/chapter_6/fibonacci.go"},"fibonnaci.go"),s(" 所展示的那样。")],-1)),a("p",null,[n[6]||(n[6]=s("而我们要做就是将第 n 个数的值存在数组中索引为 n 的位置（详见")),p(t,{to:"/chapter-2/07.0.html"},{default:l(()=>n[5]||(n[5]=[s("第 7 章")])),_:1}),n[7]||(n[7]=s("），然后在数组中查找是否已经计算过，如果没有找到，则再进行计算。"))]),n[22]||(n[22]=a("p",null,[s("程序 Listing 6.17 - "),a("a",{href:"examples/chapter_6/fibonacci_memoization.go"},"fibonacci_memoization.go"),s(" 就是依照这个原则实现的，下面是计算到第 40 位数字的性能对比：")],-1)),n[23]||(n[23]=a("ul",null,[a("li",null,"普通写法：4.730270 秒"),a("li",null,"内存缓存：0.001000 秒")],-1)),a("p",null,[n[9]||(n[9]=s("内存缓存的优势显而易见，而且您还可以将它应用到其它类型的计算中，例如使用 ")),n[10]||(n[10]=a("code",null,"map",-1)),n[11]||(n[11]=s("（详见")),p(t,{to:"/chapter-2/07.0.html"},{default:l(()=>n[8]||(n[8]=[s("第 7 章")])),_:1}),n[12]||(n[12]=s("）而不是数组或切片（Listing 6.21 - ")),n[13]||(n[13]=a("a",{href:"examples/chapter_6/fibonacci_memoization.go"},"fibonacci_memoization.go",-1)),n[14]||(n[14]=s("）："))]),n[24]||(n[24]=o(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">	<span class="token string">&quot;time&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> LIM <span class="token operator">=</span> <span class="token number">41</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> fibs <span class="token punctuation">[</span>LIM<span class="token punctuation">]</span><span class="token builtin">uint64</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> result <span class="token builtin">uint64</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">	start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> LIM<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">		result <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;fibonacci(%d) is: %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> result<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	end <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	delta <span class="token operator">:=</span> end<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;longCalculation took this amount of time: %s\\n&quot;</span><span class="token punctuation">,</span> delta<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>res <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// memoization: check if fibonacci(n) is already known in array:</span></span>
<span class="line">	<span class="token keyword">if</span> fibs<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">		res <span class="token operator">=</span> fibs<span class="token punctuation">[</span>n<span class="token punctuation">]</span></span>
<span class="line">		<span class="token keyword">return</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span></span>
<span class="line">		res <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">		res <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	fibs<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> res</span>
<span class="line">	<span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内存缓存的技术在使用计算成本相对昂贵的函数时非常有用（不仅限于例子中的递归），譬如大量进行相同参数的运算。这种技术还可以应用于纯函数中，即相同输入必定获得相同输出的函数。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,3)),a("ul",null,[a("li",null,[p(t,{to:"/chapter-2/directory.html"},{default:l(()=>n[15]||(n[15]=[s("目录")])),_:1})]),a("li",null,[n[17]||(n[17]=s("上一节：")),p(t,{to:"/chapter-2/06.11.html"},{default:l(()=>n[16]||(n[16]=[s("计算函数执行时间")])),_:1})]),a("li",null,[n[19]||(n[19]=s("下一章：")),p(t,{to:"/chapter-2/07.0.html"},{default:l(()=>n[18]||(n[18]=[s("数组与切片")])),_:1})])])])}const v=e(r,[["render",k],["__file","06.12.html.vue"]]),b=JSON.parse('{"path":"/chapter-2/06.12.html","title":"6.12 通过内存缓存来提升性能","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"6.12 通过内存缓存来提升性能","slug":"_6-12-通过内存缓存来提升性能","link":"#_6-12-通过内存缓存来提升性能","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-2/06.12.md"}');export{v as comp,b as data};
