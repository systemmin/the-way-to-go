import{_ as p,c as i,a as l,b as a,f as s,d as t,e as o,r,o as d}from"./app-DtITwm2S.js";const u={};function c(g,n){const e=r("RouteLink");return d(),i("div",null,[n[12]||(n[12]=l(`<h1 id="版本-4-用-json-持久化存储" tabindex="-1"><a class="header-anchor" href="#版本-4-用-json-持久化存储"><span>版本 4 - 用 JSON 持久化存储</span></a></h1><p>第 4 个版本的代码 <em>goto_v4</em> 见 <a href="examples/chapter_19/goto_v4">goto_v4</a>。</p><h1 id="_19-7-以-json-格式存储" tabindex="-1"><a class="header-anchor" href="#_19-7-以-json-格式存储"><span>19.7 以 json 格式存储</span></a></h1><p>如果你是个敏锐的测试者也许已经注意到了，当 goto 程序启动 2 次，第 2 次启动后能读取短 URL 且完美地工作。然而从第 3 次开始，会得到错误：</p><pre><code>Error loading URLStore: extra data in buffer
</code></pre>`,5)),a("p",null,[n[1]||(n[1]=s("这是由于 gob 是基于流的协议，它不支持重新开始。为补救该问题，这里我们使用 json 作为存储协议（见 ")),t(e,{to:"/chapter-4/12.9.html"},{default:o(()=>n[0]||(n[0]=[s("12.9 节")])),_:1}),n[2]||(n[2]=s("），它以纯文本形式存储数据，因此也可以被非 Go 语言编写的进程读取。同时也显示了更换一种不同的持久化协议是多么简单，因为与存储打交道的代码被清晰地隔离在 2 个方法中，即 ")),n[3]||(n[3]=a("code",null,"load()",-1)),n[4]||(n[4]=s(" 和 ")),n[5]||(n[5]=a("code",null,"saveLoop()",-1)),n[6]||(n[6]=s("。"))]),n[13]||(n[13]=l(`<p>从创建新的空文件 store.json 开始，更改 main.go 中声明文件名变量的那一行：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> dataFile <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;store.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;data store file name&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在 store.go 中导入 <code>json</code> 取代 <code>gob</code>。然后在 <code>saveLoop()</code> 中唯一需要被修改的行：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">e <span class="token operator">:=</span> gob<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>更改为：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">e <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>类似的，在 <code>load</code> 方法中：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">d <span class="token operator">:=</span> gob<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>修改为：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">d <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这就是所有要改动的地方！编译，启动并测试，你会发现之前的错误不会再发生了。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,12)),a("ul",null,[a("li",null,[t(e,{to:"/chapter-4/directory.html"},{default:o(()=>n[7]||(n[7]=[s("目录")])),_:1})]),a("li",null,[n[9]||(n[9]=s("上一节：")),t(e,{to:"/chapter-4/19.6.html"},{default:o(()=>n[8]||(n[8]=[s("用协程优化性能")])),_:1})]),a("li",null,[n[11]||(n[11]=s("下一节：")),t(e,{to:"/chapter-4/19.8.html"},{default:o(()=>n[10]||(n[10]=[s("多服务器处理架构")])),_:1})])])])}const v=p(u,[["render",c],["__file","19.7.html.vue"]]),k=JSON.parse('{"path":"/chapter-4/19.7.html","title":"版本 4 - 用 JSON 持久化存储","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"版本 4 - 用 JSON 持久化存储","slug":"版本-4-用-json-持久化存储","link":"#版本-4-用-json-持久化存储","children":[]},{"level":1,"title":"19.7 以 json 格式存储","slug":"_19-7-以-json-格式存储","link":"#_19-7-以-json-格式存储","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-4/19.7.md"}');export{v as comp,k as data};
