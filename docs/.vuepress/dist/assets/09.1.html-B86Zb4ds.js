import{_ as i,c as p,a as t,b as s,f as l,d as o,e as a,r as d,o as c}from"./app-DtITwm2S.js";const u={};function r(m,n){const e=d("RouteLink");return c(),p("div",null,[n[34]||(n[34]=t(`<h1 id="_9-1-标准库概述" tabindex="-1"><a class="header-anchor" href="#_9-1-标准库概述"><span>9.1 标准库概述</span></a></h1><p>像 <code>fmt</code>、<code>os</code> 等这样具有常用功能的内置包在 Go 语言中有 150 个以上，它们被称为标准库，大部分(一些底层的除外)内置于 Go 本身。完整列表可以在 <a href="https://gowalker.org/search?q=gorepos" target="_blank" rel="noopener noreferrer">Go Walker</a> 查看。</p><p>在贯穿本书的例子和练习中，我们都是用标准库的包。可以通过查阅第 350 页包中的内容快速找到相关的包的实例。这里我们只是按功能进行分组来介绍这些包的简单用途，我们不会深入讨论他们的内部结构。</p><ul><li><code>unsafe</code>: 包含了一些打破 Go 语言“类型安全”的命令，一般的程序中不会被使用，可用在 C/C++ 程序的调用中。</li><li><code>syscall</code>-<code>os</code>-<code>os/exec</code>: <ul><li><code>os</code>: 提供给我们一个平台无关性的操作系统功能接口，采用类 Unix 设计，隐藏了不同操作系统间的差异，让不同的文件系统和操作系统对象表现一致。</li><li><code>os/exec</code>: 提供我们运行外部操作系统命令和程序的方式。</li><li><code>syscall</code>: 底层的外部包，提供了操作系统底层调用的基本接口。</li></ul></li></ul><p>通过一个 Go 程序让Linux重启来体现它的能力。</p><p>示例 9.1 <a href="examples/chapter_9/reboot.go">reboot.go</a>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;syscall&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> LINUX_REBOOT_MAGIC1 <span class="token builtin">uintptr</span> <span class="token operator">=</span> <span class="token number">0xfee1dead</span></span>
<span class="line"><span class="token keyword">const</span> LINUX_REBOOT_MAGIC2 <span class="token builtin">uintptr</span> <span class="token operator">=</span> <span class="token number">672274793</span></span>
<span class="line"><span class="token keyword">const</span> LINUX_REBOOT_CMD_RESTART <span class="token builtin">uintptr</span> <span class="token operator">=</span> <span class="token number">0x1234567</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	syscall<span class="token punctuation">.</span><span class="token function">Syscall</span><span class="token punctuation">(</span>syscall<span class="token punctuation">.</span>SYS_REBOOT<span class="token punctuation">,</span></span>
<span class="line">		LINUX_REBOOT_MAGIC1<span class="token punctuation">,</span></span>
<span class="line">		LINUX_REBOOT_MAGIC2<span class="token punctuation">,</span></span>
<span class="line">		LINUX_REBOOT_CMD_RESTART<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>archive/tar</code> 和 <code>/zip-compress</code>：压缩（解压缩）文件功能。</li><li><code>fmt</code>-<code>io</code>-<code>bufio</code>-<code>path/filepath</code>-<code>flag</code>: <ul><li><code>fmt</code>: 提供了格式化输入输出功能。</li><li><code>io</code>: 提供了基本输入输出功能，大多数是围绕系统功能的封装。</li><li><code>bufio</code>: 缓冲输入输出功能的封装。</li><li><code>path/filepath</code>: 用来操作在当前系统中的目标文件名路径。</li><li><code>flag</code>: 对命令行参数的操作。</li></ul></li><li><code>strings</code>-<code>strconv</code>-<code>unicode</code>-<code>regexp</code>-<code>bytes</code>: <ul><li><code>strings</code>: 提供对字符串的操作。</li><li><code>strconv</code>: 提供将字符串转换为基础类型的功能。</li><li><code>unicode</code>: 为 unicode 型的字符串提供特殊的功能。</li><li><code>regexp</code>: 正则表达式功能。</li><li><code>bytes</code>: 提供对字符型分片的操作。</li><li><code>index/suffixarray</code>: 子字符串快速查询。</li></ul></li><li><code>math</code>-<code>math/cmath</code>-<code>math/big</code>-<code>math/rand</code>-<code>sort</code>: <ul><li><code>math</code>: 基本的数学函数。</li><li><code>math/cmath</code>: 对复数的操作。</li><li><code>math/rand</code>: 伪随机数生成。</li><li><code>sort</code>: 为数组排序和自定义集合。</li><li><code>math/big</code>: 大数的实现和计算。</li></ul></li><li><code>container</code>-<code>/list-ring-heap</code>: 实现对集合的操作。 <ul><li><code>list</code>: 双链表。</li><li><code>ring</code>: 环形链表。</li></ul></li></ul><p>下面代码演示了如何遍历一个链表(当 l 是 <code>*List</code>)：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">for</span> e <span class="token operator">:=</span> l<span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">//do something with e.Value</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)),s("ul",null,[n[26]||(n[26]=s("li",null,[s("code",null,"time"),l("-"),s("code",null,"log"),l(": "),s("ul",null,[s("li",null,[s("code",null,"time"),l(": 日期和时间的基本操作。")]),s("li",null,[s("code",null,"log"),l(": 记录程序运行时产生的日志，我们将在后面的章节使用它。")])])],-1)),s("li",null,[n[11]||(n[11]=s("code",null,"encoding/json",-1)),n[12]||(n[12]=l("-")),n[13]||(n[13]=s("code",null,"encoding/xml",-1)),n[14]||(n[14]=l("-")),n[15]||(n[15]=s("code",null,"text/template",-1)),n[16]||(n[16]=l(": ")),s("ul",null,[n[10]||(n[10]=s("li",null,[s("code",null,"encoding/json"),l(": 读取并解码和写入并编码 JSON 数据。")],-1)),s("li",null,[n[2]||(n[2]=s("code",null,"encoding/xml",-1)),n[3]||(n[3]=l(": 简单的 XML1.0 解析器，有关 JSON 和 XML 的实例请查阅第 ")),o(e,{to:"/chapter-2/12.9.html"},{default:a(()=>n[0]||(n[0]=[l("12.9")])),_:1}),n[4]||(n[4]=l("/")),o(e,{to:"/chapter-2/10.0.html"},{default:a(()=>n[1]||(n[1]=[l("10")])),_:1}),n[5]||(n[5]=l(" 章节。"))]),s("li",null,[n[7]||(n[7]=s("code",null,"text/template",-1)),n[8]||(n[8]=l(":生成像 HTML 一样的数据与文本混合的数据驱动模板（参见")),o(e,{to:"/chapter-2/15.7.html"},{default:a(()=>n[6]||(n[6]=[l("第 15.7 节")])),_:1}),n[9]||(n[9]=l("）。"))])])]),s("li",null,[n[18]||(n[18]=s("code",null,"net",-1)),n[19]||(n[19]=l("-")),n[20]||(n[20]=s("code",null,"net/http",-1)),n[21]||(n[21]=l("-")),n[22]||(n[22]=s("code",null,"html",-1)),n[23]||(n[23]=l(":（参见")),o(e,{to:"/chapter-2/15.0.html"},{default:a(()=>n[17]||(n[17]=[l("第 15 章")])),_:1}),n[24]||(n[24]=l("） ")),n[25]||(n[25]=s("ul",null,[s("li",null,[s("code",null,"net"),l(": 网络数据的基本操作。")]),s("li",null,[s("code",null,"http"),l(": 提供了一个可扩展的 HTTP 服务器和基础客户端，解析 HTTP 请求和回复。")]),s("li",null,[s("code",null,"html"),l(": HTML5 解析器。")])],-1))]),n[27]||(n[27]=s("li",null,[s("code",null,"runtime"),l(": Go 程序运行时的交互操作，例如垃圾回收和协程创建。")],-1)),n[28]||(n[28]=s("li",null,[s("code",null,"reflect"),l(": 实现通过程序运行时反射，让程序操作任意类型的变量。")],-1))]),n[35]||(n[35]=t('<p><code>exp</code> 包中有许多将被编译为新包的实验性的包。在下次稳定版本发布的时候，它们将成为独立的包。如果前一个版本已经存在了，它们将被作为过时的包被回收。然而 Go1.0 发布的时候并没有包含过时或者实验性的包。</p><p><strong>练习 9.1</strong> <a href="exercises/chapter_9/dlinked_list.go">Q20_linked_list.go</a></p><p>使用 <code>container/list</code> 包实现一个双向链表，将 <code>101</code>、<code>102</code> 和 <code>103</code> 放入其中并打印出来。</p><p><strong>练习 9.2</strong> <a href="exercises/chapter_9/size_int.go">size_int.go</a></p><p>通过使用 <code>unsafe</code> 包中的方法来测试你电脑上一个整型变量占用多少个字节。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>',6)),s("ul",null,[s("li",null,[o(e,{to:"/chapter-2/directory.html"},{default:a(()=>n[29]||(n[29]=[l("目录")])),_:1})]),s("li",null,[n[31]||(n[31]=l("上一节：")),o(e,{to:"/chapter-2/09.0.html"},{default:a(()=>n[30]||(n[30]=[l("包 (package)")])),_:1})]),s("li",null,[n[33]||(n[33]=l("下一节：")),o(e,{to:"/chapter-2/09.2.html"},{default:a(()=>n[32]||(n[32]=[l("regexp 包")])),_:1})])])])}const g=i(u,[["render",r],["__file","09.1.html.vue"]]),v=JSON.parse('{"path":"/chapter-2/09.1.html","title":"9.1 标准库概述","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"9.1 标准库概述","slug":"_9-1-标准库概述","link":"#_9-1-标准库概述","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-2/09.1.md"}');export{g as comp,v as data};
