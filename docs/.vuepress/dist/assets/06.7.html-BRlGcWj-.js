import{_ as i,c as o,a as l,b as a,f as s,d as t,e as p,r as c,o as u}from"./app-DtITwm2S.js";const d={};function r(k,n){const e=c("RouteLink");return u(),o("div",null,[n[8]||(n[8]=l(`<h1 id="_6-7-将函数作为参数" tabindex="-1"><a class="header-anchor" href="#_6-7-将函数作为参数"><span>6.7 将函数作为参数</span></a></h1><p>函数可以作为其它函数的参数进行传递，然后在其它函数内调用执行，一般称之为回调。下面是一个将函数作为参数的简单例子（<a href="examples/chapter_6/function_parameter.go">function_parameter.go</a>）：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">callback</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Add<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The sum of %d and %d is: %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">callback</span><span class="token punctuation">(</span>y <span class="token builtin">int</span><span class="token punctuation">,</span> f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">f</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// this becomes Add(1, 2)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><pre><code>The sum of 1 and 2 is: 3
</code></pre><p>将函数作为参数的最好的例子是函数 <code>strings.IndexFunc()</code>：</p><p>该函数的签名是 <code>func IndexFunc(s string, f func(c rune) bool) int</code>，它的返回值是字符串 s 中第一个使函数 <code>f(c)</code> 返回 <code>true</code> 的 Unicode 字符的索引值。如果找不到，则返回 -1。</p><p>例如 <code>strings.IndexFunc(line, unicode.IsSpace)</code> 就会返回 <code>line</code> 中第一个空白字符的索引值。当然，您也可以书写自己的函数：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">IsAscii</span><span class="token punctuation">(</span>c <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> c <span class="token operator">&gt;</span> <span class="token number">255</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)),a("p",null,[n[1]||(n[1]=s("在")),t(e,{to:"/chapter-2/14.10.html"},{default:p(()=>n[0]||(n[0]=[s("第 14.10.1 节")])),_:1}),n[2]||(n[2]=s(" 中，我们将会根据一个客户端/服务端程序作为示例对这个用法进行深入讨论。"))]),n[9]||(n[9]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> binOp <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span>op binOp<span class="token punctuation">,</span> req <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>练习 6.7</strong> <a href="exercises/chapter_6/strings_map.go">strings_map.go</a></p><p>包 <code>strings</code> 中的 <code>Map()</code> 函数和 <code>strings.IndexFunc()</code> 一样都是非常好的使用例子。请学习它的源代码并基于该函数书写一个程序，要求将指定文本内的所有非 ASCII 字符替换成问号 <code>&#39;?&#39;</code> 或空格 <code>&#39; &#39;</code>。您需要怎么做才能删除这些字符呢？</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,4)),a("ul",null,[a("li",null,[t(e,{to:"/chapter-2/directory.html"},{default:p(()=>n[3]||(n[3]=[s("目录")])),_:1})]),a("li",null,[n[5]||(n[5]=s("上一节：")),t(e,{to:"/chapter-2/06.6.html"},{default:p(()=>n[4]||(n[4]=[s("递归函数")])),_:1})]),a("li",null,[n[7]||(n[7]=s("下一节：")),t(e,{to:"/chapter-2/06.8.html"},{default:p(()=>n[6]||(n[6]=[s("闭包")])),_:1})])])])}const v=i(d,[["render",r],["__file","06.7.html.vue"]]),b=JSON.parse('{"path":"/chapter-2/06.7.html","title":"6.7 将函数作为参数","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"6.7 将函数作为参数","slug":"_6-7-将函数作为参数","link":"#_6-7-将函数作为参数","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-2/06.7.md"}');export{v as comp,b as data};
