import{_ as l,c as i,a as o,b as a,f as s,d as p,e,r as c,o as u}from"./app-DtITwm2S.js";const r={};function k(d,n){const t=c("RouteLink");return u(),i("div",null,[n[15]||(n[15]=o(`<h1 id="_11-11-printf-和反射" tabindex="-1"><a class="header-anchor" href="#_11-11-printf-和反射"><span>11.11 Printf() 和反射</span></a></h1><p>在 Go 语言的标准库中，前几节所述的反射的功能被大量地使用。举个例子，<code>fmt</code> 包中的 <code>Printf()</code>（以及其他格式化输出函数）都会使用反射来分析它的 <code>...</code> 参数。</p><p><code>Printf()</code> 的函数声明为：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">Printf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>Printf()</code> 中的 <code>...</code> 参数为空接口类型。<code>Printf()</code> 使用反射包来解析这个参数列表。所以，<code>Printf()</code> 能够知道它每个参数的类型。因此格式化字符串中只有 <code>%d</code> 而没有 <code>%u</code> 和 <code>%ld</code>，因为它知道这个参数是 unsigned 还是 long。这也是为什么 <code>Print()</code> 和 <code>Println()</code> 在没有格式字符串的情况下还能如此漂亮地输出。</p>`,5)),a("p",null,[n[1]||(n[1]=s("为了让大家更加具体地了解 ")),n[2]||(n[2]=a("code",null,"Printf()",-1)),n[3]||(n[3]=s(" 中的反射，我们实现了一个简单的通用输出函数。其中使用了 type-switch 来推导参数类型，并根据类型来输出每个参数的值（这里用了 ")),p(t,{to:"/chapter-2/10.7.html"},{default:e(()=>n[0]||(n[0]=[s("10.7")])),_:1}),n[4]||(n[4]=s(" 节中练习 10.13 的部分代码）"))]),n[16]||(n[16]=o(`<p>示例 11.15 <a href="examples/chapter_11/print.go">print.go</a>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;os&quot;</span></span>
<span class="line">	<span class="token string">&quot;strconv&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Stringer <span class="token keyword">interface</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Celsius <span class="token builtin">float64</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>c Celsius<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> strconv<span class="token punctuation">.</span><span class="token function">FormatFloat</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token char">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; °C&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Day <span class="token builtin">int</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> dayName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;Monday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tuesday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Wednesday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Thursday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Friday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Saturday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Sunday&quot;</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>day Day<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> dayName<span class="token punctuation">[</span>day<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">print</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">for</span> i<span class="token punctuation">,</span> arg <span class="token operator">:=</span> <span class="token keyword">range</span> args <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">switch</span> a <span class="token operator">:=</span> arg<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// type switch</span></span>
<span class="line">			<span class="token keyword">case</span> Stringer<span class="token punctuation">:</span>	os<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">			<span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>		os<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">			<span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>	os<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></span>
<span class="line">			<span class="token comment">// more types</span></span>
<span class="line">			<span class="token keyword">default</span><span class="token punctuation">:</span>		os<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;???&quot;</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">Day</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;was&quot;</span><span class="token punctuation">,</span> <span class="token function">Celsius</span><span class="token punctuation">(</span><span class="token number">18.36</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// Tuesday was 18.4 °C</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),a("p",null,[n[6]||(n[6]=s("在 ")),p(t,{to:"/chapter-2/12.8.html"},{default:e(()=>n[5]||(n[5]=[s("12.8")])),_:1}),n[7]||(n[7]=s(" 节中我们将阐释 ")),n[8]||(n[8]=a("code",null,"fmt.Fprintf()",-1)),n[9]||(n[9]=s(" 是怎么运用同样的反射原则的。"))]),n[17]||(n[17]=a("h2",{id:"链接",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#链接"},[a("span",null,"链接")])],-1)),a("ul",null,[a("li",null,[p(t,{to:"/chapter-2/directory.html"},{default:e(()=>n[10]||(n[10]=[s("目录")])),_:1})]),a("li",null,[n[12]||(n[12]=s("上一节：")),p(t,{to:"/chapter-2/11.10.html"},{default:e(()=>n[11]||(n[11]=[s("反射包")])),_:1})]),a("li",null,[n[14]||(n[14]=s("下一节：")),p(t,{to:"/chapter-2/11.12.html"},{default:e(()=>n[13]||(n[13]=[s("接口和动态类型")])),_:1})])])])}const m=l(r,[["render",k],["__file","11.11.html.vue"]]),b=JSON.parse('{"path":"/chapter-2/11.11.html","title":"11.11 Printf() 和反射","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"11.11 Printf() 和反射","slug":"_11-11-printf-和反射","link":"#_11-11-printf-和反射","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-2/11.11.md"}');export{m as comp,b as data};
