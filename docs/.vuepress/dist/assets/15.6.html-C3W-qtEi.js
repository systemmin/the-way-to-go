import{_ as l,c,a as o,b as a,f as s,d as p,e,r as i,o as u}from"./app-DtITwm2S.js";const r={};function k(d,n){const t=i("RouteLink");return u(),c("div",null,[n[22]||(n[22]=o(`<h1 id="_15-6-用模板编写网页应用" tabindex="-1"><a class="header-anchor" href="#_15-6-用模板编写网页应用"><span>15.6 用模板编写网页应用</span></a></h1><p>以下程序是用 100 行以内代码实现可行的 wiki 网页应用，它由一组页面组成，用于阅读、编辑和保存。它是来自 Go 网站 codelab 的 wiki 制作教程，我所知的最好的 Go 教程之一，非常值得进行完整的实验，以见证并理解程序是如何被构建起来的（<a href="https://golang.org/doc/articles/wiki/" target="_blank" rel="noopener noreferrer">https://golang.org/doc/articles/wiki/</a>）。这里，我们将以自顶向下的视角，从整体上给出程序的补充说明。程序是网页服务器，它必须从命令行启动，监听某个端口，例如 8080。浏览器可以通过请求 URL 阅读 wiki 页面的内容，例如：<code>http://localhost:8080/view/page1</code>。</p><p>接着，页面的文本内容从一个文件中读取，并显示在网页中。它包含一个超链接，指向编辑页面（<code>http://localhost:8080/edit/page1</code>）。编辑页面将内容显示在一个文本域中，用户可以更改文本，点击“保存”按钮保存到对应的文件中。然后回到阅读页面显示更改后的内容。如果某个被请求阅读的页面不存在（例如：<code>http://localhost:8080/edit/page999</code>），程序可以作出识别，立即重定向到编辑页面，如此新的 wiki 页面就可以被创建并保存。</p><p>wiki 页面需要一个标题和文本内容，它在程序中被建模为如下结构体，Body 字段存放内容，由字节切片组成。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> Page <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	Title <span class="token builtin">string</span></span>
<span class="line">	Body  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了在可执行程序之外维护 wiki 页面内容，我们简单地使用了文本文件作为持久化存储。程序、必要的模板和文本文件可以在 <a href="examples/chapter_15/wiki">wiki</a> 中找到。</p><p>示例 15.12 <a href="examples/chapter_15/wiki/wiki.go">wiki.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;net/http&quot;</span></span>
<span class="line">	<span class="token string">&quot;io/ioutil&quot;</span></span>
<span class="line">	<span class="token string">&quot;log&quot;</span></span>
<span class="line">	<span class="token string">&quot;regexp&quot;</span></span>
<span class="line">	<span class="token string">&quot;text/template&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> lenPath <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token string">&quot;/view/&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> titleValidator <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">&quot;^[a-zA-Z0-9]+$&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> templates <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>template<span class="token punctuation">.</span>Template<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> err <span class="token builtin">error</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Page <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	Title <span class="token builtin">string</span></span>
<span class="line">	Body  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tmpl <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;edit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;view&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">{</span></span>
<span class="line">		templates<span class="token punctuation">[</span>tmpl<span class="token punctuation">]</span> <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span>tmpl <span class="token operator">+</span> <span class="token string">&quot;.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/view/&quot;</span><span class="token punctuation">,</span> <span class="token function">makeHandler</span><span class="token punctuation">(</span>viewHandler<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/edit/&quot;</span><span class="token punctuation">,</span> <span class="token function">makeHandler</span><span class="token punctuation">(</span>editHandler<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/save/&quot;</span><span class="token punctuation">,</span> <span class="token function">makeHandler</span><span class="token punctuation">(</span>saveHandler<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:8080&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;ListenAndServe: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">makeHandler</span><span class="token punctuation">(</span>fn <span class="token keyword">func</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> http<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		title <span class="token operator">:=</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">[</span>lenPath<span class="token punctuation">:</span><span class="token punctuation">]</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token operator">!</span>titleValidator<span class="token punctuation">.</span><span class="token function">MatchString</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			http<span class="token punctuation">.</span><span class="token function">NotFound</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span></span>
<span class="line">			<span class="token keyword">return</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token function">fn</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> title<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">viewHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> title <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	p<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">load</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// page not found</span></span>
<span class="line">		http<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token string">&quot;/edit/&quot;</span><span class="token operator">+</span>title<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusFound<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">return</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token function">renderTemplate</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;view&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">editHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> title <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	p<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">load</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		p <span class="token operator">=</span> <span class="token operator">&amp;</span>Page<span class="token punctuation">{</span>Title<span class="token punctuation">:</span> title<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token function">renderTemplate</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;edit&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">saveHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> title <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	body <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">FormValue</span><span class="token punctuation">(</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	p <span class="token operator">:=</span> <span class="token operator">&amp;</span>Page<span class="token punctuation">{</span>Title<span class="token punctuation">:</span> title<span class="token punctuation">,</span> Body<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">	err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">return</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token string">&quot;/view/&quot;</span><span class="token operator">+</span>title<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusFound<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">renderTemplate</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> tmpl <span class="token builtin">string</span><span class="token punctuation">,</span> p <span class="token operator">*</span>Page<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	err <span class="token operator">:=</span> templates<span class="token punctuation">[</span>tmpl<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> p<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Page<span class="token punctuation">)</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">	filename <span class="token operator">:=</span> p<span class="token punctuation">.</span>Title <span class="token operator">+</span> <span class="token string">&quot;.txt&quot;</span></span>
<span class="line">	<span class="token comment">// file created with read-write permissions for the current user only</span></span>
<span class="line">	<span class="token keyword">return</span> ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Body<span class="token punctuation">,</span> <span class="token number">0600</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">load</span><span class="token punctuation">(</span>title <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Page<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	filename <span class="token operator">:=</span> title <span class="token operator">+</span> <span class="token string">&quot;.txt&quot;</span></span>
<span class="line">	body<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Page<span class="token punctuation">{</span>Title<span class="token punctuation">:</span> title<span class="token punctuation">,</span> Body<span class="token punctuation">:</span> body<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们来通读代码：</p>`,9)),a("ul",null,[n[16]||(n[16]=o(`<li><p>首先导入必要的包。由于我们在构建网页服务器，<code>http</code> 当然是必须的。不过还导入了 <code>io/ioutil</code> 来方便地读写文件，<code>regexp</code> 用于验证输入标题，以及 <code>template</code> 来动态创建 html 文档。</p></li><li><p>为避免黑客构造特殊输入攻击服务器，我们用如下正则表达式检查用户在浏览器上输入的 URL（同时也是 wiki 页面标题）：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> titleValidator <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">&quot;^[a-zA-Z0-9]+$&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>makeHandler</code> 会用它对请求管控。</p></li><li><p>必须有一种机制把 <code>Page</code> 结构体数据插入到网页的标题和内容中，可以利用 <code>template</code> 包通过如下步骤完成：</p><ol><li>先在文本编辑器中创建 html 模板文件，例如 view.html：</li></ol><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{.Title |html}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>[<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/edit/{{.Title |html}}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>edit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{printf &quot;%s&quot; .Body |html}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把要插入的数据结构字段放在 <code>{{</code> 和 <code>}}</code> 之间，这里是把 <code>Page</code> 结构体数据 <code>{{.Title |html}}</code> 和 <code>{{printf &quot;%s&quot; .Body |html}}</code> 插入页面（当然可以是非常复杂的 html，但这里尽可能地简化了，以突出模板的原理。）（<code>{{.Title |html}}</code> 和 <code>{{printf &quot;%s&quot; .Body |html}}</code> 语法说明详见后续章节）。</p><ol start="2"><li><code>template.Must(template.ParseFiles(tmpl + &quot;.html&quot;))</code> 把模板文件转换为 <code>*template.Template</code> 类型的对象，为了高效，在程序运行时仅做一次解析，在 <code>init()</code> 函数中处理可以方便地达到目的。所有模板对象都被保持在内存中，存放在以 html 文件名作为索引的 <code>map</code> 中：</li></ol><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">templates <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>template<span class="token punctuation">.</span>Template<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这种技术被称为<em>模板缓存</em>，是推荐的最佳实践。</p><ol start="3"><li>为了真正从模板和结构体构建出页面，必须使用：</li></ol><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">templates<span class="token punctuation">[</span>tmpl<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> p<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它基于模板执行，用 <code>Page</code> 结构体对象 <code>p</code> 作为参数对模板进行替换，并写入 <code>ResponseWriter</code> 对象 <code>w</code>。必须检查该方法的 <code>error</code> 返回值，万一有一个或多个错误，我们可以调用 <code>http.Error()</code> 来明示。在我们的应用程序中，这段代码会被多次调用，所以把它提取为单独的函数 <code>renderTemplate()</code>。</p></li>`,3)),a("li",null,[a("p",null,[n[1]||(n[1]=s("在 ")),n[2]||(n[2]=a("code",null,"main()",-1)),n[3]||(n[3]=s(" 中网页服务器用 ")),n[4]||(n[4]=a("code",null,"ListenAndServe()",-1)),n[5]||(n[5]=s(" 启动并监听 8080 端口。但正如 ")),p(t,{to:"/chapter-3/15.2.html"},{default:e(()=>n[0]||(n[0]=[s("15.2节")])),_:1}),n[6]||(n[6]=s(" 那样，需要先为紧接在 URL ")),n[7]||(n[7]=a("code",null,"localhost:8080/",-1)),n[8]||(n[8]=s(" 之后， 以 ")),n[9]||(n[9]=a("code",null,"view",-1)),n[10]||(n[10]=s(", ")),n[11]||(n[11]=a("code",null,"edit",-1)),n[12]||(n[12]=s(" 或 ")),n[13]||(n[13]=a("code",null,"save",-1)),n[14]||(n[14]=s(" 开头的 url 路径定义一些处理函数。在大多数网页服务器应用程序中，这形成了一系列 URL 路径到处理函数的映射，类似于 Ruby 和 Rails，Django 或 ASP.NET MVC 这样的 MVC 框架中的路由表。请求的 URL 与这些路径尝试匹配，较长的路径被优先匹配。如不与任何路径匹配，则调用 / 的处理程序。"))]),n[15]||(n[15]=a("p",null,[s("在此定义了 3 个处理函数，由于包含重复的启动代码，我们将其提取到单独的 "),a("code",null,"makeHandler()"),s(" 函数中。这是一个值得研究的特殊高阶函数：其参数是一个函数，返回一个新的闭包函数：")],-1))])]),n[23]||(n[23]=o(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">makeHandler</span><span class="token punctuation">(</span>fn <span class="token keyword">func</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> http<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		title <span class="token operator">:=</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">[</span>lenPath<span class="token punctuation">:</span><span class="token punctuation">]</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token operator">!</span>titleValidator<span class="token punctuation">.</span><span class="token function">MatchString</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			http<span class="token punctuation">.</span><span class="token function">NotFound</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span></span>
<span class="line">			<span class="token keyword">return</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token function">fn</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> title<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>闭包封闭了函数变量 <code>fn</code> 来构造其返回值。但在此之前，它先用 <code>titleValidator.MatchString(title)</code> 验证输入标题 <code>title</code> 的有效性。如果标题包含了字母和数字以外的字符，就触发 <code>NotFound</code> 错误（例如：尝试 <code>localhost:8080/view/page++</code>）。<code>viewHandler</code>，<code>editHandler</code> 和 <code>saveHandler</code> 都是传入 <code>main()</code> 中 <code>makeHandler</code> 的参数，类型必须都与 <code>fn</code> 相同。</p></li><li><p><code>viewHandler</code> 尝试按标题读取文本文件，这是通过调用 <code>load()</code> 函数完成的，它会构建文件名并用 <code>ioutil.ReadFile</code> 读取内容。如果文件存在，其内容会存入字符串中。一个指向 <code>Page</code> 结构体的指针按字面量被创建：<code>&amp;Page{Title: title, Body: body}</code>。</p><p>另外，该值和表示没有 error 的 <code>nil</code> 值一起返回给调用者。然后在 <code>renderTemplate</code> 中将该结构体与模板对象整合。</p><p>万一发生错误，也就是说 wiki 页面在磁盘上不存在，错误会被返回给 <code>viewHandler</code>，此时会自动重定向，跳转请求对应标题的编辑页面。</p></li><li><p><code>editHandler</code> 基本上也差不多：尝试读取文件，如果存在则用“编辑”模板来渲染；万一发生错误，创建一个新的包含指定标题的 <code>Page</code> 对象并渲染。</p></li><li><p>当在编辑页面点击“保存”按钮时，触发保存页面内容的动作。按钮须放在 html 表单中，它开头是这样的：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/save/{{.Title |html}}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这意味着，当提交表单到类似 <code>http://localhost/save/{Title}</code> 这样的 URL 格式时，一个 POST 请求被发往网页服务器。针对这样的 URL 我们已经定义好了处理函数：<code>saveHandler()</code>。在 request 对象上调用 <code>FormValue()</code> 方法，可以提取名称为 body 的文本域内容，用这些信息构造一个 <code>Page</code> 对象，然后尝试通过调用 <code>save()</code> 方法保存其内容。万一运行失败，执行 <code>http.Error</code> 以将错误显示到浏览器。如果保存成功，重定向浏览器到该页的阅读页面。<code>save()</code> 函数非常简单，利用 <code>ioutil.WriteFile()</code>，写入 <code>Page</code> 结构体的 <code>Body</code> 字段到文件 <code>filename</code> 中，之后会被用于模板替换占位符 <code>{{printf &quot;%s&quot; .Body |html}}</code>。</p></li></ul><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,3)),a("ul",null,[a("li",null,[p(t,{to:"/chapter-3/directory.html"},{default:e(()=>n[17]||(n[17]=[s("目录")])),_:1})]),a("li",null,[n[19]||(n[19]=s("上一节：")),p(t,{to:"/chapter-3/15.5.html"},{default:e(()=>n[18]||(n[18]=[s("确保网页应用健壮")])),_:1})]),a("li",null,[n[21]||(n[21]=s("下一节：")),p(t,{to:"/chapter-3/15.7.html"},{default:e(()=>n[20]||(n[20]=[s("探索 template 包")])),_:1})])])])}const m=l(r,[["render",k],["__file","15.6.html.vue"]]),b=JSON.parse('{"path":"/chapter-3/15.6.html","title":"15.6 用模板编写网页应用","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"15.6 用模板编写网页应用","slug":"_15-6-用模板编写网页应用","link":"#_15-6-用模板编写网页应用","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-3/15.6.md"}');export{m as comp,b as data};
