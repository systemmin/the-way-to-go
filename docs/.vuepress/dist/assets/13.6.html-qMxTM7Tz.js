import{_ as o,c as l,a as c,b as a,d as t,e,f as s,r as i,o as u}from"./app-DtITwm2S.js";const r={};function k(d,n){const p=i("RouteLink");return u(),l("div",null,[n[5]||(n[5]=c(`<h1 id="_13-6-启动外部命令和程序" tabindex="-1"><a class="header-anchor" href="#_13-6-启动外部命令和程序"><span>13.6 启动外部命令和程序</span></a></h1><p><code>os</code> 包有一个 <code>StartProcess</code> 函数可以调用或启动外部系统命令和二进制可执行文件；它的第一个参数是要运行的进程，第二个参数用来传递选项或参数，第三个参数是含有系统环境基本信息的结构体。</p><p>这个函数返回被启动进程的 id (pid)，或者启动失败返回错误。</p><p><code>exec</code> 包中也有同样功能的更简单的结构体和函数；主要是 <code>exec.Command(name string, arg ...string)</code> 和 <code>Run()</code>。首先需要用系统命令或可执行文件的名字创建一个 <code>Command</code> 对象，然后用这个对象作为接收者调用 <code>Run()</code>。下面的程序（因为是执行 Linux 命令，只能在 Linux 下面运行）演示了它们的使用：</p><p>示例 13.6 <a href="examples/chapter_13/exec.go">exec.go</a>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// exec.go</span></span>
<span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">    <span class="token string">&quot;os/exec&quot;</span></span>
<span class="line">	<span class="token string">&quot;os&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">// 1) os.StartProcess //</span></span>
<span class="line"><span class="token comment">/*********************/</span></span>
<span class="line"><span class="token comment">/* Linux: */</span></span>
<span class="line">env <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Environ</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">procAttr <span class="token operator">:=</span> <span class="token operator">&amp;</span>os<span class="token punctuation">.</span>ProcAttr<span class="token punctuation">{</span></span>
<span class="line">			Env<span class="token punctuation">:</span> env<span class="token punctuation">,</span></span>
<span class="line">			Files<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">{</span></span>
<span class="line">				os<span class="token punctuation">.</span>Stdin<span class="token punctuation">,</span></span>
<span class="line">				os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span></span>
<span class="line">				os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span></span>
<span class="line">			<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 1st example: list files</span></span>
<span class="line">pid<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">StartProcess</span><span class="token punctuation">(</span><span class="token string">&quot;/bin/ls&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-l&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> procAttr<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error %v starting process!&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token comment">//</span></span>
<span class="line">		os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The process id is %v&quot;</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">The process id is <span class="token operator">&amp;</span><span class="token punctuation">{</span><span class="token number">2054</span> <span class="token number">0</span><span class="token punctuation">}</span>total <span class="token number">2056</span></span>
<span class="line"><span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">1</span> ivo ivo <span class="token number">1157555</span> <span class="token number">2011</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">48</span> Mieken_exec</span>
<span class="line"><span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> ivo ivo    <span class="token number">2124</span> <span class="token number">2011</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">48</span> Mieken_exec<span class="token punctuation">.</span><span class="token keyword">go</span></span>
<span class="line"><span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> ivo ivo   <span class="token number">18528</span> <span class="token number">2011</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">48</span> Mieken_exec_go_<span class="token punctuation">.</span><span class="token number">6</span></span>
<span class="line"><span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">1</span> ivo ivo  <span class="token number">913920</span> <span class="token number">2011</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token builtin">panic</span><span class="token punctuation">.</span>exe</span>
<span class="line"><span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> ivo ivo     <span class="token number">180</span> <span class="token number">2011</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">39</span> <span class="token builtin">panic</span><span class="token punctuation">.</span><span class="token keyword">go</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 2nd example: show all processes</span></span>
<span class="line">pid<span class="token punctuation">,</span> err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">StartProcess</span><span class="token punctuation">(</span><span class="token string">&quot;/bin/ps&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;ps&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-e&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-opid,ppid,comm&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> procAttr<span class="token punctuation">)</span>  </span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error %v starting process!&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token comment">//</span></span>
<span class="line">		os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The process id is %v&quot;</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 2) exec.Run //</span></span>
<span class="line"><span class="token comment">/***************/</span></span>
<span class="line"><span class="token comment">// Linux:  OK, but not for ls ?</span></span>
<span class="line"><span class="token comment">// cmd := exec.Command(&quot;ls&quot;, &quot;-l&quot;)  // no error, but doesn&#39;t show anything ?</span></span>
<span class="line"><span class="token comment">// cmd := exec.Command(&quot;ls&quot;)  		// no error, but doesn&#39;t show anything ?</span></span>
<span class="line">	cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">&quot;gedit&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// this opens a gedit-window</span></span>
<span class="line">	err <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error %v executing command!&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">		os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The command is %v&quot;</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// The command is &amp;{/bin/ls [ls -l] []  &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; 0xf840000210 &lt;nil&gt; true [0xf84000ea50 0xf84000e9f0 0xf84000e9c0] [0xf84000ea50 0xf84000e9f0 0xf84000e9c0] [] [] 0xf8400128c0}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// in Windows: uitvoering: Error fork/exec /bin/ls: The system cannot find the path specified. starting process!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,11)),a("ul",null,[a("li",null,[t(p,{to:"/chapter-3/directory.html"},{default:e(()=>n[0]||(n[0]=[s("目录")])),_:1})]),a("li",null,[n[2]||(n[2]=s("上一节：")),t(p,{to:"/chapter-3/13.5.html"},{default:e(()=>n[1]||(n[1]=[s("一种用闭包处理错误的模式")])),_:1})]),a("li",null,[n[4]||(n[4]=s("下一节：")),t(p,{to:"/chapter-3/13.7.html"},{default:e(()=>n[3]||(n[3]=[s("Go 中的单元测试和基准测试")])),_:1})])])])}const v=o(r,[["render",k],["__file","13.6.html.vue"]]),b=JSON.parse('{"path":"/chapter-3/13.6.html","title":"13.6 启动外部命令和程序","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"13.6 启动外部命令和程序","slug":"_13-6-启动外部命令和程序","link":"#_13-6-启动外部命令和程序","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-3/13.6.md"}');export{v as comp,b as data};
