import{_ as o,c as i,a as l,b as a,f as s,d as t,e as p,r as c,o as u}from"./app-DtITwm2S.js";const r={};function d(k,n){const e=c("RouteLink");return u(),i("div",null,[n[24]||(n[24]=l(`<h1 id="_11-9-空接口" tabindex="-1"><a class="header-anchor" href="#_11-9-空接口"><span>11.9 空接口</span></a></h1><h2 id="_11-9-1-概念" tabindex="-1"><a class="header-anchor" href="#_11-9-1-概念"><span>11.9.1 概念</span></a></h2><p><strong>空接口或者最小接口</strong> 不包含任何方法，它对实现不做任何要求：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> Any <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>任何其他类型都实现了空接口（它不仅仅像 <code>Java/C#</code> 中 <code>Object</code> 引用类型），<code>any</code> 或 <code>Any</code> 是空接口一个很好的别名或缩写。</p><p>空接口类似 <code>Java/C#</code> 中所有类的基类： <code>Object</code> 类，二者的目标也很相近。</p><p>可以给一个空接口类型的变量 <code>var val interface {}</code> 赋任何类型的值。</p><p>示例 11.8 <a href="examples/chapter_11/empty_interface.go">empty_interface.go</a>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;ABC&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	name <span class="token builtin">string</span></span>
<span class="line">	age  <span class="token builtin">int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Any <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> val Any</span>
<span class="line">	val <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;val has the value: %v\\n&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span></span>
<span class="line">	val <span class="token operator">=</span> str</span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;val has the value: %v\\n&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span></span>
<span class="line">	pers1 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span></span>
<span class="line">	pers1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Rob Pike&quot;</span></span>
<span class="line">	pers1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">55</span></span>
<span class="line">	val <span class="token operator">=</span> pers1</span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;val has the value: %v\\n&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">switch</span> t <span class="token operator">:=</span> val<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Type int %T\\n&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Type string %T\\n&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">:</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Type boolean %T\\n&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">case</span> <span class="token operator">*</span>Person<span class="token punctuation">:</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Type pointer to Person %T\\n&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected type %T&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><pre><code>val has the value: 5
val has the value: ABC
val has the value: &amp;{Rob Pike 55}
Type pointer to Person *main.Person
</code></pre><p>在上面的例子中，接口变量 <code>val</code> 被依次赋予一个 <code>int</code>，<code>string</code> 和 <code>Person</code> 实例的值，然后使用 <code>type-switch</code> 来测试它的实际类型。每个 <code>interface {}</code> 变量在内存中占据两个字长：一个用来存储它包含的类型，另一个用来存储它包含的数据或者指向数据的指针。</p><p>示例 <a href="examples/chapter_11/emptyint_switch.go">emptyint_switch.go</a> 说明了空接口在 <code>type-switch</code> 中联合 <code>lambda</code> 函数的用法：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> specialString <span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> whatIsThis specialString <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">TypeSwitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	testFunc <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>any <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">switch</span> v <span class="token operator">:=</span> any<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">:</span></span>
<span class="line">			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;any %v is a bool type&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span></span>
<span class="line">			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;any %v is an int type&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">case</span> <span class="token builtin">float32</span><span class="token punctuation">:</span></span>
<span class="line">			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;any %v is a float32 type&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span></span>
<span class="line">			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;any %v is a string type&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">case</span> specialString<span class="token punctuation">:</span></span>
<span class="line">			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;any %v is a special String!&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;unknown type!&quot;</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token function">testFunc</span><span class="token punctuation">(</span>whatIsThis<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">TypeSwitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><pre><code>any hello is a special String!
</code></pre><p><strong>练习 11.9</strong> <a href="exercises/chapter_11/simple_interface3.go">simple_interface3.go</a>：</p><p>继续练习 11.2，在它中添加一个 <code>gI()</code> 函数，它不再接受 <code>Simpler</code> 类型的参数，而是接受一个空接口参数。然后通过类型断言判断参数是否是 <code>Simpler</code> 类型。最后在 <code>main</code> 使用 <code>gI()</code> 取代 <code>fI()</code> 函数并调用它。确保你的代码足够安全。</p><h2 id="_11-9-2-构建通用类型或包含不同类型变量的数组" tabindex="-1"><a class="header-anchor" href="#_11-9-2-构建通用类型或包含不同类型变量的数组"><span>11.9.2 构建通用类型或包含不同类型变量的数组</span></a></h2>`,19)),a("p",null,[n[1]||(n[1]=s("在 ")),t(e,{to:"/chapter-2/07.6.html"},{default:p(()=>n[0]||(n[0]=[s("7.6.6")])),_:1}),n[2]||(n[2]=s(" 中我们看到了能被搜索和排序的 ")),n[3]||(n[3]=a("code",null,"int",-1)),n[4]||(n[4]=s(" 数组、")),n[5]||(n[5]=a("code",null,"float",-1)),n[6]||(n[6]=s(" 数组以及 ")),n[7]||(n[7]=a("code",null,"string",-1)),n[8]||(n[8]=s(" 数组，那么对于其他类型的数组呢，是不是我们必须得自己编程实现它们？"))]),n[25]||(n[25]=l(`<p>现在我们知道该怎么做了，就是通过使用空接口。让我们给空接口定一个别名类型 <code>Element</code>：<code>type Element interface{}</code></p><p>然后定义一个容器类型的结构体 <code>Vector</code>，它包含一个 <code>Element</code> 类型元素的切片：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> Vector <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	a <span class="token punctuation">[</span><span class="token punctuation">]</span>Element</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Vector</code> 里能放任何类型的变量，因为任何类型都实现了空接口，实际上 <code>Vector</code> 里放的每个元素可以是不同类型的变量。我们为它定义一个 <code>At()</code> 方法用于返回第 <code>i</code> 个元素：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Vector<span class="token punctuation">)</span> <span class="token function">At</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> Element <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> p<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再定一个 <code>Set()</code> 方法用于设置第 <code>i</code> 个元素的值：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Vector<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> e Element<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	p<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Vector</code> 中存储的所有元素都是 <code>Element</code> 类型，要得到它们的原始类型（unboxing：拆箱）需要用到类型断言。TODO：The compiler rejects assertions guaranteed to fail，类型断言总是在运行时才执行，因此它会产生运行时错误。</p><p><strong>练习 11.10</strong> <a href="exercises/chapter_11/min_interface.go">min_interface.go</a> / <a href="exercises/chapter_11/minmain.go">minmain.go</a>：</p><p>仿照 11.7 中开发的 <code>Sorter</code> 接口，创建一个 <code>Miner</code> 接口并实现一些必要的操作。函数 <code>Min()</code> 接受一个 <code>Miner</code> 类型变量的集合，然后计算并返回集合中最小的元素。</p><h2 id="_11-9-3-复制数据切片至空接口切片" tabindex="-1"><a class="header-anchor" href="#_11-9-3-复制数据切片至空接口切片"><span>11.9.3 复制数据切片至空接口切片</span></a></h2><p>假设你有一个 <code>myType</code> 类型的数据切片，你想将切片中的数据复制到一个空接口切片中，类似：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> dataSlice <span class="token punctuation">[</span><span class="token punctuation">]</span>myType <span class="token operator">=</span> <span class="token function">FuncReturnSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> interfaceSlice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> dataSlice</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可惜不能这么做，编译时会出错：<code>cannot use dataSlice (type []myType) as type []interface { } in assignment</code>。</p><p>原因是它们俩在内存中的布局是不一样的（参考 <a href="https://github.com/golang/go/wiki/InterfaceSlice" target="_blank" rel="noopener noreferrer">Go wiki</a>）。</p><p>必须使用 <code>for-range</code> 语句来一个一个显式地赋值：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> dataSlice <span class="token punctuation">[</span><span class="token punctuation">]</span>myType <span class="token operator">=</span> <span class="token function">FuncReturnSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> interfaceSlice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>dataSlice<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> i<span class="token punctuation">,</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> dataSlice <span class="token punctuation">{</span></span>
<span class="line">    interfaceSlice<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> d</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-9-4-通用类型的节点数据结构" tabindex="-1"><a class="header-anchor" href="#_11-9-4-通用类型的节点数据结构"><span>11.9.4 通用类型的节点数据结构</span></a></h2>`,18)),a("p",null,[n[10]||(n[10]=s("在 ")),t(e,{to:"/chapter-2/10.1.html"},{default:p(()=>n[9]||(n[9]=[s("10.1")])),_:1}),n[11]||(n[11]=s(" 中我们遇到了诸如列表和树这样的数据结构，在它们的定义中使用了一种叫节点的递归结构体类型，节点包含一个某种类型的数据字段。现在可以使用空接口作为数据字段的类型，这样我们就能写出通用的代码。下面是实现一个二叉树的部分代码：通用定义、用于创建空节点的 ")),n[12]||(n[12]=a("code",null,"NewNode",-1)),n[13]||(n[13]=s(" 方法，及设置数据的 ")),n[14]||(n[14]=a("code",null,"SetData",-1)),n[15]||(n[15]=s(" 方法。"))]),n[26]||(n[26]=l(`<p>示例 11.10 <a href="examples/chapter_11/node_structures.go">node_structures.go</a>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Node <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	le   <span class="token operator">*</span>Node</span>
<span class="line">	data <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">	ri   <span class="token operator">*</span>Node</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">NewNode</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">{</span>left<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> right<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token function">SetData</span><span class="token punctuation">(</span>data <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	n<span class="token punctuation">.</span>data <span class="token operator">=</span> data</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	root <span class="token operator">:=</span> <span class="token function">NewNode</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">	root<span class="token punctuation">.</span><span class="token function">SetData</span><span class="token punctuation">(</span><span class="token string">&quot;root node&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token comment">// make child (leaf) nodes:</span></span>
<span class="line">	a <span class="token operator">:=</span> <span class="token function">NewNode</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">	a<span class="token punctuation">.</span><span class="token function">SetData</span><span class="token punctuation">(</span><span class="token string">&quot;left node&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	b <span class="token operator">:=</span> <span class="token function">NewNode</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">	b<span class="token punctuation">.</span><span class="token function">SetData</span><span class="token punctuation">(</span><span class="token string">&quot;right node&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	root<span class="token punctuation">.</span>le <span class="token operator">=</span> a</span>
<span class="line">	root<span class="token punctuation">.</span>ri <span class="token operator">=</span> b</span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%v\\n&quot;</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span> <span class="token comment">// Output: &amp;{0x125275f0 root node 0x125275e0}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-9-5-接口到接口" tabindex="-1"><a class="header-anchor" href="#_11-9-5-接口到接口"><span>11.9.5 接口到接口</span></a></h2><p>一个接口的值可以赋值给另一个接口变量，只要底层类型实现了必要的方法。这个转换是在运行时进行检查的，转换失败会导致一个运行时错误：这是 <code>Go</code> 语言动态的一面，可以拿它和 <code>Ruby</code> 和 <code>Python</code> 这些动态语言相比较。</p><p>假定：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> ai AbsInterface <span class="token comment">// declares method Abs()</span></span>
<span class="line"><span class="token keyword">type</span> SqrInterface <span class="token keyword">interface</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Sqr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> float</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> si SqrInterface</span>
<span class="line">pp <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Point<span class="token punctuation">)</span> <span class="token comment">// say *Point implements Abs, Sqr</span></span>
<span class="line"><span class="token keyword">var</span> empty <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么下面的语句和类型断言是合法的：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">empty <span class="token operator">=</span> pp                <span class="token comment">// everything satisfies empty</span></span>
<span class="line">ai <span class="token operator">=</span> empty<span class="token punctuation">.</span><span class="token punctuation">(</span>AbsInterface<span class="token punctuation">)</span> <span class="token comment">// underlying value pp implements Abs()</span></span>
<span class="line"><span class="token comment">// (runtime failure otherwise)</span></span>
<span class="line">si <span class="token operator">=</span> ai<span class="token punctuation">.</span><span class="token punctuation">(</span>SqrInterface<span class="token punctuation">)</span> <span class="token comment">// *Point has Sqr() even though AbsInterface doesn’t</span></span>
<span class="line">empty <span class="token operator">=</span> si             <span class="token comment">// *Point implements empty set</span></span>
<span class="line"><span class="token comment">// Note: statically checkable so type assertion not necessary.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是函数调用的一个例子：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> myPrintInterface <span class="token keyword">interface</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">f3</span><span class="token punctuation">(</span>x myInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	x<span class="token punctuation">.</span><span class="token punctuation">(</span>myPrintInterface<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// type assertion to myPrintInterface</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)),a("p",null,[n[17]||(n[17]=l("<code>x</code> 转换为 <code>myPrintInterface</code> 类型是完全动态的：只要 <code>x</code> 的底层类型（动态类型）定义了 <code>print</code> 方法这个调用就可以正常运行（译注：若 <code>x</code> 的底层类型未定义 <code>print</code> 方法，此处类型断言会导致 <code>panic</code>，最佳实践应该为 <code>if mpi, ok := x.(myPrintInterface); ok { mpi.print() }</code>，参考 ",16)),t(e,{to:"/chapter-2/11.3.html"},{default:p(()=>n[16]||(n[16]=[s("11.3")])),_:1}),n[18]||(n[18]=s(" 章节）。"))]),n[27]||(n[27]=a("h2",{id:"链接",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#链接"},[a("span",null,"链接")])],-1)),a("ul",null,[a("li",null,[t(e,{to:"/chapter-2/directory.html"},{default:p(()=>n[19]||(n[19]=[s("目录")])),_:1})]),a("li",null,[n[21]||(n[21]=s("上一节：")),t(e,{to:"/chapter-2/11.8.html"},{default:p(()=>n[20]||(n[20]=[s("第二个例子：读和写")])),_:1})]),a("li",null,[n[23]||(n[23]=s("下一节：")),t(e,{to:"/chapter-2/11.10.html"},{default:p(()=>n[22]||(n[22]=[s("反射包")])),_:1})])])])}const m=o(r,[["render",d],["__file","11.9.html.vue"]]),b=JSON.parse('{"path":"/chapter-2/11.9.html","title":"11.9 空接口","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"11.9 空接口","slug":"_11-9-空接口","link":"#_11-9-空接口","children":[{"level":2,"title":"11.9.1 概念","slug":"_11-9-1-概念","link":"#_11-9-1-概念","children":[]},{"level":2,"title":"11.9.2 构建通用类型或包含不同类型变量的数组","slug":"_11-9-2-构建通用类型或包含不同类型变量的数组","link":"#_11-9-2-构建通用类型或包含不同类型变量的数组","children":[]},{"level":2,"title":"11.9.3 复制数据切片至空接口切片","slug":"_11-9-3-复制数据切片至空接口切片","link":"#_11-9-3-复制数据切片至空接口切片","children":[]},{"level":2,"title":"11.9.4 通用类型的节点数据结构","slug":"_11-9-4-通用类型的节点数据结构","link":"#_11-9-4-通用类型的节点数据结构","children":[]},{"level":2,"title":"11.9.5 接口到接口","slug":"_11-9-5-接口到接口","link":"#_11-9-5-接口到接口","children":[]},{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-2/11.9.md"}');export{m as comp,b as data};
