import{_ as l,c as i,a as o,b as a,f as s,d as t,e as p,r as c,o as u}from"./app-DtITwm2S.js";const d={};function r(k,n){const e=c("RouteLink");return u(),i("div",null,[n[61]||(n[61]=o('<h1 id="版本-1-数据结构和前端界面" tabindex="-1"><a class="header-anchor" href="#版本-1-数据结构和前端界面"><span>版本 1 - 数据结构和前端界面</span></a></h1><p>第 1 个版本的代码 <em>goto_v1</em> 见 <a href="examples/chapter_19/goto_v1">goto_v1</a>。</p><h1 id="_19-3-数据结构" tabindex="-1"><a class="header-anchor" href="#_19-3-数据结构"><span>19.3 数据结构</span></a></h1><p>（本节代码见 <a href="examples/chapter_19/goto_v1/store.go">goto_v1/store.go</a>。）</p>',4)),a("p",null,[n[1]||(n[1]=s("当程序运行在生产环境时，会收到很多短网址的请求，同时会有一些将长 URL 转换成短 URL 的请求。我们的程序要以什么样的结构存储这些数据呢？")),t(e,{to:"/chapter-4/19.2.html"},{default:p(()=>n[0]||(n[0]=[s("19.2 节")])),_:1}),n[2]||(n[2]=s("中 (A) 和 (B) 两种 URL 都是字符串，此外，它们相互关联：给定键 (B) 能获取到值 (A)，他们互相")),n[3]||(n[3]=a("em",null,"映射",-1)),n[4]||(n[4]=s(" (map)。要将数据存储在内存中，我们需要这种结构，它们几乎存在于所有的编程语言中，只是名称有所不同，例如“哈希表”或“字典”等。"))]),n[62]||(n[62]=a("p",null,[s("Go 语言就有这种内建的映射 (map)："),a("code",null,"map[string]string"),s("。")],-1)),a("p",null,[n[6]||(n[6]=s("键的类型写在 ")),n[7]||(n[7]=a("code",null,"[",-1)),n[8]||(n[8]=s(" 和 ")),n[9]||(n[9]=a("code",null,"]",-1)),n[10]||(n[10]=s(" 之间，紧接着是值的类型。有关映射的所有知识详见 ")),t(e,{to:"/chapter-4/08.0.html"},{default:p(()=>n[5]||(n[5]=[s("8 章")])),_:1}),n[11]||(n[11]=s("。为特定类型指定一个别名在严谨的程序中非常实用。Go 语言中通过关键字 ")),n[12]||(n[12]=a("code",null,"type",-1)),n[13]||(n[13]=s(" 来定义，因此有定义："))]),n[63]||(n[63]=o(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> URLStore <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它从短 URL 映射到长 URL，两者都是字符串。</p><p>要创建那种类型的变量，并命名为 <code>m</code>，使用：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>URLStore<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>假设 <em>http://goto/a</em> 映射到 <em>http://google.com/</em> ，我们要把它们存储到 m 中，可以用如下语句：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">m<span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;http://google.com/&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（键只是 <em>http://goto/</em> 的后缀，其前缀总是不变的。）</p><p>要获得给定 &quot;a&quot; 对应的长 URL，可以这么写：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">url <span class="token operator">:=</span> m<span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时 <code>url</code> 的值等于 <code>http://google.com/</code>。</p><p>注意，使用了 <code>:=</code> 就不需要指明 url 的类型为 <code>string</code>，编译器会从右侧的值中推断出来。</p><h2 id="使程序线程安全" tabindex="-1"><a class="header-anchor" href="#使程序线程安全"><span>使程序线程安全</span></a></h2>`,12)),a("p",null,[n[15]||(n[15]=o("这里，变量 <code>URLStore</code> 是中心化的内存存储。当收到网络流量时，会有很多 <code>Redirect</code> 服务的请求。这些请求其实只涉及读操作：以给定的短 URL 作为键，返回对应的长 URL 的值。然而，对 <code>Add</code> 服务的请求则大不相同，它们会更改 <code>URLStore</code>，添加新的键值对。当在瞬间收到大量更新请求时，可能会产生如下问题：添加操作可能被另一个同类请求打断，写入的长 URL 值可能会丢失；另外，读取和更改同时进行，导致可能读到脏数据。代码中的 <code>map</code> 并不保证当开始更新数据时，会彻底阻止另一个更新操作的启动。也就是说，<code>map</code> 不是线程安全的，goto 会并发地为很多请求提供服务。因此必须使 <code>URLStore</code> 是线程安全的，以便可以从不同的线程访问它。最简单和经典的方法是为其增加一个锁，它是 Go 标准库 <code>sync</code> 包中的 <code>Mutex</code> 类型，必须导入到我们的代码中（关于锁详见 ",19)),t(e,{to:"/chapter-4/09.3.html"},{default:p(()=>n[14]||(n[14]=[s("9.3 节")])),_:1}),n[16]||(n[16]=s("）。"))]),a("p",null,[n[18]||(n[18]=s("现在，我们把 ")),n[19]||(n[19]=a("code",null,"URLStore",-1)),n[20]||(n[20]=s(" 类型的定义更改为一个结构体（就是字段的集合，类似 C 或 Java ，")),t(e,{to:"/chapter-4/10.0.html"},{default:p(()=>n[17]||(n[17]=[s("10 章")])),_:1}),n[21]||(n[21]=s(" 介绍了结构体），它含有两个字段：")),n[22]||(n[22]=a("code",null,"map",-1)),n[23]||(n[23]=s(" 和 ")),n[24]||(n[24]=a("code",null,"sync",-1)),n[25]||(n[25]=s(" 包的 ")),n[26]||(n[26]=a("code",null,"RWMutex",-1)),n[27]||(n[27]=s("："))]),n[64]||(n[64]=o(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string">&quot;sync&quot;</span></span>
<span class="line"><span class="token keyword">type</span> URLStore <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	urls <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>		<span class="token comment">// map from short to long URLs</span></span>
<span class="line">	mu sync<span class="token punctuation">.</span>RWMutex</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>RWMutex</code> 有两种锁：分别对应读和写。多个客户端可以同时设置读锁，但只有一个客户端可以设置写锁（以排除所有的读锁），有效地串行化变更，使他们按顺序生效。</p><p>我们将在 <code>Get()</code> 函数中实现 <code>Redirect</code> 服务的读请求，在 <code>Set</code> 函数中实现 <code>Add</code> 服务的写请求。<code>Get()</code> 函数类似下面这样：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	url <span class="token operator">:=</span> s<span class="token punctuation">.</span>urls<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span>
<span class="line">	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> url</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),a("p",null,[n[29]||(n[29]=s("函数按照键（短 URL）返回对应映射后的 URL。它所处理的变量是指针类型（见 ")),t(e,{to:"/chapter-4/04.9.html"},{default:p(()=>n[28]||(n[28]=[s("4.9 节")])),_:1}),n[30]||(n[30]=s("），指向 ")),n[31]||(n[31]=a("code",null,"URLStore",-1)),n[32]||(n[32]=s("。但在读取值之前，先用 ")),n[33]||(n[33]=a("code",null,"s.mu.RLock()",-1)),n[34]||(n[34]=s(" 放置一个读锁，这样就不会有更新操作妨碍读取。数据读取后撤销锁定，以便挂起的更新操作可以开始。如果键不存在于 map 中会怎样？会返回字符串的零值（空字符串）。注意点号 (")),n[35]||(n[35]=a("code",null,".",-1)),n[36]||(n[36]=s(") 类似面向对象的语言：在 ")),n[37]||(n[37]=a("code",null,"s",-1)),n[38]||(n[38]=s(" 的 ")),n[39]||(n[39]=a("code",null,"mu",-1)),n[40]||(n[40]=s(" 字段上调用方法 ")),n[41]||(n[41]=a("code",null,"RLock()",-1)),n[42]||(n[42]=s("。"))]),n[65]||(n[65]=o(`<p><code>Set()</code> 函数同时需要 URL 的键值对，且必须放置写锁 <code>Lock()</code> 来排除同一时刻任何其他更新操作。函数返回布尔值 <code>true</code> 或 <code>false</code> 来表示 <code>Set()</code> 操作是否成功：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token boolean">_</span><span class="token punctuation">,</span> present <span class="token operator">:=</span> s<span class="token punctuation">.</span>urls<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span>
<span class="line">	<span class="token keyword">if</span> present <span class="token punctuation">{</span></span>
<span class="line">		s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	s<span class="token punctuation">.</span>urls<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> url</span>
<span class="line">	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>形式 <code>_, present := s.urls[key]</code> 可以测试 <code>map</code> 中是否已经包含该键，包含则 <code>present</code> 为 <code>true</code>，否则为 <code>false</code>。这种形式称为“逗号 ok 模式”，在 Go 代码中会频繁出现。如果键已存在，<code>Set()</code> 函数直接返回布尔值 <code>false</code>，<code>map</code> 不会被更新（这样可以保证短 URL 不会重复）。如果键不存在，把它加入 <code>map</code> 中并返回 <code>true</code>。左侧 <code>_</code> 是一个值的占位符，赋值给 <code>_</code> 来表明我们不会使用它。注意在更新后尽早调用 <code>Unlock()</code> 来释放对 <code>URLStore</code> 的锁定。</p><h2 id="使用-defer-简化代码" tabindex="-1"><a class="header-anchor" href="#使用-defer-简化代码"><span>使用 defer 简化代码</span></a></h2>`,4)),a("p",null,[n[44]||(n[44]=s("目前代码还比较简单，容易记得操作完成后调用 ")),n[45]||(n[45]=a("code",null,"Unlock()",-1)),n[46]||(n[46]=s(" 解锁。然而在代码更复杂时很容易忘记解锁，或者放置在错误的位置，往往导致问题很难追踪。对于这种情况 Go 提供了一个特殊关键字 ")),n[47]||(n[47]=a("code",null,"defer",-1)),n[48]||(n[48]=s("（见 ")),t(e,{to:"/chapter-4/06.4.html"},{default:p(()=>n[43]||(n[43]=[s("6.4 节")])),_:1}),n[49]||(n[49]=s("）。在本例中，可以在 ")),n[50]||(n[50]=a("code",null,"Lock()",-1)),n[51]||(n[51]=s(" 之后立即示意 ")),n[52]||(n[52]=a("code",null,"Unlock()",-1)),n[53]||(n[53]=s("，不过其效果是 ")),n[54]||(n[54]=a("code",null,"Unlock()",-1)),n[55]||(n[55]=s(" 只会在函数返回之前被调用。"))]),n[66]||(n[66]=o(`<p><code>Get()</code> 可以简化成以下代码（我们消除了本地变量 <code>url</code>）：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">defer</span> s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> s<span class="token punctuation">.</span>urls<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Set()</code> 的逻辑在某种程度上也变得清晰了（我们不用再考虑解锁的事了）：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">defer</span> s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token boolean">_</span><span class="token punctuation">,</span> present <span class="token operator">:=</span> s<span class="token punctuation">.</span>urls<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span>
<span class="line">	<span class="token keyword">if</span> present <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	s<span class="token punctuation">.</span>urls<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> url</span>
<span class="line">	<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="urlstore-工厂函数" tabindex="-1"><a class="header-anchor" href="#urlstore-工厂函数"><span>URLStore 工厂函数</span></a></h2><p><code>URLStore()</code> 结构体中包含 <code>map</code> 类型的字段，使用前必须先用 <code>make()</code> 初始化。在 Go 中创建一个结构体实例，一般是通过定义一个前缀为 <code>New</code>，能返回该类型已初始化实例的函数（通常是指向实例的指针）。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">NewURLStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>URLStore <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>URLStore<span class="token punctuation">{</span> urls<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>return</code> 语句中，创建了 <code>URLStore</code> 字面量实例，其中包含初始化了的 <code>map</code> 映射。锁无需特别指明初始化，这是 Go 创建结构体实例的惯例。<code>&amp;</code> 是取址运算符，它将我们要返回的内容变成指针，因为 <code>NewURLStore()</code> 返回类型是 <code>*URLStore</code>。然后调用该函数来创建 <code>URLStore</code> 变量：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> store <span class="token operator">=</span> <span class="token function">NewURLStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="使用-urlstore" tabindex="-1"><a class="header-anchor" href="#使用-urlstore"><span>使用 URLStore</span></a></h2><p>要新增一对短/长 URL 到 <code>map</code> 中，我们只需调用 <code>s</code> 上的 <code>Set()</code> 方法，由于返回布尔值，可以把它包裹在 <code>if</code> 语句中：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://google.com&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 成功</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要获取给定短 URL 对应的长 URL，调用 <code>s</code> 上的 <code>Get()</code> 方法，将返回值放入变量 <code>url</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> url <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> url <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 重定向到 url</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 键未找到</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们利用 Go 语言 <code>if</code> 语句的特性，可以在起始部分、条件判断前放置初始化语句。另外还需要一个 <code>Count()</code> 方法以获取 <code>map</code> 中键值对的数量，可以使用内建的 <code>len()</code> 函数：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span></span>
<span class="line">	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">defer</span> s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>urls<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何根据给定的长 URL 计算出短 URL 呢？为此我们创建一个函数 <code>genKey(n int) string {…}</code>，将 <code>s.Count()</code> 的当前值作为其整型参数传入。（具体算法并不重要，示例代码可以在 <a href="examples/chapter_19/goto_v1/key.go">key.go</a> 找到。）</p><p>现在，我们可以创建一个 <code>Put()</code> 方法，接收一个长 URL，用 <code>genKey()</code> 生成其短 URL 键，调用 <code>Set()</code> 方法在此键下存储长 URL 数据，然后返回这个键：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Put</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">		key <span class="token operator">:=</span> <span class="token function">genKey</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> key</span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token comment">// shouldn’t get here</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>for</code> 循环会一直尝试调用 <code>Set()</code> 直到成功为止（意味着生成了一个尚未存在的短网址）。现在我们定义好了数据存储，以及配套的可工作的函数（见代码 <a href="examples/chapter_19/goto_v1/store.go">store.go</a>）。但这本身并不能完成任务，我们还需要开发 web 服务器以交付 <code>Add</code> 和 <code>Redirect</code> 服务。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,21)),a("ul",null,[a("li",null,[t(e,{to:"/chapter-4/directory.html"},{default:p(()=>n[56]||(n[56]=[s("目录")])),_:1})]),a("li",null,[n[58]||(n[58]=s("上一节：")),t(e,{to:"/chapter-4/19.2.html"},{default:p(()=>n[57]||(n[57]=[s("短网址项目简介")])),_:1})]),a("li",null,[n[60]||(n[60]=s("下一节：")),t(e,{to:"/chapter-4/19.4.html"},{default:p(()=>n[59]||(n[59]=[s("用户界面：web 服务端")])),_:1})])])])}const v=l(d,[["render",r],["__file","19.3.html.vue"]]),g=JSON.parse('{"path":"/chapter-4/19.3.html","title":"版本 1 - 数据结构和前端界面","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"版本 1 - 数据结构和前端界面","slug":"版本-1-数据结构和前端界面","link":"#版本-1-数据结构和前端界面","children":[]},{"level":1,"title":"19.3 数据结构","slug":"_19-3-数据结构","link":"#_19-3-数据结构","children":[{"level":2,"title":"使程序线程安全","slug":"使程序线程安全","link":"#使程序线程安全","children":[]},{"level":2,"title":"使用 defer 简化代码","slug":"使用-defer-简化代码","link":"#使用-defer-简化代码","children":[]},{"level":2,"title":"URLStore 工厂函数","slug":"urlstore-工厂函数","link":"#urlstore-工厂函数","children":[]},{"level":2,"title":"使用 URLStore","slug":"使用-urlstore","link":"#使用-urlstore","children":[]},{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-4/19.3.md"}');export{v as comp,g as data};
