import{_ as l,c as o,a as i,b as a,d as t,e as p,f as s,r as c,o as u}from"./app-DtITwm2S.js";const r={};function d(k,n){const e=c("RouteLink");return u(),o("div",null,[n[5]||(n[5]=i(`<h1 id="_6-10-使用闭包调试" tabindex="-1"><a class="header-anchor" href="#_6-10-使用闭包调试"><span>6.10 使用闭包调试</span></a></h1><p>当您在分析和调试复杂的程序时，无数个函数在不同的代码文件中相互调用，如果这时候能够准确地知道哪个文件中的具体哪个函数正在执行，对于调试是十分有帮助的。您可以使用 <code>runtime</code> 或 <code>log</code> 包中的特殊函数来实现这样的功能。包 <code>runtime</code> 中的函数 <code>Caller()</code> 提供了相应的信息，因此可以在需要的时候实现一个 <code>where()</code> 闭包函数来打印函数执行的位置：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">where <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token boolean">_</span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> line<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">Caller</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%d&quot;</span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> line<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// some code</span></span>
<span class="line"><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// some more code</span></span>
<span class="line"><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您也可以设置 <code>log</code> 包中的 <code>flag</code> 参数来实现：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">log<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>Llongfile<span class="token punctuation">)</span></span>
<span class="line">log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>或使用一个更加简短版本的 <code>where()</code> 函数：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> where <span class="token operator">=</span> log<span class="token punctuation">.</span>Print</span>
<span class="line"><span class="token keyword">func</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">...</span> some code</span>
<span class="line"><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">...</span> some code</span>
<span class="line"><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,8)),a("ul",null,[a("li",null,[t(e,{to:"/chapter-2/directory.html"},{default:p(()=>n[0]||(n[0]=[s("目录")])),_:1})]),a("li",null,[n[2]||(n[2]=s("上一节：")),t(e,{to:"/chapter-2/06.9.html"},{default:p(()=>n[1]||(n[1]=[s("应用闭包：将函数作为返回值")])),_:1})]),a("li",null,[n[4]||(n[4]=s("下一节：")),t(e,{to:"/chapter-2/06.11.html"},{default:p(()=>n[3]||(n[3]=[s("计算函数执行时间")])),_:1})])])])}const v=l(r,[["render",d],["__file","06.10.html.vue"]]),h=JSON.parse('{"path":"/chapter-2/06.10.html","title":"6.10 使用闭包调试","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"6.10 使用闭包调试","slug":"_6-10-使用闭包调试","link":"#_6-10-使用闭包调试","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-2/06.10.md"}');export{v as comp,h as data};
