import{_ as l,c as i,b as a,f as s,d as e,e as t,a as o,r as c,o as r}from"./app-DtITwm2S.js";const u="/images/7.1_fig7.1.png",d={};function k(m,n){const p=c("RouteLink");return r(),i("div",null,[n[39]||(n[39]=a("h1",{id:"_7-1-声明和初始化",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_7-1-声明和初始化"},[a("span",null,"7.1 声明和初始化")])],-1)),n[40]||(n[40]=a("h2",{id:"_7-1-1-概念",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_7-1-1-概念"},[a("span",null,"7.1.1 概念")])],-1)),n[41]||(n[41]=a("p",null,[s("数组是具有相同 "),a("strong",null,"唯一类型"),s(" 的一组已编号且长度固定的数据项序列（这是一种同构的数据结构）；这种类型可以是任意的原始类型例如整型、字符串或者自定义类型。数组长度必须是一个常量表达式，并且必须是一个非负整数。数组长度也是数组类型的一部分，所以 "),a("code",null,"[5]int"),s(" 和 "),a("code",null,"[10]int"),s(" 是属于不同类型的。数组的编译时值初始化是按照数组顺序完成的（如下）。")],-1)),a("p",null,[n[2]||(n[2]=a("strong",null,"注意事项",-1)),n[3]||(n[3]=s(" 如果我们想让数组元素类型为任意类型的话可以使用空接口作为类型（参考 ")),e(p,{to:"/chapter-2/11.9.html"},{default:t(()=>n[0]||(n[0]=[s("第 11 章")])),_:1}),n[4]||(n[4]=s("）。当使用值时我们必须先做一个类型判断（参考 ")),e(p,{to:"/chapter-2/11.3.html"},{default:t(()=>n[1]||(n[1]=[s("第 11 章")])),_:1}),n[5]||(n[5]=s("）。"))]),n[42]||(n[42]=o(`<p>数组元素可以通过 <strong>索引</strong>（位置）来读取（或者修改），索引从 <code>0</code> 开始，第一个元素索引为 <code>0</code>，第二个索引为 <code>1</code>，以此类推（数组以 0 开始在所有类 C 语言中是相似的）。元素的数目（也称为长度或者数组大小）必须是固定的并且在声明该数组时就给出（编译时需要知道数组长度以便分配内存）；数组长度最大为 2GB。</p><p>声明的格式是：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> identifier <span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">]</span><span class="token keyword">type</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例如：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> arr1 <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在内存中的结构是：<img src="`+u+'" alt=""></p><p>每个元素是一个整型值，当声明数组时所有的元素都会被自动初始化为默认值 0。</p><p><code>arr1</code> 的长度是 5，索引范围从 <code>0</code> 到 <code>len(arr1)-1</code>。</p><p>第一个元素是 <code>arr1[0]</code>，第三个元素是 <code>arr1[2]</code>；总体来说索引 <code>i</code> 代表的元素是 <code>arr1[i]</code>，最后一个元素是 <code>arr1[len(arr1)-1]</code>。</p><p>对索引项为 <code>i</code> 的数组元素赋值可以这么操作：<code>arr[i] = value</code>，所以数组是 <strong>可变的</strong>。</p>',10)),a("p",null,[n[7]||(n[7]=s("只有有效的索引可以被使用，当使用等于或者大于 ")),n[8]||(n[8]=a("code",null,"len(arr1)",-1)),n[9]||(n[9]=s(" 的索引时：如果编译器可以检测到，会给出索引超限的提示信息；如果检测不到的话编译会通过而运行时会 ")),n[10]||(n[10]=a("code",null,"panic()",-1)),n[11]||(n[11]=s(":（参考")),e(p,{to:"/chapter-2/13.0.html"},{default:t(()=>n[6]||(n[6]=[s("第 13 章")])),_:1}),n[12]||(n[12]=s("）"))]),n[43]||(n[43]=o(`<pre><code>runtime error: index out of range
</code></pre><p>由于索引的存在，遍历数组的方法自然就是使用 <code>for</code> 结构：</p><ul><li>通过 <code>for</code> 初始化数组项</li><li>通过 <code>for</code> 打印数组元素</li><li>通过 <code>for</code> 依次处理元素</li></ul><p>示例 7.1 <a href="examples/chapter_7/for_arrays.go">for_arrays.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> arr1 <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">		arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Array at index %d is %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><pre><code>Array at index 0 is 0
Array at index 1 is 2
Array at index 2 is 4
Array at index 3 is 6
Array at index 4 is 8
</code></pre><p><code>for</code> 循环中的条件非常重要：<code>i &lt; len(arr1)</code>，如果写成 <code>i &lt;= len(arr1)</code> 的话会产生越界错误。</p><p>IDIOM:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span>｛</span>
<span class="line">	arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 for-range 的生成方式：</p><p>IDIOM:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">for</span> i<span class="token punctuation">,</span><span class="token boolean">_</span><span class="token operator">:=</span> <span class="token keyword">range</span> arr1 <span class="token punctuation">{</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)),a("p",null,[n[14]||(n[14]=s("在这里 ")),n[15]||(n[15]=a("code",null,"i",-1)),n[16]||(n[16]=s(" 也是数组的索引。当然这两种 ")),n[17]||(n[17]=a("code",null,"for",-1)),n[18]||(n[18]=s(" 结构对于切片（")),n[19]||(n[19]=a("code",null,"slices",-1)),n[20]||(n[20]=s("）（参考 ")),e(p,{to:"/chapter-2/07.2.html"},{default:t(()=>n[13]||(n[13]=[s("第 7 章")])),_:1}),n[21]||(n[21]=s("）来说也同样适用。"))]),n[44]||(n[44]=o(`<p><strong>问题 7.1</strong> 下面代码段的输出是什么？</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Array item&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">&quot;is&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Go 语言中的数组是一种 <strong>值类型</strong>（不像 C/C++ 中是指向首元素的指针），所以可以通过 <code>new()</code> 来创建： <code>var arr1 = new([5]int)</code>。</p><p>那么这种方式和 <code>var arr2 [5]int</code> 的区别是什么呢？<code>arr1</code> 的类型是 <code>*[5]int</code>，而 <code>arr2</code> 的类型是 <code>[5]int</code>。</p><p>这样的结果就是当把一个数组赋值给另一个时，需要再做一次数组内存的拷贝操作。例如：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">arr2 <span class="token operator">:=</span> <span class="token operator">*</span>arr1</span>
<span class="line">arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样两个数组就有了不同的值，在赋值后修改 <code>arr2</code> 不会对 <code>arr1</code> 生效。</p><p>所以在函数中数组作为参数传入时，如 <code>func1(arr2)</code>，会产生一次数组拷贝，<code>func1()</code> 方法不会修改原始的数组 <code>arr2</code>。</p><p>如果你想修改原数组，那么 <code>arr2</code> 必须通过 <code>&amp;</code> 操作符以引用方式传过来，例如 <code>func1(&amp;arr2)</code>，下面是一个例子：</p><p>示例 7.2 <a href="examples/chapter_7/pointer_array.go">pointer_array.go</a>:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">fp</span><span class="token punctuation">(</span>a <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> ar <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span></span>
<span class="line">	<span class="token function">f</span><span class="token punctuation">(</span>ar<span class="token punctuation">)</span> 	<span class="token comment">// passes a copy of ar</span></span>
<span class="line">	<span class="token function">fp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ar<span class="token punctuation">)</span> <span class="token comment">// passes a pointer to ar</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><pre><code>[0 0 0]
&amp;[0 0 0]
</code></pre>`,13)),a("p",null,[n[23]||(n[23]=s("另一种方法就是生成数组切片并将其传递给函数（详见")),e(p,{to:"/chapter-2/07.1.html"},{default:t(()=>n[22]||(n[22]=[s("第 7.1.4 节")])),_:1}),n[24]||(n[24]=s("）。"))]),n[45]||(n[45]=o('<p><strong>练习</strong></p><p>练习7.1：<a href="examples/chapter_7/array_value.go">array_value.go</a>:</p><p>证明当数组赋值时，发生了数组内存拷贝。</p><p>练习7.2：<a href="examples/chapter_7/for_array.go">for_array.go</a>:</p><p>写一个循环并用下标给数组赋值（从 0 到 15）并且将数组打印在屏幕上。</p><p>练习7.3：<a href="examples/chapter_7/fibonacci_array.go">fibonacci_array.go</a>:</p>',6)),a("p",null,[n[26]||(n[26]=s("在")),e(p,{to:"/chapter-2/06.6.html"},{default:t(()=>n[25]||(n[25]=[s("第 6.6 节")])),_:1}),n[27]||(n[27]=s(" 我们看到了一个递归计算 Fibonacci 数值的方法。但是通过数组我们可以更快的计算出 Fibonacci 数。完成该方法并打印出前 50 个 Fibonacci 数字。"))]),n[46]||(n[46]=o(`<h2 id="_7-1-2-数组常量" tabindex="-1"><a class="header-anchor" href="#_7-1-2-数组常量"><span>7.1.2 数组常量</span></a></h2><p>如果数组值已经提前知道了，那么可以通过 <strong>数组常量</strong> 的方法来初始化数组，而不用依次使用 <code>[]=</code> 方法（所有的组成元素都有相同的常量语法）。</p><p>示例 7.3 <a href="examples/chapter_7/array_literals.go">array_literals.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// var arrAge = [5]int{18, 20, 15, 22, 16}</span></span>
<span class="line">	<span class="token comment">// var arrLazy = [...]int{5, 6, 7, 8, 22}</span></span>
<span class="line">	<span class="token comment">// var arrLazy = []int{5, 6, 7, 8, 22}	//注：初始化得到的实际上是切片slice</span></span>
<span class="line">	<span class="token keyword">var</span> arrKeyValue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">&quot;Chris&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">&quot;Ron&quot;</span><span class="token punctuation">}</span></span>
<span class="line">	<span class="token comment">// var arrKeyValue = []string{3: &quot;Chris&quot;, 4: &quot;Ron&quot;}	//注：初始化得到的实际上是切片slice</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arrKeyValue<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Person at %d is %s\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> arrKeyValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一种变化：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> arrAge <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意 <code>[5]int</code> 可以从左边起开始忽略：<code>[10]int {1, 2, 3}</code> :这是一个有 10 个元素的数组，除了前三个元素外其他元素都为 <code>0</code>。</p><p>第二种变化：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> arrLazy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>...</code> 同样可以忽略，从技术上说它们其实变成了切片。</p><p>第三种变化：<code>key: value 语法</code></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> arrKeyValue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">&quot;Chris&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">&quot;Ron&quot;</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>只有索引 3 和 4 被赋予实际的值，其他元素都被设置为空的字符串，所以输出结果为：</p><pre><code>Person at 0 is
Person at 1 is
Person at 2 is
Person at 3 is Chris
Person at 4 is Ron
</code></pre><p>在这里数组长度同样可以写成 <code>...</code>。</p><p>你可以取任意数组常量的地址来作为指向新实例的指针。</p><p>示例 7.4 <a href="examples/chapter_7/pointer_array2.go">pointer_array2.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">fp</span><span class="token punctuation">(</span>a <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token function">fp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> i <span class="token operator">*</span> i<span class="token punctuation">,</span> i <span class="token operator">*</span> i <span class="token operator">*</span> i<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&amp;[0 0 0]</span>
<span class="line">&amp;[1 1 1]</span>
<span class="line">&amp;[2 4 8]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>几何点（或者数学向量）是一个使用数组的经典例子。为了简化代码通常使用一个别名：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> Vector3D <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">float32</span></span>
<span class="line"><span class="token keyword">var</span> vec Vector3D</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-1-3-多维数组" tabindex="-1"><a class="header-anchor" href="#_7-1-3-多维数组"><span>7.1.3 多维数组</span></a></h2><p>数组通常是一维的，但是可以用来组装成多维数组，例如：<code>[3][5]int</code>，<code>[2][2][2]float64</code>。</p>`,24)),a("p",null,[n[29]||(n[29]=s("内部数组总是长度相同的。Go 语言的多维数组是矩形式的（唯一的例外是切片的数组，参见")),e(p,{to:"/chapter-2/07.2.html"},{default:t(()=>n[28]||(n[28]=[s("第 7.2.5 节")])),_:1}),n[30]||(n[30]=s("。"))]),n[47]||(n[47]=o(`<p>示例 7.5 <a href="examples/chapter_7/multidim_array.go">multidim_array.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">(</span></span>
<span class="line">	WIDTH  <span class="token operator">=</span> <span class="token number">1920</span></span>
<span class="line">	HEIGHT <span class="token operator">=</span> <span class="token number">1080</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> pixel <span class="token builtin">int</span></span>
<span class="line"><span class="token keyword">var</span> screen <span class="token punctuation">[</span>WIDTH<span class="token punctuation">]</span><span class="token punctuation">[</span>HEIGHT<span class="token punctuation">]</span>pixel</span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">for</span> y <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> HEIGHT<span class="token punctuation">;</span> y<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">for</span> x <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> WIDTH<span class="token punctuation">;</span> x<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">			screen<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-1-4-将数组传递给函数" tabindex="-1"><a class="header-anchor" href="#_7-1-4-将数组传递给函数"><span>7.1.4 将数组传递给函数</span></a></h2><p>把一个大数组传递给函数会消耗很多内存。有两种方法可以避免这种情况：</p><ul><li>传递数组的指针</li><li>使用数组的切片</li></ul><p>接下来的例子阐明了第一种方法：</p><p>示例 7.6 <a href="examples/chapter_7/array_sum.go">array_sum.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	array <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">{</span><span class="token number">7.0</span><span class="token punctuation">,</span> <span class="token number">8.5</span><span class="token punctuation">,</span> <span class="token number">9.1</span><span class="token punctuation">}</span></span>
<span class="line">	x <span class="token operator">:=</span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>array<span class="token punctuation">)</span> <span class="token comment">// Note the explicit address-of operator</span></span>
<span class="line">	<span class="token comment">// to pass a pointer to the array</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The sum of the array is: %f&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">Sum</span><span class="token punctuation">(</span>a <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sum <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span> <span class="token comment">// derefencing *a to get back to the array is not necessary!</span></span>
<span class="line">		sum <span class="token operator">+=</span> v</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><pre><code>The sum of the array is: 24.600000
</code></pre>`,10)),a("p",null,[n[32]||(n[32]=s("但这在 Go 中并不常用，通常使用切片（参考 ")),e(p,{to:"/chapter-2/07.2.html"},{default:t(()=>n[31]||(n[31]=[s("第 7.2 节")])),_:1}),n[33]||(n[33]=s("）。"))]),n[48]||(n[48]=a("h2",{id:"链接",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#链接"},[a("span",null,"链接")])],-1)),a("ul",null,[a("li",null,[e(p,{to:"/chapter-2/directory.html"},{default:t(()=>n[34]||(n[34]=[s("目录")])),_:1})]),a("li",null,[n[36]||(n[36]=s("上一节：")),e(p,{to:"/chapter-2/07.0.html"},{default:t(()=>n[35]||(n[35]=[s("数组与切片")])),_:1})]),a("li",null,[n[38]||(n[38]=s("下一节：")),e(p,{to:"/chapter-2/07.2.html"},{default:t(()=>n[37]||(n[37]=[s("切片")])),_:1})])])])}const b=l(d,[["render",k],["__file","07.1.html.vue"]]),g=JSON.parse('{"path":"/chapter-2/07.1.html","title":"7.1 声明和初始化","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"7.1 声明和初始化","slug":"_7-1-声明和初始化","link":"#_7-1-声明和初始化","children":[{"level":2,"title":"7.1.1 概念","slug":"_7-1-1-概念","link":"#_7-1-1-概念","children":[]},{"level":2,"title":"7.1.2 数组常量","slug":"_7-1-2-数组常量","link":"#_7-1-2-数组常量","children":[]},{"level":2,"title":"7.1.3 多维数组","slug":"_7-1-3-多维数组","link":"#_7-1-3-多维数组","children":[]},{"level":2,"title":"7.1.4 将数组传递给函数","slug":"_7-1-4-将数组传递给函数","link":"#_7-1-4-将数组传递给函数","children":[]},{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-2/07.1.md"}');export{b as comp,g as data};
