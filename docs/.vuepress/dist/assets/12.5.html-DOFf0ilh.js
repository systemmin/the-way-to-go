import{_ as l,c as o,a as c,b as s,f as a,d as p,e,r as i,o as u}from"./app-DtITwm2S.js";const r={};function k(d,n){const t=i("RouteLink");return u(),o("div",null,[n[8]||(n[8]=c(`<h1 id="_12-5-用-buffer-读取文件" tabindex="-1"><a class="header-anchor" href="#_12-5-用-buffer-读取文件"><span>12.5 用 buffer 读取文件</span></a></h1><p>在下面的例子中，我们结合使用了缓冲读取文件和命令行 flag 解析这两项技术。如果不加参数，那么你输入什么屏幕就打印什么。</p><p>参数被认为是文件名，如果文件存在的话就打印文件内容到屏幕。命令行执行 <code>cat test</code> 测试输出。</p><p>示例 12.11 <a href="examples/chapter_12/cat.go">cat.go</a>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;bufio&quot;</span></span>
<span class="line">	<span class="token string">&quot;flag&quot;</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">	<span class="token string">&quot;io&quot;</span></span>
<span class="line">	<span class="token string">&quot;os&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">cat</span><span class="token punctuation">(</span>r <span class="token operator">*</span>bufio<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">		buf<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">ReadBytes</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">break</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> flag<span class="token punctuation">.</span><span class="token function">NArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token function">cat</span><span class="token punctuation">(</span>bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> flag<span class="token punctuation">.</span><span class="token function">NArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">		f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span><span class="token function">Arg</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">			fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;%s:error reading from %s: %s\\n&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> flag<span class="token punctuation">.</span><span class="token function">Arg</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">			<span class="token keyword">continue</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token function">cat</span><span class="token punctuation">(</span>bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">		f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),s("p",null,[n[1]||(n[1]=a("在 ")),p(t,{to:"/chapter-3/12.6.html"},{default:e(()=>n[0]||(n[0]=[a("12.6 章节")])),_:1}),n[2]||(n[2]=a("，我们将看到如何使用缓冲写入。"))]),n[9]||(n[9]=s("p",null,[s("strong",null,"练习 12.6"),a("："),s("a",{href:"exercises/chapter_12/cat_numbered.go"},"cat_numbered.go")],-1)),n[10]||(n[10]=s("p",null,[a("扩展 "),s("a",{href:"exercises/chapter_12/cat.go"},"cat.go"),a(" 例子，使用 flag 添加一个选项，目的是为每一行头部加入一个行号。使用 "),s("code",null,"cat -n test"),a(" 测试输出。")],-1)),n[11]||(n[11]=s("h2",{id:"链接",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#链接"},[s("span",null,"链接")])],-1)),s("ul",null,[s("li",null,[p(t,{to:"/chapter-3/directory.html"},{default:e(()=>n[3]||(n[3]=[a("目录")])),_:1})]),s("li",null,[n[5]||(n[5]=a("上一节：")),p(t,{to:"/chapter-3/12.4.html"},{default:e(()=>n[4]||(n[4]=[a("从命令行读取参数")])),_:1})]),s("li",null,[n[7]||(n[7]=a("下一节：")),p(t,{to:"/chapter-3/12.6.html"},{default:e(()=>n[6]||(n[6]=[a("用切片读写文件")])),_:1})])])])}const f=l(r,[["render",k],["__file","12.5.html.vue"]]),m=JSON.parse('{"path":"/chapter-3/12.5.html","title":"12.5 用 buffer 读取文件","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"12.5 用 buffer 读取文件","slug":"_12-5-用-buffer-读取文件","link":"#_12-5-用-buffer-读取文件","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-3/12.5.md"}');export{f as comp,m as data};
