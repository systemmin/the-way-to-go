import{_ as c,c as o,b as s,f as a,d as p,e,a as l,r as i,o as u}from"./app-DtITwm2S.js";const r={};function d(k,n){const t=i("RouteLink");return u(),o("div",null,[n[8]||(n[8]=s("h1",{id:"_14-16-对-go-协程进行基准测试",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_14-16-对-go-协程进行基准测试"},[s("span",null,"14.16 对 Go 协程进行基准测试")])],-1)),s("p",null,[n[1]||(n[1]=a("在 ")),p(t,{to:"/chapter-3/13.7.html"},{default:e(()=>n[0]||(n[0]=[a("13.7 节")])),_:1}),n[2]||(n[2]=l(" 我们提到了在 Go 语言中对你的函数进行基准测试。在此我们将其应用到一个用协程向通道写入整数再读出的实例中。这个函数将通过 <code>testing.Benchmark()</code> 调用 <code>N</code> 次（例如：<code>N = 1,000,000</code>），<code>BenchMarkResult</code> 有一个 <code>String()</code> 方法来输出其结果。<code>N</code> 的值将由 <code>gotest</code> 来判断并取得一个足够大的数字，以获得合理的基准测试结果。当然同样的基准测试方法也适用于普通函数。",15))]),n[9]||(n[9]=l(`<p>如果你想排除指定部分的代码或者更具体的指定要测试的部分，可以使用 <code>testing.B.startTimer()</code> 和 <code>testing.B.stopTimer()</code> 来开始或结束计时器。基准测试只有在所有的测试通过后才能运行！</p><p>示例：14.18-<a href="examples/chapter_14/benchmark_channels.go">benchmark_channels.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">	<span class="token string">&quot;testing&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot; sync&quot;</span><span class="token punctuation">,</span> testing<span class="token punctuation">.</span><span class="token function">Benchmark</span><span class="token punctuation">(</span>BenchmarkChannelSync<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;buffered&quot;</span><span class="token punctuation">,</span> testing<span class="token punctuation">.</span><span class="token function">Benchmark</span><span class="token punctuation">(</span>BenchmarkChannelBuffered<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">BenchmarkChannelSync</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">			ch <span class="token operator">&lt;-</span> i</span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token keyword">range</span> ch <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">BenchmarkChannelBuffered</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">			ch <span class="token operator">&lt;-</span> i</span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token keyword">range</span> ch <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">  Output:Windows:  N       Time 1 op   Operations per sec</span>
<span class="line">  sync      1000000  2443 ns/op  --&gt;  409 332 / s</span>
<span class="line">  buffered   1000000  4850 ns/op  --&gt;  810 477 / s</span>
<span class="line">  Linux:</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,6)),s("ul",null,[s("li",null,[p(t,{to:"/chapter-3/directory.html"},{default:e(()=>n[3]||(n[3]=[a("目录")])),_:1})]),s("li",null,[n[5]||(n[5]=a("上一节：")),p(t,{to:"/chapter-3/14.15.html"},{default:e(()=>n[4]||(n[4]=[a("漏桶算法")])),_:1})]),s("li",null,[n[7]||(n[7]=a("下一节：")),p(t,{to:"/chapter-3/14.17.html"},{default:e(()=>n[6]||(n[6]=[a("使用通道并发访问对象")])),_:1})])])])}const m=c(r,[["render",d],["__file","14.16.html.vue"]]),b=JSON.parse('{"path":"/chapter-3/14.16.html","title":"14.16 对 Go 协程进行基准测试","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"14.16 对 Go 协程进行基准测试","slug":"_14-16-对-go-协程进行基准测试","link":"#_14-16-对-go-协程进行基准测试","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-3/14.16.md"}');export{m as comp,b as data};
