import{_ as o,c as i,b as a,f as s,d as e,e as p,a as l,r as u,o as r}from"./app-DtITwm2S.js";const d={},c={start:"2"},k={start:"4"},m={start:"5"},v={start:"6"},f={start:"7"};function g(b,n){const t=u("RouteLink");return r(),i("div",null,[n[25]||(n[25]=a("h1",{id:"_17-2-defer-模式",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_17-2-defer-模式"},[a("span",null,"17.2 defer 模式")])],-1)),n[26]||(n[26]=a("p",null,[s("使用 "),a("code",null,"defer"),s(" 可以确保资源不再需要时，都会被恰当地关闭或归还到“池子”中。更重要的一点是，它可以恢复 panic。")],-1)),a("ol",null,[a("li",null,[n[1]||(n[1]=s("关闭一个文件流：（见 ")),e(t,{to:"/chapter-4/12.7.html"},{default:p(()=>n[0]||(n[0]=[s("12.7节")])),_:1}),n[2]||(n[2]=s("）"))])]),n[27]||(n[27]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 先打开一个文件 f</span></span>
<span class="line"><span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("ol",c,[a("li",null,[n[4]||(n[4]=s("解锁一个被锁定的资源（")),n[5]||(n[5]=a("code",null,"mutex",-1)),n[6]||(n[6]=s("）：（见 ")),e(t,{to:"/chapter-4/09.3.html"},{default:p(()=>n[3]||(n[3]=[s("9.3节")])),_:1}),n[7]||(n[7]=s("）"))])]),n[28]||(n[28]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">defer</span> mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>关闭一个通道（如有必要）：</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">ch := make(chan float64)</span>
<span class="line">defer close(ch)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以是两个通道：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">answerα<span class="token punctuation">,</span> answerβ <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">close</span><span class="token punctuation">(</span>answerα<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">close</span><span class="token punctuation">(</span>answerβ<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),a("ol",k,[a("li",null,[n[9]||(n[9]=s("从 panic 恢复：（见 ")),e(t,{to:"/chapter-4/13.3.html"},{default:p(()=>n[8]||(n[8]=[s("13.3节")])),_:1}),n[10]||(n[10]=s("）"))])]),n[29]||(n[29]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;run time panic: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("ol",m,[a("li",null,[n[12]||(n[12]=s("停止一个计时器：（见 ")),e(t,{to:"/chapter-4/14.5.html"},{default:p(()=>n[11]||(n[11]=[s("14.5节")])),_:1}),n[13]||(n[13]=s("）"))])]),n[30]||(n[30]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">tick1 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>updateInterval<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">defer</span> tick1<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("ol",v,[a("li",null,[n[15]||(n[15]=s("释放一个进程 p：（见 ")),e(t,{to:"/chapter-4/13.6.html"},{default:p(()=>n[14]||(n[14]=[s("13.6节")])),_:1}),n[16]||(n[16]=s("）"))])]),n[31]||(n[31]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">p<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">StartProcess</span><span class="token punctuation">(</span>…<span class="token punctuation">,</span> …<span class="token punctuation">,</span> …<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">defer</span> p<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("ol",f,[a("li",null,[n[18]||(n[18]=s("停止 CPU 性能分析并立即写入：（见 ")),e(t,{to:"/chapter-4/13.10.html"},{default:p(()=>n[17]||(n[17]=[s("13.10节")])),_:1}),n[19]||(n[19]=s("）"))])]),n[32]||(n[32]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">pprof<span class="token punctuation">.</span><span class="token function">StartCPUProfile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">defer</span> pprof<span class="token punctuation">.</span><span class="token function">StopCPUProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当然 <code>defer</code> 也可以在打印报表时避免忘记输出页脚。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,3)),a("ul",null,[a("li",null,[e(t,{to:"/chapter-4/directory.html"},{default:p(()=>n[20]||(n[20]=[s("目录")])),_:1})]),a("li",null,[n[22]||(n[22]=s("上一节：")),e(t,{to:"/chapter-4/17.1.html"},{default:p(()=>n[21]||(n[21]=[s("逗号 ok 模式")])),_:1})]),a("li",null,[n[24]||(n[24]=s("下一节：")),e(t,{to:"/chapter-4/17.3.html"},{default:p(()=>n[23]||(n[23]=[s("可见性模式")])),_:1})])])])}const x=o(d,[["render",g],["__file","17.2.html.vue"]]),w=JSON.parse('{"path":"/chapter-4/17.2.html","title":"17.2 defer 模式","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"17.2 defer 模式","slug":"_17-2-defer-模式","link":"#_17-2-defer-模式","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-4/17.2.md"}');export{x as comp,w as data};
