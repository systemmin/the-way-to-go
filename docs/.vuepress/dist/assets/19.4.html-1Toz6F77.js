import{_ as l,c as i,a as o,b as a,f as s,d as e,e as p,r as c,o as u}from"./app-DtITwm2S.js";const d="/images/19.4_fig19.2.png",r="/images/19.4_fig19.3.jpg",k="/images/19.4_fig19.4.jpg",m={};function v(g,n){const t=c("RouteLink");return u(),i("div",null,[n[22]||(n[22]=o(`<h1 id="_19-4-用户界面-web-服务端" tabindex="-1"><a class="header-anchor" href="#_19-4-用户界面-web-服务端"><span>19.4 用户界面：web 服务端</span></a></h1><p>（本节代码见 <a href="examples/chapter_19/goto_v1/main.go">goto_v1/main.go</a>。）</p><p>我们尚未编写启动程序的必要函数。它们（总是）类似 C，C++ 或 Java 中的 <code>main()</code> 函数，我们的 web 服务器由它启动，例如用如下命令在本地 8080 端口启动 web 服务器：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,4)),a("p",null,[n[1]||(n[1]=s("（web 服务器的功能来自于 ")),n[2]||(n[2]=a("code",null,"http",-1)),n[3]||(n[3]=s(" 包，")),e(t,{to:"/chapter-4/15.0.html"},{default:p(()=>n[0]||(n[0]=[s("15 章")])),_:1}),n[4]||(n[4]=s(" 做了深入介绍）。web 服务器会在一个无限循环中监听到来的请求，但我们必须定义针对这些请求，服务器该如何响应。可以用被称为 HTTP 处理器的 ")),n[5]||(n[5]=a("code",null,"HandleFunc",-1)),n[6]||(n[6]=s(" 函数来办到，例如代码："))]),n[23]||(n[23]=o(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/add&quot;</span><span class="token punctuation">,</span> Add<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如此，每个以 <code>/add</code> 结尾的请求都会调用 <code>Add</code> 函数（尚未完成）。</p><p>程序有两个 HTTP 处理器：</p><ul><li><code>Redirect</code>，用于对短 URL 重定向</li><li><code>Add</code>，用于处理新提交的 URL</li></ul><p>示意图：</p><p><img src="//images/19.4_fig19.1.jpg" alt=""></p><p>最简单的 <code>main()</code> 函数类似这样：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> Redirect<span class="token punctuation">)</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/add&quot;</span><span class="token punctuation">,</span> Add<span class="token punctuation">)</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对 <code>/add</code> 的请求由 <code>Add</code> 处理器处理，所有其他请求会被 <code>Redirect</code> 处理器处理。处理函数从到来的请求（一个类型为 <code>*http.Request</code> 的变量）中获取信息，然后产生响应并写入 <code>http.ResponseWriter</code> 类型变量 <code>w</code>。</p><p><code>Add</code> 函数必须做的事有：</p><ol><li>读取长 URL，即：用 <code>r.FormValue(&quot;url&quot;)</code> 从 HTML 表单提交的 HTTP 请求中读取 URL</li><li>使用 store 上的 <code>Put()</code> 方法存储长 URL</li><li>将对应的短 URL 发送给用户</li></ol><p>每个需求都转化为一行代码：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	url <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">FormValue</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	key <span class="token operator">:=</span> store<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:8080/%s&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)),a("p",null,[n[8]||(n[8]=o("这里 <code>fmt</code> 包的 <code>Fprintf()</code> 函数用来替换字符串中的关键字 <code>%s</code>，然后将结果作为响应发送回客户端。注意 <code>Fprintf()</code> 把数据写到了 <code>ResponseWriter</code> 中，其实 <code>Fprintf()</code> 可以将数据写到任何实现了 <code>io.Writer</code> 的数据结构，即该结构实现了 <code>Write()</code> 方法。Go 中 <code>io.Writer</code> 称为接口，可见 <code>Fprintf()</code> 利用接口变得十分通用，可以对很多不同的类型写入数据。Go 中接口的使用十分普遍，它使代码更通用（见 ",21)),e(t,{to:"/chapter-4/11.0.html"},{default:p(()=>n[7]||(n[7]=[s("11 章")])),_:1}),n[9]||(n[9]=s("）。"))]),n[24]||(n[24]=o(`<p>还需要一个表单，仍然可以用 <code>Fprintf()</code> 来输出，这次将常量写入 <code>w</code>。让我们来修改 <code>Add()</code>，当未指定 URL 时显示 HTML 表单：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	url <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">FormValue</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> url <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> AddForm<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">return</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	key <span class="token operator">:=</span> store<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:8080/%s&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> AddForm <span class="token operator">=</span> <span class="token string">\`</span>
<span class="line">&lt;form method=&quot;POST&quot; action=&quot;/add&quot;&gt;</span>
<span class="line">URL: &lt;input type=&quot;text&quot; name=&quot;url&quot;&gt;</span>
<span class="line">&lt;input type=&quot;submit&quot; value=&quot;Add&quot;&gt;</span>
<span class="line">&lt;/form&gt;</span>
<span class="line">\`</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在那种情况下，发送字符串常量 <code>AddForm</code> 到客户端，它是 html 表单，包含一个 <code>url</code> 输入域和一个提交按钮，点击后发送 POST 请求到 <code>/add</code>。这样 <code>Add()</code> 处理函数被再次调用，此时 <code>url</code> 的值来自文本域。（<code>\`\`</code> 用来创建原始字符串，否则按惯例 <code>&quot;&quot;</code> 将成为字符串边界。）</p><p><code>Redirect()</code> 函数在 HTTP 请求路径中找到键（短 URL 的键是请求路径去除首字符，在 Go 中可以写为 <code>[1:]</code>。例如请求 &quot;/abc&quot;，键就是 &quot;abc&quot;），用 <code>Get()</code> 函数从 <code>store</code> 检索到对应的长 URL，对用户发送 HTTP 重定向。如果没找到 URL，发送 404 &quot;Not Found&quot; 错误取而代之：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">Redirect</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	key <span class="token operator">:=</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span></span>
<span class="line">	url <span class="token operator">:=</span> store<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> url <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">		http<span class="token punctuation">.</span><span class="token function">NotFound</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">return</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> url<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusFound<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（<code>http.NotFound()</code> 和 <code>http.Redirect()</code> 是发送通用 HTTP 响应的工具函数。）</p><p>我们已经完整地遍历了 <a href="examples/chapter_19/goto_v1">goto_v1</a> 的代码。</p><h2 id="编译和运行" tabindex="-1"><a class="header-anchor" href="#编译和运行"><span>编译和运行</span></a></h2><p>可执行程序已包含在示例代码下，如果你想立即测试可以跳过本节。其中包含 3 个 go 源文件和一个 Makefile 文件，通过它应用可以被编译和链接，只须如下操作：</p>`,9)),a("ul",null,[n[16]||(n[16]=a("li",null,[a("strong",null,"Linux 和 OSX 平台："),s(" 在终端窗口源码目录下启动 "),a("code",null,"make"),s(" 命令，或在 LiteIDE 中构建项目。")],-1)),a("li",null,[n[11]||(n[11]=a("strong",null,"Windows 平台：",-1)),n[12]||(n[12]=s(" 启动 MINGW 环境，步骤为：开始菜单，所有程序，MinGW，MinGW Shell（见 ")),e(t,{to:"/chapter-4/02.5.html"},{default:p(()=>n[10]||(n[10]=[s("2.5.5 节")])),_:1}),n[13]||(n[13]=s("），在命令行窗口输入 ")),n[14]||(n[14]=a("code",null,"make",-1)),n[15]||(n[15]=s(" 并回车，源代码被编译并链接为原生 exe 可执行程序。"))])]),n[25]||(n[25]=o('<p>生成内容为可执行程序，Linux/OS X 下为 <code>goto</code>，Windows 下为 <code>goto.exe</code>。</p><p>要启动并运行 web 服务器，那么：</p><ul><li><strong>Linux 和 OSX 平台：</strong> 输入命令 <code>./goto</code>。</li><li><strong>Windows 平台：</strong> 从 Go IDE 启动程序（如果 Windows 防火墙阻止程序启动，设置允许该程序）</li></ul><h2 id="测试该程序" tabindex="-1"><a class="header-anchor" href="#测试该程序"><span>测试该程序</span></a></h2><p>打开浏览器并请求 url：<code>http://localhost:8080/add</code></p><p>这会激活 <code>Add()</code> 处理函数。请求还未包含 url 变量，所以响应会输出 html 表单询问输入：</p><p><img src="'+d+'" alt=""></p><p>添加一个长 URL 以获取等价的缩短版本，例如 <code>http://golang.org/pkg/bufio/#Writer</code>，然后单击按钮。应用会为你产生一个短 URL 并打印出来，例如 <code>http:// localhost:8080/2</code>。</p><p><img src="'+r+'" alt=""></p><p>复制该 URL 并在浏览器地址栏粘贴以发出请求，现在轮到 <code>Redirect()</code> 处理函数上场了，对应长 URL 的页面被显示了出来。</p><p><img src="'+k+'" alt=""></p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>',12)),a("ul",null,[a("li",null,[e(t,{to:"/chapter-4/directory.html"},{default:p(()=>n[17]||(n[17]=[s("目录")])),_:1})]),a("li",null,[n[19]||(n[19]=s("上一节：")),e(t,{to:"/chapter-4/19.3.html"},{default:p(()=>n[18]||(n[18]=[s("数据结构")])),_:1})]),a("li",null,[n[21]||(n[21]=s("下一节：")),e(t,{to:"/chapter-4/19.5.html"},{default:p(()=>n[20]||(n[20]=[s("持久化存储：gob")])),_:1})])])])}const f=l(m,[["render",v],["__file","19.4.html.vue"]]),h=JSON.parse('{"path":"/chapter-4/19.4.html","title":"19.4 用户界面：web 服务端","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"19.4 用户界面：web 服务端","slug":"_19-4-用户界面-web-服务端","link":"#_19-4-用户界面-web-服务端","children":[{"level":2,"title":"编译和运行","slug":"编译和运行","link":"#编译和运行","children":[]},{"level":2,"title":"测试该程序","slug":"测试该程序","link":"#测试该程序","children":[]},{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-4/19.4.md"}');export{f as comp,h as data};
