import{_ as n,c as a,a as d,b as o,d as s,e as l,f as e,r as i,o as p}from"./app-DtITwm2S.js";const h={};function u(m,t){const r=i("RouteLink");return p(),a("div",null,[t[5]||(t[5]=d('<h1 id="_10-0-结构-struct-与方法-method" tabindex="-1"><a class="header-anchor" href="#_10-0-结构-struct-与方法-method"><span>10.0 结构 (struct) 与方法 (method)</span></a></h1><p>Go 通过类型别名 (alias types) 和结构体的形式支持用户自定义类型，或者叫定制类型。一个带属性的结构体试图表示一个现实世界中的实体。结构体是复合类型 (composite types)，当需要定义一个类型，它由一系列属性组成，每个属性都有自己的类型和值的时候，就应该使用结构体，它把数据聚集在一起。然后可以访问这些数据，就好像它是一个独立实体的一部分。结构体也是值类型，因此可以通过 <strong>new</strong> 函数来创建。</p><p>组成结构体类型的那些数据称为 <strong>字段 (fields)</strong>。每个字段都有一个类型和一个名字；在一个结构体中，字段名字必须是唯一的。</p><p>结构体的概念在软件工程上旧的术语叫 ADT（抽象数据类型：Abstract Data Type），在一些老的编程语言中叫 <strong>记录 (Record)</strong>，比如 Cobol，在 C 家族的编程语言中它也存在，并且名字也是 <strong>struct</strong>，在面向对象的编程语言中，跟一个无方法的轻量级类一样。不过因为 Go 语言中没有类的概念，因此在 Go 中结构体有着更为重要的地位。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>',5)),o("ul",null,[o("li",null,[s(r,{to:"/chapter-2/directory.html"},{default:l(()=>t[0]||(t[0]=[e("目录")])),_:1})]),o("li",null,[t[2]||(t[2]=e("上一节：")),s(r,{to:"/chapter-2/09.11.html"},{default:l(()=>t[1]||(t[1]=[e("在 Go 程序中使用外部库")])),_:1})]),o("li",null,[t[4]||(t[4]=e("下一节：")),s(r,{to:"/chapter-2/10.1.html"},{default:l(()=>t[3]||(t[3]=[e("结构体定义")])),_:1})])])])}const f=n(h,[["render",u],["__file","10.0.html.vue"]]),g=JSON.parse('{"path":"/chapter-2/10.0.html","title":"10.0 结构 (struct) 与方法 (method)","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"10.0 结构 (struct) 与方法 (method)","slug":"_10-0-结构-struct-与方法-method","link":"#_10-0-结构-struct-与方法-method","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-2/10.0.md"}');export{f as comp,g as data};
