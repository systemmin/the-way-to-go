import{_ as o,c as i,a as l,b as a,f as s,d as p,e as t,r as c,o as u}from"./app-DtITwm2S.js";const r={};function d(k,n){const e=c("RouteLink");return u(),i("div",null,[n[19]||(n[19]=l(`<h1 id="_18-8-协程-goroutine-与通道-channel" tabindex="-1"><a class="header-anchor" href="#_18-8-协程-goroutine-与通道-channel"><span>18.8 协程 (goroutine) 与通道 (channel)</span></a></h1><p>出于性能考虑的建议：</p><p>实践经验表明，为了使并行运算获得高于串行运算的效率，在协程内部完成的工作量，必须远远高于协程的创建和相互来回通信的开销。</p><ul><li><p>出于性能考虑建议使用带缓存的通道：</p><p>使用带缓存的通道可以很轻易成倍提高它的吞吐量，某些场景其性能可以提高至 10 倍甚至更多。通过调整通道的容量，甚至可以尝试着更进一步的优化其性能。</p></li><li><p>限制一个通道的数据数量并将它们封装成一个数组：</p><p>如果使用通道传递大量单独的数据，那么通道将变成性能瓶颈。然而，将数据块打包封装成数组，在接收端解压数据时，性能可以提高至 10 倍。</p></li></ul><p>现在创建一个带缓存的通道：<code>ch := make(chan type,buf)</code></p><p>（1）如何使用 <code>for</code> 或者 <code>for-range</code> 遍历一个通道：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">for</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// do something with v</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）如何检测一个通道 <code>ch</code> 是否关闭：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">//read channel until it closes or error-condition</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> input<span class="token punctuation">,</span> open <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">;</span> <span class="token operator">!</span>open <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">break</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者使用（1）自动检测。</p><p>（3）如何通过一个通道让主程序等待直到协程完成（信号量模式）：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// Allocate a channel.</span></span>
<span class="line"><span class="token comment">// Start something in a goroutine; when it completes, signal on the channel.</span></span>
<span class="line"><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// doSomething</span></span>
<span class="line">    ch <span class="token operator">&lt;-</span> <span class="token number">1</span> <span class="token comment">// Send a signal; value does not matter.</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">doSomethingElseForAWhile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">&lt;-</span>ch <span class="token comment">// Wait for goroutine to finish; discard sent value.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望程序一直阻塞，在匿名函数中省略 <code>ch &lt;- 1</code> 即可。</p><p>（4）通道的工厂模板：以下函数是一个通道工厂，启动一个匿名函数作为协程以生产通道：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">pump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">{</span></span>
<span class="line">    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">            ch <span class="token operator">&lt;-</span> i</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> ch</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15)),a("p",null,[n[1]||(n[1]=s("（5）通道迭代器模板：（注：这里原书没有写东西，但是应该是参考")),p(e,{to:"/chapter-4/14.2.html"},{default:t(()=>n[0]||(n[0]=[s("章节 14.2.10")])),_:1}),n[2]||(n[2]=s("）"))]),a("p",null,[n[4]||(n[4]=s("（6）如何限制并发处理请求的数量：参考")),p(e,{to:"/chapter-4/14.11.html"},{default:t(()=>n[3]||(n[3]=[s("章节 14.11")])),_:1})]),a("p",null,[n[6]||(n[6]=s("（7）如何在多核CPU上实现并行计算：参考")),p(e,{to:"/chapter-4/14.13.html"},{default:t(()=>n[5]||(n[5]=[s("章节 14.13")])),_:1})]),n[20]||(n[20]=l(`<p>（8）如何终止一个协程：<code>runtime.Goexit()</code></p><p>（9）简单的超时模板：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">timeout <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span> <span class="token comment">// one second  </span></span>
<span class="line">    timeout <span class="token operator">&lt;-</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment">// a read from ch has occurred</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>timeout<span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment">// the read from ch has timed out</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（10）如何使用输入通道和输出通道代替锁：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">Worker</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> out <span class="token keyword">chan</span> <span class="token operator">*</span>Task<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">        t <span class="token operator">:=</span> <span class="token operator">&lt;-</span>in</span>
<span class="line">        <span class="token function">process</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line">        out <span class="token operator">&lt;-</span> t</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),a("p",null,[n[8]||(n[8]=s("（11）如何在同步调用运行时间过长时将之丢弃：参考")),p(e,{to:"/chapter-4/14.5.html"},{default:t(()=>n[7]||(n[7]=[s("章节 14.5")])),_:1}),n[9]||(n[9]=s(" 第二个变体"))]),a("p",null,[n[11]||(n[11]=s("（12）如何在通道中使用计时器和定时器：参考")),p(e,{to:"/chapter-4/14.5.html"},{default:t(()=>n[10]||(n[10]=[s("章节 14.5")])),_:1})]),a("p",null,[n[13]||(n[13]=s("（13）典型的服务器后端模型：参考")),p(e,{to:"/chapter-4/14.4.html"},{default:t(()=>n[12]||(n[12]=[s("章节 14.4")])),_:1})]),n[21]||(n[21]=a("h2",{id:"链接",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#链接"},[a("span",null,"链接")])],-1)),a("ul",null,[a("li",null,[p(e,{to:"/chapter-4/directory.html"},{default:t(()=>n[14]||(n[14]=[s("目录")])),_:1})]),a("li",null,[n[16]||(n[16]=s("上一节：")),p(e,{to:"/chapter-4/18.7.html"},{default:t(()=>n[15]||(n[15]=[s("文件")])),_:1})]),a("li",null,[n[18]||(n[18]=s("下一节：")),p(e,{to:"/chapter-4/18.9.html"},{default:t(()=>n[17]||(n[17]=[s("网络和网页应用")])),_:1})])])])}const v=o(r,[["render",d],["__file","18.8.html.vue"]]),b=JSON.parse('{"path":"/chapter-4/18.8.html","title":"18.8 协程 (goroutine) 与通道 (channel)","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"18.8 协程 (goroutine) 与通道 (channel)","slug":"_18-8-协程-goroutine-与通道-channel","link":"#_18-8-协程-goroutine-与通道-channel","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-4/18.8.md"}');export{v as comp,b as data};
