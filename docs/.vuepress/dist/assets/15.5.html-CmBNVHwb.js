import{_ as o,c as i,b as a,f as s,d as p,e,a as l,r as c,o as u}from"./app-DtITwm2S.js";const r={};function k(d,n){const t=c("RouteLink");return u(),i("div",null,[n[20]||(n[20]=a("h1",{id:"_15-5-确保网页应用健壮",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_15-5-确保网页应用健壮"},[a("span",null,"15.5 确保网页应用健壮")])],-1)),n[21]||(n[21]=a("p",null,"当网页应用的处理函数发生 panic，服务器会简单地终止运行。这可不妙：网页服务器必须是足够健壮的程序，能够承受任何可能的突发问题。",-1)),a("p",null,[n[1]||(n[1]=s("首先能想到的是在每个处理函数中使用 ")),n[2]||(n[2]=a("code",null,"defer",-1)),n[3]||(n[3]=s("/")),n[4]||(n[4]=a("code",null,"recover()",-1)),n[5]||(n[5]=s("，不过这样会产生太多的重复代码。")),p(t,{to:"/chapter-3/13.5.html"},{default:e(()=>n[0]||(n[0]=[s("13.5 节")])),_:1}),n[6]||(n[6]=s("使用闭包的错误处理模式是更优雅的方案。我们把这种机制应用到前一章的简单网页服务器上。实际上，它可以被简单地应用到任何网页服务器程序中。"))]),n[22]||(n[22]=l(`<p>为增强代码可读性，我们为页面处理函数创建一个类型：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> HandleFnc <span class="token keyword">func</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2)),a("p",null,[n[8]||(n[8]=s("我们的错误处理函数应用了 ")),p(t,{to:"/chapter-3/13.5.html"},{default:e(()=>n[7]||(n[7]=[s("13.5 节")])),_:1}),n[9]||(n[9]=s("的模式，变成了以下的 ")),n[10]||(n[10]=a("code",null,"logPanics()",-1)),n[11]||(n[11]=s(" 函数："))]),n[23]||(n[23]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">logPanics</span><span class="token punctuation">(</span>function HandleFnc<span class="token punctuation">)</span> HandleFnc <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>writer http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">if</span> x <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">				log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%v] caught panic: %v&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">,</span> x<span class="token punctuation">)</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token function">function</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> request<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们用 <code>logPanics()</code> 来包装对处理函数的调用：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/test1&quot;</span><span class="token punctuation">,</span> <span class="token function">logPanics</span><span class="token punctuation">(</span>SimpleServer<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/test2&quot;</span><span class="token punctuation">,</span> <span class="token function">logPanics</span><span class="token punctuation">(</span>FormServer<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),a("p",null,[n[13]||(n[13]=s("处理函数现在可以恢复 panic 调用，类似 ")),p(t,{to:"/chapter-3/13.5.html"},{default:e(()=>n[12]||(n[12]=[s("13.5 节")])),_:1}),n[14]||(n[14]=s("中的错误检测函数。完整代码如下："))]),n[24]||(n[24]=l(`<p>示例 15.11 <a href="examples/chapter_15/robust_webserver.go">robust_webserver.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;io&quot;</span></span>
<span class="line">	<span class="token string">&quot;log&quot;</span></span>
<span class="line">	<span class="token string">&quot;net/http&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token string">\`&lt;html&gt;&lt;body&gt;&lt;form action=&quot;#&quot; method=&quot;post&quot; name=&quot;bar&quot;&gt;</span>
<span class="line">		&lt;input type=&quot;text&quot; name=&quot;in&quot;/&gt;</span>
<span class="line">		&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;/&gt;</span>
<span class="line">	&lt;/form&gt;&lt;/html&gt;&lt;/body&gt;\`</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> HandleFnc <span class="token keyword">func</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* handle a simple get request */</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">SimpleServer</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;&lt;h1&gt;hello, world&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* handle a form, both the GET which displays the form</span>
<span class="line">   and the POST which processes it.*/</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">FormServer</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">switch</span> request<span class="token punctuation">.</span>Method <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">case</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token comment">/* display the form to the user */</span></span>
<span class="line">		io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> form<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">case</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token comment">/* handle the form data, note that ParseForm must</span>
<span class="line">		   be called before we can extract form data*/</span></span>
<span class="line">		<span class="token comment">//request.ParseForm();</span></span>
<span class="line">		<span class="token comment">//io.WriteString(w, request.Form[&quot;in&quot;][0])</span></span>
<span class="line">		io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">FormValue</span><span class="token punctuation">(</span><span class="token string">&quot;in&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/test1&quot;</span><span class="token punctuation">,</span> <span class="token function">logPanics</span><span class="token punctuation">(</span>SimpleServer<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/test2&quot;</span><span class="token punctuation">,</span> <span class="token function">logPanics</span><span class="token punctuation">(</span>FormServer<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:8088&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">logPanics</span><span class="token punctuation">(</span>function HandleFnc<span class="token punctuation">)</span> HandleFnc <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>writer http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">if</span> x <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">				log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%v] caught panic: %v&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">,</span> x<span class="token punctuation">)</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token function">function</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> request<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>`,3)),a("ul",null,[a("li",null,[p(t,{to:"/chapter-3/directory.html"},{default:e(()=>n[15]||(n[15]=[s("目录")])),_:1})]),a("li",null,[n[17]||(n[17]=s("上一节：")),p(t,{to:"/chapter-3/15.4.html"},{default:e(()=>n[16]||(n[16]=[s("写一个简单的网页应用")])),_:1})]),a("li",null,[n[19]||(n[19]=s("下一节：")),p(t,{to:"/chapter-3/15.6.html"},{default:e(()=>n[18]||(n[18]=[s("用模板编写网页应用")])),_:1})])])])}const m=o(r,[["render",k],["__file","15.5.html.vue"]]),b=JSON.parse('{"path":"/chapter-3/15.5.html","title":"15.5 确保网页应用健壮","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"15.5 确保网页应用健壮","slug":"_15-5-确保网页应用健壮","link":"#_15-5-确保网页应用健壮","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-3/15.5.md"}');export{m as comp,b as data};
