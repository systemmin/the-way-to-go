import{_ as d,c as r,a as i,b as o,d as a,e as n,f as t,r as s,o as p}from"./app-DtITwm2S.js";const c={};function u(h,e){const l=s("RouteLink");return p(),r("div",null,[e[5]||(e[5]=i('<h1 id="_3-4-构建并运行-go-程序" tabindex="-1"><a class="header-anchor" href="#_3-4-构建并运行-go-程序"><span>3.4 构建并运行 Go 程序</span></a></h1><p>在大多数 IDE 中，每次构建程序之前都会自动调用源码格式化工具 <code>gofmt</code> 并保存格式化后的源文件。如果构建成功则不会输出任何信息，而当发生编译时错误时，则会指明源码中具体第几行出现了什么错误，如：<code>a declared and not used</code>。一般情况下，你可以双击 IDE 中的错误信息直接跳转到发生错误的那一行。</p><p>如果程序执行一切顺利并成功退出后，将会在控制台输出 <code>Program exited with code 0</code>。</p><p>从 Go 1 版本开始，使用 Go 自带的更加方便的工具来构建应用程序：</p><ul><li><code>go build</code> 编译自身包和依赖包</li><li><code>go install</code> 编译并安装自身包和依赖包</li></ul><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>',6)),o("ul",null,[o("li",null,[a(l,{to:"/chapter-1/directory.html"},{default:n(()=>e[0]||(e[0]=[t("目录")])),_:1})]),o("li",null,[e[2]||(e[2]=t("上一节：")),a(l,{to:"/chapter-1/03.3.html"},{default:n(()=>e[1]||(e[1]=[t("调试器")])),_:1})]),o("li",null,[e[4]||(e[4]=t("下一节：")),a(l,{to:"/chapter-1/03.5.html"},{default:n(()=>e[3]||(e[3]=[t("格式化代码")])),_:1})])])])}const f=d(c,[["render",u],["__file","03.4.html.vue"]]),g=JSON.parse('{"path":"/chapter-1/03.4.html","title":"3.4 构建并运行 Go 程序","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"3.4 构建并运行 Go 程序","slug":"_3-4-构建并运行-go-程序","link":"#_3-4-构建并运行-go-程序","children":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-1/03.4.md"}');export{f as comp,g as data};
