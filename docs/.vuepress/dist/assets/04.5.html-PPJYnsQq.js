import{_ as l,c as i,a as o,b as a,f as s,d as p,e as t,r as c,o as d}from"./app-DtITwm2S.js";const r={};function u(k,n){const e=c("RouteLink");return d(),i("div",null,[n[76]||(n[76]=o(`<h1 id="_4-5-基本类型和运算符" tabindex="-1"><a class="header-anchor" href="#_4-5-基本类型和运算符"><span>4.5 基本类型和运算符</span></a></h1><p>我们将在这个部分讲解有关布尔型、数字型和字符型的相关知识。</p><p>表达式是一种特定的类型的值，它可以由其它的值以及运算符组合而成。每个类型都定义了可以和自己结合的运算符集合，如果你使用了不在这个集合中的运算符，则会在编译时获得编译错误。</p><p>一元运算符只可以用于一个值的操作（作为后缀），而二元运算符则可以和两个值或者操作数结合（作为中缀）。</p><p>只有两个类型相同的值才可以和二元运算符结合，另外要注意的是，Go 是强类型语言，因此不会进行隐式转换，任何不同类型之间的转换都必须显式说明（第 4.2 节）。Go 不存在像 C 那样的运算符重载，表达式的解析顺序是从左至右。</p><p>你可以在第 4.5.3 节找到有关运算符优先级的相关信息，优先级越高的运算符在条件相同的情况下将被优先执行。但是你可以通过使用括号将其中的表达式括起来，以人为地提升某个表达式的运算优先级。</p><h2 id="_4-5-1-布尔类型-bool" tabindex="-1"><a class="header-anchor" href="#_4-5-1-布尔类型-bool"><span>4.5.1 布尔类型 bool</span></a></h2><p>一个简单的例子：<code>var b bool = true</code>。</p><p>布尔型的值只可以是常量 true 或者 false。</p><p>两个类型相同的值可以使用相等 <code>==</code> 或者不等 <code>!=</code> 运算符来进行比较并获得一个布尔型的值。</p><p>当相等运算符两边的值是完全相同的值的时候会返回 <code>true</code>，否则返回 <code>false</code>，并且只有在两个的值的类型相同的情况下才可以使用。</p><p>示例：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> aVar <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">aVar <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">false</span></span>
<span class="line">aVar <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当不等运算符两边的值是不同的时候会返回 <code>true</code>，否则返回 <code>false</code>。</p><p>示例：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> aVar <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">aVar <span class="token operator">!=</span> <span class="token number">5</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">true</span></span>
<span class="line">aVar <span class="token operator">!=</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16)),a("p",null,[n[1]||(n[1]=s("Go 对于值之间的比较有非常严格的限制，只有两个类型相同的值才可以进行比较，如果值的类型是接口（interface，")),p(e,{to:"/chapter-2/11.0.html"},{default:t(()=>n[0]||(n[0]=[s("第 11 章")])),_:1}),n[2]||(n[2]=s("），它们也必须都实现了相同的接口。如果其中一个值是常量，那么另外一个值的类型必须和该常量类型相兼容的。如果以上条件都不满足，则其中一个值的类型必须在被转换为和另外一个值的类型相同之后才可以进行比较。"))]),n[77]||(n[77]=a("p",null,[s("布尔型的常量和变量也可以通过和逻辑运算符（非 "),a("code",null,"!"),s("、与 "),a("code",null,"&&"),s("、或 "),a("code",null,"||"),s("）结合来产生另外一个布尔值，这样的逻辑语句就其本身而言，并不是一个完整的 Go 语句。")],-1)),a("p",null,[n[4]||(n[4]=s("逻辑值可以被用于条件结构中的条件语句（")),p(e,{to:"/chapter-2/05.0.html"},{default:t(()=>n[3]||(n[3]=[s("第 5 章")])),_:1}),n[5]||(n[5]=s("），以便测试某个条件是否满足。另外，与 ")),n[6]||(n[6]=a("code",null,"&&",-1)),n[7]||(n[7]=s("、或 ")),n[8]||(n[8]=a("code",null,"||",-1)),n[9]||(n[9]=s(" 与相等 ")),n[10]||(n[10]=a("code",null,"==",-1)),n[11]||(n[11]=s(" 或不等 ")),n[12]||(n[12]=a("code",null,"!=",-1)),n[13]||(n[13]=s(" 属于二元运算符，而非 ")),n[14]||(n[14]=a("code",null,"!",-1)),n[15]||(n[15]=s(" 属于一元运算符。在接下来的内容中，我们会使用 T 来代表条件符合的语句，用 F 来代表条件不符合的语句。"))]),n[78]||(n[78]=o(`<p>Go 语言中包含以下逻辑运算符：</p><p>非运算符：<code>!</code></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token operator">!</span>T <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token operator">!</span>F <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>非运算符用于取得和布尔值相反的结果。</p><p>与运算符：<code>&amp;&amp;</code></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">T <span class="token operator">&amp;&amp;</span> T <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">true</span></span>
<span class="line">T <span class="token operator">&amp;&amp;</span> F <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">false</span></span>
<span class="line">F <span class="token operator">&amp;&amp;</span> T <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">false</span></span>
<span class="line">F <span class="token operator">&amp;&amp;</span> F <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有当两边的值都为 <code>true</code> 的时候，和运算符的结果才是 <code>true</code>。</p><p>或运算符：<code>||</code></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">T <span class="token operator">||</span> T <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">true</span></span>
<span class="line">T <span class="token operator">||</span> F <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">true</span></span>
<span class="line">F <span class="token operator">||</span> T <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">true</span></span>
<span class="line">F <span class="token operator">||</span> F <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有当两边的值都为 <code>false</code> 的时候，或运算符的结果才是 <code>false</code>，其中任意一边的值为 <code>true</code> 就能够使得该表达式的结果为 <code>true</code>。</p><p>在 Go 语言中，<code>&amp;&amp;</code> 和 <code>||</code> 是具有快捷性质的运算符，当运算符左边表达式的值已经能够决定整个表达式的值的时候（<code>&amp;&amp;</code> 左边的值为 <code>false</code>，<code>||</code> 左边的值为 <code>true</code>），运算符右边的表达式将不会被执行。利用这个性质，如果你有多个条件判断，应当将计算过程较为复杂的表达式放在运算符的右侧以减少不必要的运算。</p><p>利用括号同样可以升级某个表达式的运算优先级。</p><p>在格式化输出时，你可以使用 <code>%t</code> 来表示你要输出的值为布尔型。</p><p>布尔值（以及任何结果为布尔值的表达式）最常用在条件结构的条件语句中，例如：if、for 和 switch 结构（第 5 章）。</p>`,14)),a("p",null,[n[17]||(n[17]=s("对于布尔值的好的命名能够很好地提升代码的可读性，例如以 ")),n[18]||(n[18]=a("code",null,"is",-1)),n[19]||(n[19]=s(" 或者 ")),n[20]||(n[20]=a("code",null,"Is",-1)),n[21]||(n[21]=s(" 开头的 ")),n[22]||(n[22]=a("code",null,"isSorted",-1)),n[23]||(n[23]=s("、")),n[24]||(n[24]=a("code",null,"isFinished",-1)),n[25]||(n[25]=s("、")),n[26]||(n[26]=a("code",null,"isVisible",-1)),n[27]||(n[27]=s("，使用这样的命名能够在阅读代码的获得阅读正常语句一样的良好体验，例如标准库中的 ")),n[28]||(n[28]=a("code",null,"unicode.IsDigit(ch)",-1)),n[29]||(n[29]=s("（")),p(e,{to:"/chapter-2/04.5.html"},{default:t(()=>n[16]||(n[16]=[s("第 4.5.5 节")])),_:1}),n[30]||(n[30]=s("）。"))]),n[79]||(n[79]=o(`<h2 id="_4-5-2-数字类型" tabindex="-1"><a class="header-anchor" href="#_4-5-2-数字类型"><span>4.5.2 数字类型</span></a></h2><h3 id="_4-5-2-1-整型-int-和浮点型-float" tabindex="-1"><a class="header-anchor" href="#_4-5-2-1-整型-int-和浮点型-float"><span>4.5.2.1 整型 int 和浮点型 float</span></a></h3><p>Go 语言支持整型和浮点型数字，并且原生支持复数，其中位的运算采用补码（详情参见 <a href="http://en.wikipedia.org/wiki/Two&#39;s_complement" target="_blank" rel="noopener noreferrer">二的补码</a> 页面）。</p><p>Go 也有基于架构的类型，例如：<code>int</code>、<code>uint</code> 和 <code>uintptr</code>。</p><p>这些类型的长度都是根据运行程序所在的操作系统类型所决定的：</p><ul><li><code>int</code> 和 <code>uint</code> 在 32 位操作系统上，它们均使用 32 位（4 个字节），在 64 位操作系统上，它们均使用 64 位（8 个字节）。</li><li><code>uintptr</code> 的长度被设定为足够存放一个指针即可。</li></ul><p>Go 语言中没有 float 类型。（Go语言中只有 <code>float32</code> 和 <code>float64</code>）没有 double 类型。</p><p>与操作系统架构无关的类型都有固定的大小，并在类型的名称中就可以看出来：</p><p>整数：</p><ul><li><code>int8</code>（-128 -&gt; 127）</li><li><code>int16</code>（-32768 -&gt; 32767）</li><li><code>int32</code>（-2,147,483,648 -&gt; 2,147,483,647）</li><li><code>int64</code>（-9,223,372,036,854,775,808 -&gt; 9,223,372,036,854,775,807）</li></ul><p>无符号整数：</p><ul><li><code>uint8</code>（0 -&gt; 255）</li><li><code>uint16</code>（0 -&gt; 65,535）</li><li><code>uint32</code>（0 -&gt; 4,294,967,295）</li><li><code>uint64</code>（0 -&gt; 18,446,744,073,709,551,615）</li></ul><p>浮点型（IEEE-754 标准）：</p><ul><li><code>float32</code>（+- 1e-45 -&gt; +- 3.4 * 1e38）</li><li><code>float64</code>（+- 5 * 1e-324 -&gt; 107 * 1e308）</li></ul><p><code>int</code> 型是计算最快的一种类型。</p><p>整型的零值为 <code>0</code>，浮点型的零值为 <code>0.0</code>。</p><p><code>float32</code> 精确到小数点后 7 位，<code>float64</code> 精确到小数点后 15 位。由于精确度的缘故，你在使用 <code>==</code> 或者 <code>!=</code> 来比较浮点数时应当非常小心。你最好在正式使用前测试对于精确度要求较高的运算。</p><p>你应该尽可能地使用 <code>float64</code>，因为 <code>math</code> 包中所有有关数学运算的函数都会要求接收这个类型。</p><p>你可以通过增加前缀 0 来表示 8 进制数（如：077），增加前缀 0x 来表示 16 进制数（如：<code>0xFF</code>），以及使用 <code>e</code> 来表示 10 的连乘（如： 1e3 = 1000，或者 6.022e23 = 6.022 x 1e23）。</p><p>你可以使用 <code>a := uint64(0)</code> 来同时完成类型转换和赋值操作，这样 <code>a</code> 的类型就是 <code>uint64</code>。</p><p>Go 中不允许不同类型之间的混合使用，但是对于常量的类型限制非常少，因此允许常量之间的混合使用，下面这个程序很好地解释了这个现象（该程序无法通过编译）：</p><p>示例 4.8 <a href="examples/chapter_4/type_mixing.go">type_mixing.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> a <span class="token builtin">int</span></span>
<span class="line">	<span class="token keyword">var</span> b <span class="token builtin">int32</span></span>
<span class="line">	a <span class="token operator">=</span> <span class="token number">15</span></span>
<span class="line">	b <span class="token operator">=</span> a <span class="token operator">+</span> a	 <span class="token comment">// 编译错误</span></span>
<span class="line">	b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">5</span>    <span class="token comment">// 因为 5 是常量，所以可以通过编译</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你尝试编译该程序，则将得到编译错误 <code>cannot use a + a (type int) as type int32 in assignment</code>。</p><p>同样地，<code>int16</code> 也不能够被隐式转换为 <code>int32</code>。</p>`,25)),a("p",null,[n[32]||(n[32]=s("下面这个程序展示了通过显式转换来避免这个问题（")),p(e,{to:"/chapter-2/04.2.html"},{default:t(()=>n[31]||(n[31]=[s("第 4.2 节")])),_:1}),n[33]||(n[33]=s("）。"))]),n[80]||(n[80]=o(`<p>示例 4.9 <a href="examples/chapter_4/casting.go">casting.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> n <span class="token builtin">int16</span> <span class="token operator">=</span> <span class="token number">34</span></span>
<span class="line">	<span class="token keyword">var</span> m <span class="token builtin">int32</span></span>
<span class="line">	<span class="token comment">// compiler error: cannot use n (type int16) as type int32 in assignment</span></span>
<span class="line">	<span class="token comment">//m = n</span></span>
<span class="line">	m <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;32 bit int is: %d\\n&quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;16 bit int is: %d\\n&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">32 bit int is: 34</span>
<span class="line">16 bit int is: 34</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>格式化说明符</strong></p><p>在格式化字符串里，<code>%d</code> 用于格式化整数（<code>%x</code> 和 <code>%X</code> 用于格式化 16 进制表示的数字），<code>%g</code> 用于格式化浮点型（<code>%f</code> 输出浮点数，<code>%e</code> 输出科学计数表示法），<code>%0nd</code> 用于规定输出长度为 n 的整数，其中开头的数字 0 是必须的。</p><p><code>%n.mg</code> 用于表示数字 n 并精确到小数点后 m 位，除了使用 g 之外，还可以使用 e 或者 f，例如：使用格式化字符串 <code>%5.2e</code> 来输出 3.4 的结果为 <code>3.40e+00</code>。</p><p><strong>数字值转换</strong></p><p>当进行类似 <code>a32bitInt = int32(a32Float)</code> 的转换时，小数点后的数字将被丢弃。这种情况一般发生当从取值范围较大的类型转换为取值范围较小的类型时，或者你可以写一个专门用于处理类型转换的函数来确保没有发生精度的丢失。下面这个例子展示如何安全地从 <code>int</code> 型转换为 <code>int8</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">Uint8FromInt</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">uint8</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> n <span class="token operator">&lt;=</span> math<span class="token punctuation">.</span>MaxUint8 <span class="token punctuation">{</span> <span class="token comment">// conversion is safe</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token function">uint8</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;%d is out of the uint8 range&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者安全地从 <code>float64</code> 转换为 <code>int</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">IntFromFloat64</span><span class="token punctuation">(</span>x <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> math<span class="token punctuation">.</span>MinInt32 <span class="token operator">&lt;=</span> x <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> math<span class="token punctuation">.</span>MaxInt32 <span class="token punctuation">{</span> <span class="token comment">// x lies in the integer range</span></span>
<span class="line">		whole<span class="token punctuation">,</span> fraction <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Modf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">if</span> fraction <span class="token operator">&gt;=</span> <span class="token number">0.5</span> <span class="token punctuation">{</span></span>
<span class="line">			whole<span class="token operator">++</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token function">int</span><span class="token punctuation">(</span>whole<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%g is out of the int32 range&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),a("p",null,[n[35]||(n[35]=s("不过如果你实际存的数字超出你要转换到的类型的取值范围的话，则会引发 ")),n[36]||(n[36]=a("code",null,"panic",-1)),n[37]||(n[37]=s("（")),p(e,{to:"/chapter-2/13.2.html"},{default:t(()=>n[34]||(n[34]=[s("第 13.2 节")])),_:1}),n[38]||(n[38]=s("）。"))]),n[81]||(n[81]=o(`<p><strong>问题 4.1</strong> <code>int</code> 和 <code>int64</code> 是相同的类型吗？</p><h3 id="_4-5-2-2-复数" tabindex="-1"><a class="header-anchor" href="#_4-5-2-2-复数"><span>4.5.2.2 复数</span></a></h3><p>Go 拥有以下复数类型：</p><pre><code>complex64 (32 位实数和虚数)
complex128 (64 位实数和虚数)
</code></pre><p>复数使用 <code>re+imI</code> 来表示，其中 <code>re</code> 代表实数部分，<code>im</code> 代表虚数部分，<code>I</code> 代表根号负 1。</p><p>示例：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> c1 <span class="token builtin">complex64</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">10i</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The value is: %v&quot;</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 输出： 5 + 10i</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>re</code> 和 <code>im</code> 的类型均为 <code>float32</code>，那么类型为 <code>complex64</code> 的复数 <code>c</code> 可以通过以下方式来获得：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">c <span class="token operator">=</span> <span class="token function">complex</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span> im<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>函数 <code>real(c)</code> 和 <code>imag(c)</code> 可以分别获得相应的实数和虚数部分。</p><p>在使用格式化说明符时，可以使用 <code>%v</code> 来表示复数，但当你希望只表示其中的一个部分的时候需要使用 <code>%f</code>。</p><p>复数支持和其它数字类型一样的运算。当你使用等号 <code>==</code> 或者不等号 <code>!=</code> 对复数进行比较运算时，注意对精确度的把握。<code>cmath</code> 包中包含了一些操作复数的公共方法。如果你对内存的要求不是特别高，最好使用 <code>complex128</code> 作为计算类型，因为相关函数都使用这个类型的参数。</p><h3 id="_4-5-2-3-位运算" tabindex="-1"><a class="header-anchor" href="#_4-5-2-3-位运算"><span>4.5.2.3 位运算</span></a></h3><p>位运算只能用于整数类型的变量，且需当它们拥有等长位模式时。</p><p><code>%b</code> 是用于表示位的格式化标识符。</p><p><strong>二元运算符</strong></p><ul><li><p>按位与 <code>&amp;</code>：</p><p>对应位置上的值经过和运算结果，具体参见和运算符（第 4.5.1 节），并将 T (true) 替换为 <code>1</code>，将 F (false) 替换为 <code>0</code></p><pre><code>  1 &amp; 1 -&gt; 1
  1 &amp; 0 -&gt; 0
  0 &amp; 1 -&gt; 0
  0 &amp; 0 -&gt; 0
</code></pre></li><li><p>按位或 <code>|</code>：</p><p>对应位置上的值经过或运算结果，具体参见或运算符（第 4.5.1 节），并将 T (true) 替换为 <code>1</code>，将 F (false) 替换为 <code>0</code></p><pre><code>  1 | 1 -&gt; 1
  1 | 0 -&gt; 1
  0 | 1 -&gt; 1
  0 | 0 -&gt; 0
</code></pre></li><li><p>按位异或 <code>^</code>：</p><p>对应位置上的值根据以下规则组合：</p><pre><code>  1 ^ 1 -&gt; 0
  1 ^ 0 -&gt; 1
  0 ^ 1 -&gt; 1
  0 ^ 0 -&gt; 0
</code></pre></li><li><p>位清除 <code>&amp;^</code>：将指定位置上的值设置为 <code>0</code>。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> x <span class="token builtin">uint8</span> <span class="token operator">=</span> <span class="token number">15</span></span>
<span class="line">	<span class="token keyword">var</span> y <span class="token builtin">uint8</span> <span class="token operator">=</span> <span class="token number">4</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> x <span class="token operator">&amp;^</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 00001011</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>一元运算符</strong></p><ul><li><p>按位补足 <code>^</code>：</p><p>该运算符与异或运算符一同使用，即 <code>m^x</code>，对于无符号 <code>x</code> 使用 “全部位设置为 1” 的规则，对于有符号 <code>x</code> 时使用 <code>m=-1</code>。例如：</p><pre><code>  ^10 = -01 ^ 10 = -11
</code></pre></li><li><p>位左移 <code>&lt;&lt;</code>：</p><ul><li><p>用法：<code>bitP &lt;&lt; n</code>。</p></li><li><p><code>bitP</code> 的位向左移动 <code>n</code> 位，右侧空白部分使用 0 填充；如果 <code>n</code> 等于 2，则结果是 2 的相应倍数，即 2 的 <code>n</code> 次方。例如：</p><pre><code>  1 &lt;&lt; 10 // 等于 1 KB
  1 &lt;&lt; 20 // 等于 1 MB
  1 &lt;&lt; 30 // 等于 1 GB
</code></pre></li></ul></li><li><p>位右移 <code>&gt;&gt;</code>：</p><ul><li>用法：<code>bitP &gt;&gt; n</code>。</li><li><code>bitP</code> 的位向右移动 <code>n</code> 位，左侧空白部分使用 0 填充；如果 <code>n</code> 等于 2，则结果是当前值除以 2 的 n 次方。</li></ul></li></ul><p>当希望把结果赋值给第一个操作数时，可以简写为 <code>a &lt;&lt;= 2</code> 或者 <code>b ^= a &amp; 0xffffffff</code>。</p><p><strong>位左移常见实现存储单位的用例</strong></p><p>使用位左移与 <code>iota</code> 计数配合可优雅地实现存储单位的常量枚举：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> ByteSize <span class="token builtin">float64</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token boolean">_</span> <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// 通过赋值给空白标识符来忽略值</span></span>
<span class="line">	KB ByteSize <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token boolean">iota</span><span class="token punctuation">)</span></span>
<span class="line">	MB</span>
<span class="line">	GB</span>
<span class="line">	TB</span>
<span class="line">	PB</span>
<span class="line">	EB</span>
<span class="line">	ZB</span>
<span class="line">	YB</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在通讯中使用位左移表示标识的用例</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> BitFlag <span class="token builtin">int</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">(</span></span>
<span class="line">	Active BitFlag <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token boolean">iota</span> <span class="token comment">// 1 &lt;&lt; 0 == 1</span></span>
<span class="line">	Send <span class="token comment">// 1 &lt;&lt; 1 == 2</span></span>
<span class="line">	Receive <span class="token comment">// 1 &lt;&lt; 2 == 4</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">flag <span class="token operator">:=</span> Active <span class="token operator">|</span> Send <span class="token comment">// == 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-2-4-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_4-5-2-4-逻辑运算符"><span>4.5.2.4 逻辑运算符</span></a></h3><p>Go 中拥有以下逻辑运算符：<code>==</code>、<code>!=</code>（第 4.5.1 节）、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>。</p><p>它们之所以被称为逻辑运算符是因为它们的运算结果总是为布尔值 <code>bool</code>。例如：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">b3 <span class="token operator">:=</span> <span class="token number">10</span> <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token comment">// b3 is true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-5-2-5-算术运算符" tabindex="-1"><a class="header-anchor" href="#_4-5-2-5-算术运算符"><span>4.5.2.5 算术运算符</span></a></h3><p>常见可用于整数和浮点数的二元运算符有 <code>+</code>、<code>-</code>、<code>*</code> 和 <code>/</code>。</p><p>（相对于一般规则而言，Go 在进行字符串拼接时允许使用对运算符 <code>+</code> 的重载，但 Go 本身不允许开发者进行自定义的运算符重载）</p><p><code>/</code> 对于整数运算而言，结果依旧为整数，例如：<code>9 / 4 -&gt; 2</code>。</p><p>取余运算符只能作用于整数：<code>9 % 4 -&gt; 1</code>。</p>`,34)),a("p",null,[n[40]||(n[40]=s("整数除以 0 可能导致程序崩溃，将会导致运行时的恐慌状态（如果除以 0 的行为在编译时就能被捕捉到，则会引发编译错误）；")),p(e,{to:"/chapter-2/13.0.html"},{default:t(()=>n[39]||(n[39]=[s("第 13 章")])),_:1}),n[41]||(n[41]=s(" 将会详细讲解如何正确地处理此类情况。"))]),n[82]||(n[82]=o(`<p>浮点数除以 <code>0.0</code> 会返回一个无穷尽的结果，使用 <code>+Inf</code> 表示。</p><p><strong>练习 4.4</strong> 尝试编译 <a href="exercises/chapter_4/divby0.go">divby0.go</a>。</p><p>你可以将语句 <code>b = b + a</code> 简写为 <code>b += a</code>，同样的写法也可用于 <code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>。</p><p>对于整数和浮点数，你可以使用一元运算符 <code>++</code>（递增）和 <code>--</code>（递减），但只能用于后缀：</p><pre><code>i++ -&gt; i += 1 -&gt; i = i + 1
i-- -&gt; i -= 1 -&gt; i = i - 1
</code></pre><p>同时，带有 <code>++</code> 和 <code>--</code> 的只能作为语句，而非表达式，因此 <code>n = i++</code> 这种写法是无效的，其它像 <code>f(i++)</code> 或者 <code>a[i]=b[i++]</code> 这些可以用于 C、C++ 和 Java 中的写法在 Go 中也是不允许的。</p>`,6)),a("p",null,[n[43]||(n[43]=s("在运算时 ")),n[44]||(n[44]=a("strong",null,"溢出",-1)),n[45]||(n[45]=s(" 不会产生错误，Go 会简单地将超出位数抛弃。如果你需要范围无限大的整数或者有理数（意味着只被限制于计算机内存），你可以使用标准库中的 ")),n[46]||(n[46]=a("code",null,"big",-1)),n[47]||(n[47]=s(" 包，该包提供了类似 ")),n[48]||(n[48]=a("code",null,"big.Int",-1)),n[49]||(n[49]=s(" 和 ")),n[50]||(n[50]=a("code",null,"big.Rat",-1)),n[51]||(n[51]=s(" 这样的类型（")),p(e,{to:"/chapter-2/09.4.html"},{default:t(()=>n[42]||(n[42]=[s("第 9.4 节")])),_:1}),n[52]||(n[52]=s("）。"))]),n[83]||(n[83]=o(`<h3 id="_4-5-2-6-随机数" tabindex="-1"><a class="header-anchor" href="#_4-5-2-6-随机数"><span>4.5.2.6 随机数</span></a></h3><p>一些像游戏或者统计学类的应用需要用到随机数。<code>rand</code> 包实现了伪随机数的生成。</p><p>示例 4.10 <a href="examples/chapter_4/random.go">random.go</a> 演示了如何生成 10 个非负随机数：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">	<span class="token string">&quot;math/rand&quot;</span></span>
<span class="line">	<span class="token string">&quot;time&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">		a <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d / &quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">		r <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d / &quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	timens <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Nanosecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>timens<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%2.2f / &quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">*</span>rand<span class="token punctuation">.</span><span class="token function">Float32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可能的输出：</p><pre><code>816681689 / 1325201247 / 623951027 / 478285186 / 1654146165 /
1951252986 / 2029250107 / 762911244 / 1372544545 / 591415086 / / 3 / 0 / 6 / 4 / 2 /22.10
/ 65.77 / 65.89 / 16.85 / 75.56 / 46.90 / 55.24 / 55.95 / 25.58 / 70.61 /
</code></pre><p>函数 <code>rand.Float32</code> 和 <code>rand.Float64</code> 返回介于 $[0.0, 1.0)$ 之间的伪随机数，其中包括 <code>0.0</code> 但不包括 <code>1.0</code>。函数 <code>rand.Intn</code> 返回介于 $[0, n)$ 之间的伪随机数。</p><p>你可以使用 <code>rand.Seed(value)</code> 函数来提供伪随机数的生成种子，一般情况下都会使用当前时间的纳秒级数字（第 4.8 节）。</p><h2 id="_4-5-3-运算符与优先级" tabindex="-1"><a class="header-anchor" href="#_4-5-3-运算符与优先级"><span>4.5.3 运算符与优先级</span></a></h2><p>有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低：</p><pre><code>优先级 	运算符
 7 		^ !
 6 		* / % &lt;&lt; &gt;&gt; &amp; &amp;^
 5 		+ - | ^
 4 		== != &lt; &lt;= &gt;= &gt;
 3 		&lt;-
 2 		&amp;&amp;
 1 		||
</code></pre><p>当然，你可以通过使用括号来临时提升某个表达式的整体运算优先级。</p><h2 id="_4-5-4-类型别名" tabindex="-1"><a class="header-anchor" href="#_4-5-4-类型别名"><span>4.5.4 类型别名</span></a></h2><p>当你在使用某个类型时，你可以给它起另一个名字，然后你就可以在你的代码中使用新的名字（用于简化名称或解决名称冲突）。</p><p>在 <code>type TZ int</code> 中，<code>TZ</code> 就是 <code>int</code> 类型的新名称（用于表示程序中的时区），然后就可以使用 <code>TZ</code> 来操作 <code>int</code> 类型的数据。</p><p>示例 4.11 <a href="examples/chapter_4/type.go">type.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> TZ <span class="token builtin">int</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> a<span class="token punctuation">,</span> b TZ <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span></span>
<span class="line">	c <span class="token operator">:=</span> a <span class="token operator">+</span> b</span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;c has the value: %d&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment">// 输出：c has the value: 7</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17)),a("p",null,[n[54]||(n[54]=s("实际上，类型别名得到的新类型并非和原类型完全相同，新类型不会拥有原类型所附带的方法（")),p(e,{to:"/chapter-2/10.0.html"},{default:t(()=>n[53]||(n[53]=[s("第 10 章")])),_:1}),n[55]||(n[55]=s("）；")),n[56]||(n[56]=a("code",null,"TZ",-1)),n[57]||(n[57]=s(" 可以自定义一个方法用来输出更加人性化的时区信息。"))]),n[84]||(n[84]=o(`<p><strong>练习 4.5</strong> 定义一个 <code>string</code> 的类型别名 <code>Rope</code>，并声明一个该类型的变量。</p><h2 id="_4-5-5-字符类型" tabindex="-1"><a class="header-anchor" href="#_4-5-5-字符类型"><span>4.5.5 字符类型</span></a></h2><p>严格来说，这并不是 Go 语言的一个类型，字符只是整数的特殊用例。<code>byte</code> 类型是 <code>uint8</code> 的别名，对于只占用 1 个字节的传统 ASCII 编码的字符来说，完全没有问题。例如：<code>var ch byte = &#39;A&#39;</code>；字符使用单引号括起来。</p><p>在 ASCII 码表中，<code>&#39;A&#39;</code> 的值是 <code>65</code>，而使用 16 进制表示则为 <code>41</code>，所以下面的写法是等效的：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> ch <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token number">65</span> 或 <span class="token keyword">var</span> ch <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;\\x41&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（<code>\\x</code> 总是紧跟着长度为 2 的 16 进制数）</p><p>另外一种可能的写法是 <code>\\</code> 后面紧跟着长度为 3 的 8 进制数，例如：<code>\\377</code>。</p><p>不过 Go 同样支持 Unicode（UTF-8），因此字符同样称为 Unicode 代码点或者 runes，并在内存中使用 <code>int</code> 来表示。在文档中，一般使用格式 <code>U+hhhh</code> 来表示，其中 <code>h</code> 表示一个 16 进制数。其实 <code>rune</code> 也是 Go 当中的一个类型，并且是 <code>int32</code> 的别名。</p><p>在书写 Unicode 字符时，需要在 16 进制数之前加上前缀 <code>\\u</code> 或者 <code>\\U</code>。</p><p>因为 Unicode 至少占用 2 个字节，所以我们使用 <code>int16</code> 或者 <code>int</code> 类型来表示。如果需要使用到 4 字节，则会加上 <code>\\U</code> 前缀；前缀 <code>\\u</code> 则总是紧跟着长度为 4 的 16 进制数，前缀 <code>\\U</code> 紧跟着长度为 8 的 16 进制数。</p><p>示例 4.12 <a href="examples/chapter_4/char.go">char.go</a></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> ch <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token char">&#39;\\u0041&#39;</span></span>
<span class="line"><span class="token keyword">var</span> ch2 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token char">&#39;\\u03B2&#39;</span></span>
<span class="line"><span class="token keyword">var</span> ch3 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token char">&#39;\\U00101234&#39;</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d - %d - %d\\n&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> ch3<span class="token punctuation">)</span> <span class="token comment">// integer</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c - %c - %c\\n&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> ch3<span class="token punctuation">)</span> <span class="token comment">// character</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%X - %X - %X\\n&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> ch3<span class="token punctuation">)</span> <span class="token comment">// UTF-8 bytes</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%U - %U - %U&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> ch3<span class="token punctuation">)</span> <span class="token comment">// UTF-8 code point</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><pre><code>65 - 946 - 1053236
A - β - r
41 - 3B2 - 101234
U+0041 - U+03B2 - U+101234
</code></pre>`,14)),a("p",null,[n[59]||(n[59]=s("格式化说明符 ")),n[60]||(n[60]=a("code",null,"%c",-1)),n[61]||(n[61]=s(" 用于表示字符；当和字符配合使用时，")),n[62]||(n[62]=a("code",null,"%v",-1)),n[63]||(n[63]=s(" 或 ")),n[64]||(n[64]=a("code",null,"%d",-1)),n[65]||(n[65]=s(" 会输出用于表示该字符的整数；")),n[66]||(n[66]=a("code",null,"%U",-1)),n[67]||(n[67]=s(" 输出格式为 ")),n[68]||(n[68]=a("code",null,"U+hhhh",-1)),n[69]||(n[69]=s(" 的字符串（另一个示例见")),p(e,{to:"/chapter-2/05.4.html"},{default:t(()=>n[58]||(n[58]=[s("第 5.4.4 节")])),_:1}),n[70]||(n[70]=s("）。"))]),n[85]||(n[85]=o('<p>包 <code>unicode</code> 包含了一些针对测试字符的非常有用的函数（其中 <code>ch</code> 代表字符）：</p><ul><li>判断是否为字母：<code>unicode.IsLetter(ch)</code></li><li>判断是否为数字：<code>unicode.IsDigit(ch)</code></li><li>判断是否为空白符号：<code>unicode.IsSpace(ch)</code></li></ul><p>这些函数返回单个布尔值。包 <code>utf8</code> 拥有更多与 <code>rune</code> 类型相关的函数。</p><p>（ <strong>译者注：关于类型的相关讲解，可参考视频教程 《Go编程基础》 第 3 课：<a href="https://github.com/Unknwon/go-fundamental-programming/blob/master/lectures/lecture3.md" target="_blank" rel="noopener noreferrer">类型与变量</a></strong> ）</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2>',5)),a("ul",null,[a("li",null,[p(e,{to:"/chapter-2/directory.html"},{default:t(()=>n[71]||(n[71]=[s("目录")])),_:1})]),a("li",null,[n[73]||(n[73]=s("上一节：")),p(e,{to:"/chapter-2/04.4.html"},{default:t(()=>n[72]||(n[72]=[s("变量")])),_:1})]),a("li",null,[n[75]||(n[75]=s("下一节：")),p(e,{to:"/chapter-2/04.6.html"},{default:t(()=>n[74]||(n[74]=[s("字符串")])),_:1})])])])}const v=l(r,[["render",u],["__file","04.5.html.vue"]]),b=JSON.parse('{"path":"/chapter-2/04.5.html","title":"4.5 基本类型和运算符","lang":"zh-cn","frontmatter":{},"headers":[{"level":1,"title":"4.5 基本类型和运算符","slug":"_4-5-基本类型和运算符","link":"#_4-5-基本类型和运算符","children":[{"level":2,"title":"4.5.1 布尔类型 bool","slug":"_4-5-1-布尔类型-bool","link":"#_4-5-1-布尔类型-bool","children":[]},{"level":2,"title":"4.5.2 数字类型","slug":"_4-5-2-数字类型","link":"#_4-5-2-数字类型","children":[{"level":3,"title":"4.5.2.1 整型 int 和浮点型 float","slug":"_4-5-2-1-整型-int-和浮点型-float","link":"#_4-5-2-1-整型-int-和浮点型-float","children":[]},{"level":3,"title":"4.5.2.2 复数","slug":"_4-5-2-2-复数","link":"#_4-5-2-2-复数","children":[]},{"level":3,"title":"4.5.2.3 位运算","slug":"_4-5-2-3-位运算","link":"#_4-5-2-3-位运算","children":[]},{"level":3,"title":"4.5.2.4 逻辑运算符","slug":"_4-5-2-4-逻辑运算符","link":"#_4-5-2-4-逻辑运算符","children":[]},{"level":3,"title":"4.5.2.5 算术运算符","slug":"_4-5-2-5-算术运算符","link":"#_4-5-2-5-算术运算符","children":[]},{"level":3,"title":"4.5.2.6 随机数","slug":"_4-5-2-6-随机数","link":"#_4-5-2-6-随机数","children":[]}]},{"level":2,"title":"4.5.3 运算符与优先级","slug":"_4-5-3-运算符与优先级","link":"#_4-5-3-运算符与优先级","children":[]},{"level":2,"title":"4.5.4 类型别名","slug":"_4-5-4-类型别名","link":"#_4-5-4-类型别名","children":[]},{"level":2,"title":"4.5.5 字符类型","slug":"_4-5-5-字符类型","link":"#_4-5-5-字符类型","children":[]},{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}]}],"git":{},"filePathRelative":"chapter-2/04.5.md"}');export{v as comp,b as data};
